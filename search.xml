<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>AWS Service | Elasticache 101</title>
    <url>/category/AWS-Service-Elasticache-101/</url>
    <content><![CDATA[<h3 id="1-What-is-Elasticache"><a href="#1-What-is-Elasticache" class="headerlink" title="1. What is Elasticache"></a>1. What is Elasticache</h3><p>ElastiCache is a web service that makes it easy to deploy, operate, and scale an in-memory cache in the cloud. The service improves the performance of web applications by allowing you to retrieve information from fast, managed, in-memory caches, instead of relying entirely on slower disk-based databases. </p>
<a id="more"></a>

<p>Amazon ElastiCache can be used to significantly improve latency and throughput for many read-heavy application workloads(such as social networking, gaming, media sharing and Q&amp;A portals) or compute-intensive workloads(such as a recommendation engine)</p>
<p>Caching improved application performance by storing critical pieces of data in memory for low-latency access. Cached information may include the results of I/O-intensive database queries or the results of computationally-intensive calculations. </p>
<h3 id="2-Types-of-Elasticache"><a href="#2-Types-of-Elasticache" class="headerlink" title="2. Types of Elasticache"></a>2. Types of Elasticache</h3><h4 id="Memcached"><a href="#Memcached" class="headerlink" title="Memcached"></a>Memcached</h4><ul>
<li>A widely adopted memory object caching system. ElastiCache is protocol compliant with Memcached, so popular tools that you use today with existing Memcached environments will work seamlessly with the service. </li>
<li>Because Memcached is designed as a pure caching solution with no persistence, ElastiCache manages Memcached nodes as a pool that can grow and shrink, similar to an Amazon EC2 Auto Scaling Group. Individual nodes are expendable, and ElastiCache provides additional capabilities here, such as automatic node replacement and Auto Discovery. <h4 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h4></li>
<li>A popular open-source in-memory key-value store that supports data structures such as sorted sets and lists. ElastiCache supports Master/Slave replication and Multi-AZ which can be used to achieve cross AZ redundancy. </li>
<li>Although both Memcached and Redis appear similar on the surface(in that they are both in-memory key stores), they are actually quite different in practice. Because of the replication and persistence features of Redis, ElastiCache manages Redis more as a relational database. Redis ElastiCache clusters are managed as stateful entities that include failover, similar to how Amazon RDS manages database failover. </li>
</ul>
<h3 id="3-Memcached-Use-Cases"><a href="#3-Memcached-Use-Cases" class="headerlink" title="3. Memcached - Use Cases"></a>3. Memcached - Use Cases</h3><ul>
<li>Is object caching your primary goal, for example to offload your database? If so, use Memcached.</li>
<li>Are you interested in as simple a caching model as possible? If so, use Memcached.</li>
<li>Are you planning on running large cache nodes, and require multithreaded performance with utilization of multiple cores? If so, use Memcached. </li>
<li>Do you want the ability to scale your cache horizontally as you grow? If so, use Memcached. </li>
</ul>
<h3 id="4-Redis-Use-Cases"><a href="#4-Redis-Use-Cases" class="headerlink" title="4. Redis - Use Cases"></a>4. Redis - Use Cases</h3><ul>
<li>Are you looking for more advanced data types, such as lists, hashes, and sets? If so, use Redis.</li>
<li>Does sorting and ranking datasets in memory help you, such as with leaderboards? If so, use Redis.</li>
<li>Is persistence of your key store important? If so, use Redis.</li>
<li>Do you want to run in multiple AWS Availability Zones(Multi-AZ) with failover? If so, use Redis.</li>
</ul>
<h3 id="5-ElasticCache-Exam-Tips"><a href="#5-ElasticCache-Exam-Tips" class="headerlink" title="5. ElasticCache Exam Tips"></a>5. ElasticCache Exam Tips</h3><ul>
<li>Typically, you will be given a scenario where a particular database is under a lot of stree/load. You may be asked which service you should use to alleviate this. </li>
<li>ElasticCache is a good choice if your database is particularly read-heavy and not prone to frequent changing.</li>
<li>Redshift is a good answer if the reason your database is felling stress is because management keep running OLAP transaction on it etc. </li>
<li>Use Memcached if <ul>
<li>Object caching is your primary goal</li>
<li>You want to keep things as simple as possible</li>
<li>You want to scale your cache horizontally(scale out)</li>
</ul>
</li>
<li>Use Redis if<ul>
<li>You have advanced data types, such as lists, hashes, and sets</li>
<li>You are doing data sorting and ranking(such as leaderboards)</li>
<li>Data Persistence</li>
<li>Multi-AZ</li>
<li>Pub/Sub capabilities are needed</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>AWS Services</category>
        <category>Elasticache</category>
        <category>AWS Certified Developer - Associate</category>
      </categories>
      <tags>
        <tag>AWS Services</tag>
        <tag>AWS Certified Developer - Associate</tag>
        <tag>Elasticache</tag>
      </tags>
  </entry>
  <entry>
    <title>Data Warehouse | Part 1 What is Dimensional Model in Data Warehouse</title>
    <url>/category/Data-Warehouse-Part-1-What-is-Dimensional-Model-in-Data-Warehouse/</url>
    <content><![CDATA[<h3 id="What-is-Dimensional-Model"><a href="#What-is-Dimensional-Model" class="headerlink" title="What is Dimensional Model?"></a>What is Dimensional Model?</h3><p>A dimensional model is a data structure technique optimized for Data Warehousing tools. The concept of Dimensional Modelling is comprised of “fact” and “dimension” tables.</p>
<a id="more"></a>

<p>A dimensional model is designed to read, summarize, analyze numeric information like values, balances, counts, weights, etc. in a data warehouse. IN contrast, relation models are optimized for addition, updating and deleting of data in a real-time Online Transaction System. </p>
<p>These dimensional and relational models have their unique way of data storage that has specific advantages.</p>
<p>For instance, in the relational mode, normalization and ER models reduce redundancy in data. On the contrary, dimensional model arranges data in such a way that it is easier too retrieve information and generate reports. </p>
<p>Hence, Dimensional models are used in data warehouse systems and not a good fit for relational systems. </p>
<h3 id="Elements-of-Dimensional-Data-Model"><a href="#Elements-of-Dimensional-Data-Model" class="headerlink" title="Elements of Dimensional Data Model"></a>Elements of Dimensional Data Model</h3><h4 id="Fact"><a href="#Fact" class="headerlink" title="Fact"></a>Fact</h4><p>Facts are the measurements/metrics or facts from your business process. For a Sales business process, a measurement would be quarterly sales number</p>
<h4 id="Dimension"><a href="#Dimension" class="headerlink" title="Dimension"></a>Dimension</h4><p>Dimension provides the context surrounding a business process event. In simple terms, they give who, what, where of a fact. In the Sales business process, for the fact quarterly sales number, dimensions would be </p>
<ul>
<li>Who - Customer Names</li>
<li>Where - Location</li>
<li>What - Product Name</li>
</ul>
<p>In other words, a dimension is a window to view information in the facts.</p>
<h4 id="Attributes"><a href="#Attributes" class="headerlink" title="Attributes"></a>Attributes</h4><p>The Attributes are the various characteristics of the dimension.</p>
<p>In the Location dimension, the attributes can be</p>
<ul>
<li>State</li>
<li>Country</li>
<li>Zip code etc.</li>
</ul>
<p>Attributes are used to search, filter, or classify facts. Dimension Tables contain Attributes</p>
<h4 id="Fact-Table"><a href="#Fact-Table" class="headerlink" title="Fact Table"></a>Fact Table</h4><p>A fact table is a primary table in a dimensional model</p>
<p>A Fact Table contains</p>
<ul>
<li>Measurements/facts</li>
<li>Foreign key to dimension table</li>
</ul>
<h4 id="Dimension-Table"><a href="#Dimension-Table" class="headerlink" title="Dimension Table"></a>Dimension Table</h4><ul>
<li>A dimension table contains dimensions of a fact</li>
<li>They are joined to fact table via a foreign key</li>
<li>Dimension tables are de-normalized tables</li>
<li>The dimension Attributes are the various columns in a dimension table</li>
<li>Dimensions offers descriptive characteristics of the facts with the help of their attributes</li>
<li>No set limit set for given for number of dimensions</li>
<li>The dimension can also contain one or more hierarchical relationships</li>
</ul>
<h3 id="Steps-of-Dimensional-Modelling"><a href="#Steps-of-Dimensional-Modelling" class="headerlink" title="Steps of Dimensional Modelling"></a>Steps of Dimensional Modelling</h3><p>The accuracy in creating the Dimensional Modeling determines the success of the data warehouse implementation. Here are the steps to create Dimension Model</p>
<ol>
<li>Identify Business Process</li>
<li>Identify Grain(level of detail)</li>
<li>Identify Dimensions</li>
<li>Identify Facts</li>
<li>Build Star</li>
</ol>
<p>The model should describe the Why, How Much, When/Where/Who and What of the business process</p>
<p><img src="https://i.imgur.com/bi9t6UH.png" alt="Dimensional Modelling Steps"></p>
<h4 id="Step-1-Identify-the-business-process"><a href="#Step-1-Identify-the-business-process" class="headerlink" title="Step 1) Identify the business process"></a>Step 1) Identify the business process</h4><p>Identifying the actual business process a data warehouse should cover. This could be Marketing, Sales, HR, etc. As per the data analysis needs of the organization. The selection of the Business process also depends on the quality of data available for the process. It is the most important step of the Data Modelling process, and a failure here would have cascading and irreparable defects.</p>
<p>To describe the business process, you can use plain text or use basic <strong>Business Process Modelling Notation(BPMN)</strong> or <strong>Unified Modelling Language(UML)</strong>.</p>
<h4 id="Step-2-Identify-the-grain"><a href="#Step-2-Identify-the-grain" class="headerlink" title="Step 2) Identify the grain"></a>Step 2) Identify the grain</h4><p>The Grain describes the level of detail for the business problem/solution. It is the process of identifying the lowest level of information for any table in your data warehouse. If a table contains sales data for every day, then it should be daily granularity. If a table contains total sales data for each month, then it has monthly granularity.</p>
<p>During this stage, you answer questions like</p>
<ol>
<li>Do we need to store all the available products or just a few types of products? This decision is based on the business processes selected for Data Warehouse. </li>
<li>Do we store the product sale information on a monthly, weekly, daily or hourly basis? This decision depends on the nature of reports requested by executives</li>
<li>How do the above two choices affect the database size?</li>
</ol>
<h5 id="Example-of-Grain"><a href="#Example-of-Grain" class="headerlink" title="Example of Grain:"></a>Example of Grain:</h5><p>The CEO at an MNC wants to find the sales for specific products in different locations on a daily basis. </p>
<p>So the grain is “product sale information by location by the day”</p>
<h4 id="Step-3-Identify-the-dimensions"><a href="#Step-3-Identify-the-dimensions" class="headerlink" title="Step 3) Identify the dimensions"></a>Step 3) Identify the dimensions</h4><p>Dimensions are nouns like data, store, inventory, etc. These dimensions are where all the data should be stored. For example, the data dimension may contain data like a year, month and weekday. </p>
<h5 id="Example-of-Dimensions"><a href="#Example-of-Dimensions" class="headerlink" title="Example of Dimensions:"></a>Example of Dimensions:</h5><p>The CEO at an MNC wants to find the sales for specific products in different locations on a daily basis.</p>
<h5 id="Dimensions"><a href="#Dimensions" class="headerlink" title="Dimensions:"></a>Dimensions:</h5><p>Product, Location and Time</p>
<h5 id="Attributes-1"><a href="#Attributes-1" class="headerlink" title="Attributes:"></a>Attributes:</h5><p>For Product: Product, Key(Foreign Key), Name, Type, Specifications</p>
<h5 id="Hierarchies"><a href="#Hierarchies" class="headerlink" title="Hierarchies:"></a>Hierarchies:</h5><p>For Location: County, State, City, Street Address, Name</p>
<h4 id="Step-4-Identify-the-Fact"><a href="#Step-4-Identify-the-Fact" class="headerlink" title="Step 4) Identify the Fact"></a>Step 4) Identify the Fact</h4><p>This step is co-associated with the business users of the system because this is where they get access to data stored in the data warehouse. Most of the fact table rows are numerical values like price or cost per unit, etc.</p>
<p>Example of Facts:<br>The CEO at an MNC wants to find the sales for specific products in different locations on a daily basis.</p>
<p>The fact here is Sum of Sales by product by location by time. </p>
<h4 id="Step-5-Build-Schema"><a href="#Step-5-Build-Schema" class="headerlink" title="Step 5) Build Schema"></a>Step 5) Build Schema</h4><p>In this step, you implement the Dimension Model. A schema is nothing but the database structure(arrangement of tables). There are two popular schemas</p>
<ol>
<li>Star Schema<br>The star schema architecture is easy to design. It is called a star schema because diagram resembles a star, with points radiating from a center. The center of the star consists of the fact table, and the points of the star is dimension tables.</li>
</ol>
<p>The fact tables in a star schema which is third normal form whereas dimensional tables are de-normalized.</p>
<ol start="2">
<li>Snowflake Schema<br>The snowflake schema is an extension of the star schema. In a snowflake schema, each dimension are normalized and connected to more dimension tables. </li>
</ol>
<h3 id="Rules-for-Dimensional-Modelling"><a href="#Rules-for-Dimensional-Modelling" class="headerlink" title="Rules for Dimensional Modelling"></a>Rules for Dimensional Modelling</h3><ul>
<li>Load atomic data into dimensional structures.</li>
<li>Build dimensional models around business processes.</li>
<li>Need to ensure that every fact table has an associated date dimension table.</li>
<li>Ensure that all facts in a single fact table are at the same grain or level of detail</li>
<li>It’s essential to store report labels and filter domain values in dimension tables</li>
<li>Need to ensure that dimension tables use a surrogate key</li>
<li>Continuously balance requirements and realities to deliver business solution to support their decision-making</li>
</ul>
<h3 id="Benefits-of-dimensional-modeling"><a href="#Benefits-of-dimensional-modeling" class="headerlink" title="Benefits of dimensional modeling"></a>Benefits of dimensional modeling</h3><ul>
<li><strong>Standardization</strong> of dimensions allows easy reporting across areas of the business</li>
<li>Dimension tables store the <strong>history</strong> of the dimensional information</li>
<li>It allows to introduced entirely new dimension without major disruptions to the fact table.</li>
<li>Dimensional also to store data in such a fashion that it is <strong>easier to retrieve the information</strong> from the data once the data is stored in the database.</li>
<li>Compared to the normalized model dimensional table are <strong>easier to understand</strong>.</li>
<li>Information is grouped into <strong>clear and simple business categories</strong>.</li>
<li>The dimensional model is very understandable by the business. This model is based on business terms, so that the business knows what each fact, dimension, or attribute means. </li>
<li>Dimensional models are deformalized and optimized for <strong>fast data querying</strong>. Many relational database platforms recognize this model and optimize query execution plans to aid in performance. </li>
<li>Dimensional modeling creates a schema which is optimized for <strong>high performance</strong>. It means fewer joins and helps with <strong>minimized data redundancy</strong>.</li>
<li>The dimensional model also helps to <strong>boost query performance</strong>. It is <strong>more de-normalized</strong> therefore it is <strong>optimized for querying</strong>.</li>
<li>Dimensional models can comfortably accommodate change. Dimension tables can have more columns added to them without affecting existing business intelligence applications using these tables.</li>
</ul>
<h3 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h3><ul>
<li>A dimensional model is a data structure technique optimized for Data Warehousing tools. </li>
<li>Facts are the <strong>measurements/metrics or facts</strong> from your business process.</li>
<li>Dimension provides the context surrounding a business process event.</li>
<li>The Attributes are the <strong>various characteristics</strong> of the dimension.</li>
<li>A fact table is a primary table in a dimension model.</li>
<li>A dimension table contains dimensions of a fact.</li>
<li>There are three types of facts: <strong>Additive/Non-Additive/Semi-Additive</strong>.</li>
<li>Types of Dimensions are <strong>Conformed, Outrigger, Shrunken, Role-playing, Dimension to Dimension Table, Junk, Degenerate, Swappable and Step Dimension</strong>.</li>
<li>Five steps of Dimensional modeling are <strong>1. Identify Business Process. 2. Identify Grain(level of detail). 3. Identify Dimensions. 4. Identify Facts. 5. Build Star</strong>.</li>
<li>In Dimensional modeling, there is need to ensure that every fact table has an associated date dimension table.</li>
</ul>
]]></content>
      <categories>
        <category>Data Warehouse</category>
      </categories>
      <tags>
        <tag>Data Warehouse</tag>
        <tag>Dimensional Model</tag>
      </tags>
  </entry>
  <entry>
    <title>Binary Tree | Part 2 Binary Search Tree</title>
    <url>/category/Binary-Tree-Part-2-Binary-Search-Tree/</url>
    <content><![CDATA[<h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><p>We consider a particular kind of a binary tree called a <strong>Binary Search Tree(BST)</strong>.The basic idea behind this data structure is to have such a storing repository that provides the efficient way of <strong>data sorting, searching and retrieving</strong>.</p>
<a id="more"></a>

<p>It is composed of nodes, which stores data and also links to up to two other child nodes. It is the relationship between the leaves linked to and the linking leaf, also known as the parent node, which makes the binary tree such an efficient data structure. </p>
<p>For a binary tree to be a binary search tree, the data of all the nodes in the left sub-tree of the root node should be less than the data of the root. The data of all the nodes in the right subtree of the root node should be greater than equal to the data of the root. As a result, the leaves on the farthest left of the tree have the lowest values, whereas the leaves on the right of the tree have the greatest values. </p>
<ul>
<li>Each node contains one key(also known as data)</li>
<li>The keys in the left subtree are less than the key in its parent node, in short L &lt; P;</li>
<li>The keys in the right subtree are greater the key in its parent node, in short P &lt; R;</li>
<li>Duplicate keys are not allowed</li>
</ul>
<p>A representation of binary search tree looks like the following:<br>Consider the root node 20. All elements to the left of subtree(10, 5) are less than 20 and all elements to the right of subtree(25, 30, 35) are greater than 20. </p>
<p><img src="https://i.imgur.com/xMQf4Qw.png" alt="Binary Search Tree"></p>
<h3 id="Implementation-of-BST"><a href="#Implementation-of-BST" class="headerlink" title="Implementation of BST"></a>Implementation of BST</h3><p>We implement a binary search tree using a private inner class <strong>BSTNode</strong>. In order to support the binary search tree property, we require that data stored in each node is <strong>Comparable</strong>.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BST</span> &lt;<span class="title">AnyType</span> <span class="keyword">extends</span> <span class="title">Comparable</span>&lt;<span class="title">AnyType</span>&gt;&gt;</span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">   <span class="keyword">private</span> Node&lt;AnyType&gt; root;</span><br><span class="line">   <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">AnyType</span>&gt;</span></span><br><span class="line"><span class="class">   </span>&#123;</span><br><span class="line">      <span class="keyword">private</span> AnyType data;</span><br><span class="line">      <span class="keyword">private</span> Node&lt;AnyType&gt; left, right;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(AnyType data)</span></span></span><br><span class="line"><span class="function">      </span>&#123;</span><br><span class="line">         left = right = <span class="keyword">null</span>;</span><br><span class="line">         <span class="keyword">this</span>.data = data;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>The node itself is very similar to the node in a linked list. A basic knowledge of the code for a linked list will be very helpful in understanding the techniques of binary trees.</p>
<p>It is most logical to create a binary search tree class to encapsulate the workings of the tree into a single area, and also making it reusable. The class will contain functions to <strong>insert data</strong> into the tree, <strong>search</strong> if the data is present and methods for <strong>traversing the tree</strong>. </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BST</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    tree_node *root;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(tree_node* , <span class="keyword">int</span> )</span></span>;</span><br><span class="line">    <span class="function">bool <span class="title">search</span><span class="params">(<span class="keyword">int</span> , tree_node* )</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">inorder</span><span class="params">(tree_node* )</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">preorder</span><span class="params">(tree_node* )</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">postorder</span><span class="params">(tree_node* )</span></span>;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    BST()</span><br><span class="line">    &#123;</span><br><span class="line">        root = NULL;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> )</span></span>;</span><br><span class="line">    <span class="function">bool <span class="title">search</span><span class="params">(<span class="keyword">int</span> key)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">inorder</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">preorder</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">postorder</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>It is necessary to initialize root to <strong>NULL</strong> for the later functions to be able to recognize that it does not exist. </p>
<p>All the public members of the class are designed to allow the user of the class to use the class without dealing with the underlying design. The functions which will be called recursively are the ones which are private, allowing them to travel down the tree. </p>
<h4 id="Insertion-in-a-BST"><a href="#Insertion-in-a-BST" class="headerlink" title="Insertion in a BST"></a>Insertion in a BST</h4><p>To insert data into a binary tree involves a function searching for an unused node in the proper position in the tree in which to insert the key value. The insert function is generally a <strong>recursive function</strong> that continues moving down the levels of a binary tree until there is an unused leaf in a position which follows the following rules of placing nodes. </p>
<ul>
<li>Compare data of the root node and element to be inserted</li>
<li>If the data of the root node is greater, and if a left subtree exists, then repeat step 1 with <strong>root = root of left subtree</strong>. Else, </li>
<li>Insert element as left child of current root.</li>
<li>If the data of the root node is greater, and if a right subtree exists, then repeat step 1 with <strong>root = root of right subtree</strong>.</li>
<li>Else, insert element as right child of current root. </li>
</ul>
<p><img src="https://i.imgur.com/O5RakbM.png" alt="Search in BST"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> BST :: insert(tree_node *node, <span class="keyword">int</span> d)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// element to be inserted is lesser than node’s data</span></span><br><span class="line">    <span class="keyword">if</span>(d &lt; node-&gt;data)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// if left subtree is present</span></span><br><span class="line">        <span class="keyword">if</span>(node-&gt;left != NULL)</span><br><span class="line">            insert(node-&gt;left, d);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// create new node</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            node-&gt;left = <span class="keyword">new</span> tree_node;</span><br><span class="line">            node-&gt;left-&gt;data = d;</span><br><span class="line">            node-&gt;left-&gt;left = NULL;</span><br><span class="line">            node-&gt;left-&gt;right = NULL;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// element to be inserted is greater than node’s data</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(d &gt;= node-&gt;data)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// if left subtree is present</span></span><br><span class="line">        <span class="keyword">if</span>(node-&gt;right != NULL)</span><br><span class="line">            insert(node-&gt;right, d);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// create new node</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            node-&gt;right = <span class="keyword">new</span> tree_node;</span><br><span class="line">            node-&gt;right-&gt;data = d;</span><br><span class="line">            node-&gt;right-&gt;left = NULL;</span><br><span class="line">            node-&gt;right-&gt;right = NULL;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Since the root node is a private member, we also write a public member function which is available to non-members of the class. It calls the private recursive function to insert an element and also takes care of the case when root node is <strong>NULL</strong>. </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> BST::insert(<span class="keyword">int</span> d)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(root!=NULL)</span><br><span class="line">                insert(root, d);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        root = <span class="keyword">new</span> tree_node;</span><br><span class="line">        root-&gt;data = d;</span><br><span class="line">        root-&gt;left = NULL;</span><br><span class="line">        root-&gt;right = NULL;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Searching-in-a-BST"><a href="#Searching-in-a-BST" class="headerlink" title="Searching in a BST"></a>Searching in a BST</h4><p>The search function works in a similar fashion as insert. It will check if the key value of the current node is the value to be searched. If not, it should check to see if the value to be searched for is less than the value of the node, in which case it should be recursively called on the left child node, or if it is greater than the value of the node, it should be recursively called on the right child node. </p>
<ul>
<li>Compare data of the root node and the value to be searched.</li>
<li>If the data of the root node is greater, and if a left subtree exists, then repeat step 1 with <strong>root = root of left subtree</strong>. Else, </li>
<li>If the data of the root node is greater, and if a right subtree exists, then repeat step 1 with <strong>root = root of right subtree</strong>. Else,</li>
<li>If the value to be searched is equal to the data of root node, return true.</li>
<li>Else return false</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">bool BST::search(<span class="keyword">int</span> d, tree_node *node)</span><br><span class="line">&#123;</span><br><span class="line">    bool ans = <span class="keyword">false</span>;</span><br><span class="line">    <span class="comment">// node is not present</span></span><br><span class="line">    <span class="keyword">if</span>(node == NULL)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Node’s data is equal to value searched</span></span><br><span class="line">    <span class="keyword">if</span>(d == node-&gt;data)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Node’s data is greater than value searched</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(d &lt; node-&gt;data)</span><br><span class="line">        ans = search(d, node-&gt;left);</span><br><span class="line">    <span class="comment">// Node’s data is lesser than value searched</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        ans = search(d, node-&gt;right);</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Since the root node is a private member, we also write a public member function which is available to non-members of the class. It calls the private recursive function to search an element and also takes care of the case when root node is NULL. </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">bool BST::search(<span class="keyword">int</span> d)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(root ==  NULL)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">else</span>    </span><br><span class="line">        <span class="keyword">return</span>  search(d, root);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Traversing-in-a-BST"><a href="#Traversing-in-a-BST" class="headerlink" title="Traversing in a BST"></a>Traversing in a BST</h4><p>There are mainly three types of tree traversals:</p>
<ol>
<li><p><strong>Pre-Order Traversal</strong> :<br>In this technique, we do the following:</p>
<ul>
<li>Visit the root</li>
<li>Traverse the left subtree, i.e., call Preorder(left-subtree)</li>
<li>Traverse the right subtree, i.e., call Preorder(right-subtree)</li>
</ul>
</li>
<li><p><strong>Post-Order Traversal</strong> :<br>In this traversal technique we do the following:</p>
<ul>
<li>Traverse the left subtree, i.e., call Postorder(left-subtree)</li>
<li>Traverse the right subtree, i.e., call Postorder(right-subtree)</li>
<li>Visit the root</li>
</ul>
</li>
<li><p><strong>In-Order Traversal</strong> :<br>In in-order traversal, we do the following:</p>
<ul>
<li>Traverse the left subtree, i.e., call Inorder(left-subtree)</li>
<li>Visit the root</li>
<li>Traverse the right subtree, i.e., call Inorder(right-subtree)</li>
</ul>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> BST;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> key;</span><br><span class="line">    Node left, right;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(<span class="keyword">int</span> item)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        key = item;</span><br><span class="line">        left = right = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BinaryTree</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Root of Binary Tree</span></span><br><span class="line">    Node root;</span><br><span class="line">    </span><br><span class="line">    BinaryTree()</span><br><span class="line">    &#123;</span><br><span class="line">        root = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Given a binary tree, print its nodes according to the "bottem-up" postorder traversal.</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">printPostorder</span><span class="params">(Node node)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// first recur on left subtree</span></span><br><span class="line">        printPostorder(node.left);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// then recur on right subtree</span></span><br><span class="line">        printPostorder(node.right);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// now deal with the node</span></span><br><span class="line">        System.out.print(node.key + <span class="string">" "</span>);;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">printInorder</span><span class="params">(Node node)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// first recur on left child</span></span><br><span class="line">        printInorder(node);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// then print the data of node</span></span><br><span class="line">        System.out.print(node.key + <span class="string">" "</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// now recur on right child</span></span><br><span class="line">        printInorder(node.right);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">printPreorder</span><span class="params">(Node node)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// first print data of node</span></span><br><span class="line">        System.out.print(node.key + <span class="string">" "</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// then recur on left subtree</span></span><br><span class="line">        printPreorder(node.left);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// now recur on right subtree</span></span><br><span class="line">        printPreorder(node.right);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Wrappers over above recursive functions</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">printPostorder</span><span class="params">()</span> </span>&#123; printPostorder(root); &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">printInorder</span><span class="params">()</span> </span>&#123; printInorder(root); &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">printPreorder</span><span class="params">()</span> </span>&#123; printPreorder(root); &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Driver method</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        BinaryTree tree = <span class="keyword">new</span> BinaryTree();</span><br><span class="line">        tree.root = <span class="keyword">new</span> Node(<span class="number">1</span>);</span><br><span class="line">        tree.root.left = <span class="keyword">new</span> Node(<span class="number">2</span>);</span><br><span class="line">        tree.root.right = <span class="keyword">new</span> Node(<span class="number">3</span>);</span><br><span class="line">        tree.root.left.left = <span class="keyword">new</span> Node(<span class="number">4</span>);</span><br><span class="line">        tree.root.left.right = <span class="keyword">new</span> Node(<span class="number">5</span>);</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">"Preorder traversal of binary tree is : "</span>);      </span><br><span class="line">        tree.printPreorder();</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">"\nInorder traversal of binary tree is : "</span>);     </span><br><span class="line">        tree.printInorder();</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">"\nPostorder traversal of binary tree is : "</span>);       </span><br><span class="line">        tree.printPostorder();</span><br><span class="line">                </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Output </span><br><span class="line">Preorder traversal of binary tree is</span><br><span class="line">1 2 4 5 3 </span><br><span class="line">Inorder traversal of binary tree is</span><br><span class="line">4 2 5 1 3 </span><br><span class="line">Postorder traversal of binary tree is</span><br><span class="line">4 5 2 3 1</span><br></pre></td></tr></table></figure>
<p>The in-order traversal of a binary search tree gives a sorted ordering of the data elements that are present in the binary search tree. This is an important property of a binary search tree.</p>
<p>Since the root node is a private member, we also write public member functions which is available to non-members of the class. It calls the private recursive function to traverse the tree and also takes care of the case when root node is <strong>NULL</strong>.</p>
<p>Complexity Analysis</p>
<table>
<thead>
<tr>
<th align="center">ALGORITHM</th>
<th align="center">AVERAGE CASE</th>
<th align="center">WORST CASE</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Space</td>
<td align="center"><strong>O(n)</strong></td>
<td align="center"><strong>O(n)</strong></td>
</tr>
<tr>
<td align="center">Insert</td>
<td align="center"><strong>O(log n)</strong></td>
<td align="center"><strong>O(n)</strong></td>
</tr>
<tr>
<td align="center">Search</td>
<td align="center"><strong>O(log n)</strong></td>
<td align="center"><strong>O(n)</strong></td>
</tr>
<tr>
<td align="center">Traverse</td>
<td align="center"><strong>O(n)</strong></td>
<td align="center"><strong>O(n)</strong></td>
</tr>
</tbody></table>
<p>The time complexity of search and insert rely on the height of the tree. On average, binary search trees with n nodes have <strong>O(log n)</strong> height. However, in the worst case the tree can have a height of <strong>O(n)</strong> when the unbalanced tree resembles a linked list.<br>For example in this case:</p>
<p><img src="https://i.imgur.com/KCLWxfk.png" alt="Example"></p>
<p>Traversal requires <strong>O(n)</strong> time, since every node must be visited.</p>
]]></content>
      <categories>
        <category>Binary Tree</category>
        <category>Data Structure</category>
      </categories>
      <tags>
        <tag>Binary Tree</tag>
        <tag>Tree</tag>
        <tag>Data Structure</tag>
      </tags>
  </entry>
  <entry>
    <title>Binary Tree | Part 1 Introduction</title>
    <url>/category/Binary-Tree-Part-1-Introduction/</url>
    <content><![CDATA[<h3 id="Trees"><a href="#Trees" class="headerlink" title="Trees"></a>Trees</h3><p>Unlike Arrays, Linked List, Stack and Queues, which are linear data structures, trees are hierarchical data structures in which each node has at most two children generally referred as left child and right child.</p>
<a id="more"></a>

<h4 id="Each-node-contains-three-components"><a href="#Each-node-contains-three-components" class="headerlink" title="Each node contains three components:"></a>Each node contains three components:</h4><ul>
<li>Pointer to the left subtree</li>
<li>Pointer to the right subtree</li>
<li>Data element</li>
</ul>
<p>The topmost node in the tree is called the root. An empty tree is represented by NULL pointer.<br>A representation of binary tree is shown:</p>
<p><img src="https://i.imgur.com/YwhtrF8.png" alt="Tree"></p>
<h3 id="Binary-Tree-Common-Terminologies"><a href="#Binary-Tree-Common-Terminologies" class="headerlink" title="Binary Tree: Common Terminologies"></a>Binary Tree: Common Terminologies</h3><ul>
<li><strong>Root</strong>: Topmost node in a tree</li>
<li><strong>Parent</strong>: Every node(excluding a root) in a tree is connected by a directed edge from exactly one other node. This node is called a parent</li>
<li><strong>Child</strong>: A node directly connected to another node when moving away from the root.</li>
<li><strong>Leaf/External node</strong>: Node with no children</li>
<li><strong>Internal node</strong>: Node with atleast one children</li>
<li><strong>Depth of a node</strong>: Number of edges from root to the node</li>
<li><strong>Height of a node</strong>: Number of edges from the node to the deepest leaf. Height of the tree is the height of the root. </li>
</ul>
<p>In the below binary tree we see that root node is <strong>A</strong>. The tree has 10 nodes with 5 internal nodes, i.e, <strong>A, B, C, E, G</strong> and 5 external nodes, i.e, <strong>D, F, H, I, J</strong>. The height of the tree is 3. <strong>B</strong> is the parent of <strong>D</strong> and <strong>E</strong> while <strong>D</strong> and <strong>E</strong> are children of <strong>B</strong></p>
<p><img src="https://i.imgur.com/LCKbt9l.png" alt="Binary Tree"></p>
<h3 id="Advantages-of-Trees"><a href="#Advantages-of-Trees" class="headerlink" title="Advantages of Trees"></a>Advantages of Trees</h3><p>Trees are so useful and frequently used, because they have some very serious advantages:</p>
<ul>
<li>Trees reflect structural relationships in the data</li>
<li>Trees are used to represent hierarchies</li>
<li>Trees provide an efficient insertion and searching</li>
<li>Trees are very flexible data, allowing to move subtrees around with minimum effort</li>
</ul>
<h3 id="Types-of-Binary-Trees-Based-on-Structure"><a href="#Types-of-Binary-Trees-Based-on-Structure" class="headerlink" title="Types of Binary Trees(Based on Structure)"></a>Types of Binary Trees(Based on Structure)</h3><ul>
<li><strong>Rooted binary tree</strong>: It has a root node and every node has atmost two children.</li>
<li><strong>Full binary tree</strong>: It is a tree in which every node in the tree has either 0 or 2 children.<ul>
<li>The number of nodes, <em>n</em>, in a full binary tree is atleast <em>n = 2h - 1</em>, and atmost <em>n = 2^(h+1) − 1</em>, where <em>h</em> is the height of the tree</li>
<li>The number of leaf nodes <em>l</em>, in a full binary tree is number, L of internal nodes + 1, i.e, <em>l = L + 1</em></li>
</ul>
</li>
</ul>
<p><img src="https://i.imgur.com/Q6CSO5w.png" alt="Full Binary Tree"></p>
<ul>
<li><strong>Perfect binary tree</strong>: it is a binary tree in which all interior nodes have two children and all leaves have the same depth or same level.<ul>
<li>A perfect binary tree with <em>l</em> leaves has <em>n = 2l - 1</em> nodes</li>
<li>In perfect full binary tree, <em>l = 2h</em> and <em>n = 2h + 1 - 1</em>, where <em>n</em> is number of nodes, <em>h</em> is height of tree and <em>l</em> is number of leaf nodes. </li>
</ul>
</li>
</ul>
<p><img src="https://i.imgur.com/3jkMB9k.png" alt="Perfect Binary Tree"></p>
<ul>
<li><strong>Complete binary tree</strong>: It is a binary tree in which every level, except possibly the last, is completely filled, and all nodes are as far left as possible. <ul>
<li>The number of internal nodes in a complete binary tree of n nodes is floor(n/2)</li>
</ul>
</li>
</ul>
<p><img src="https://i.imgur.com/mLkz9t1.png" alt="Complete Binary Tree"></p>
<ul>
<li><strong>Balanced binary tree</strong>: A binary tree is height balanced if it satisfies the following constraints:<ul>
<li>The left and right subtrees’ heights differ by at most one, AND</li>
<li>The left subtree is balanced, AND<br>The right subtree is balanced</li>
</ul>
</li>
</ul>
<p><img src="https://i.imgur.com/sLbNCFJ.png" alt="Balanced Binary Tree"></p>
<ul>
<li>Degenerate tree: It is a tree is where each parent node has only one child node. It behaves like a linked list. </li>
</ul>
<p><img src="https://i.imgur.com/97qURYt.png" alt="Degenerate Tree"></p>
<h3 id="Traversals"><a href="#Traversals" class="headerlink" title="Traversals"></a>Traversals</h3><p>A traversal is a process that visits all the nodes in the tree. Since a tree is nonlinear data structure, there is no unique traversal. We will consider several traversal algorithms with we group in the following two kinds</p>
<ul>
<li><strong>Depth-First Traversal(DFT)</strong></li>
<li><strong>Breadth-First Traversal(BFT)</strong></li>
</ul>
<p>There are three different types of depth-first traversals:</p>
<ul>
<li><strong>PreOrder traversal</strong> - visit the parent first and then left and right children;</li>
<li><strong>InOrder traversal</strong> - visit the left child, then the parent and the right child;</li>
<li><strong>PostOrder traversal</strong> - visit left child, then the right child and then the parent;</li>
</ul>
<p>There is only one kind of breadth-first traversal - <strong>the level order traversal</strong>. This traversal visits nodes by levels from top to bottom and from left to right.</p>
<p>As an example consider the following tree and its four traversal:</p>
<p><img src="https://i.imgur.com/5A0q3Z1.png" alt="Example"></p>
<p><strong>PreOrder</strong> - 8, 5, 9, 7, 1, 12, 2, 4, 11, 3<br><strong>InOrder</strong> - 9, 5, 1, 7, 2, 12, 8, 4, 3, 11<br><strong>PostOrder</strong> - 9, 1, 2, 12, 7, 5, 3, 11, 4, 8<br><strong>LevelOrder</strong> - 8, 5, 4, 9, 7, 11, 1, 12, 3, 2</p>
]]></content>
      <categories>
        <category>Binary Tree</category>
        <category>Data Structure</category>
      </categories>
      <tags>
        <tag>Binary Tree</tag>
        <tag>Tree</tag>
        <tag>Data Structure</tag>
      </tags>
  </entry>
  <entry>
    <title>AWS Service | RDS(Relational Database Service) 101</title>
    <url>/category/AWS-Service-RDS-Relational-Database-Service-101/</url>
    <content><![CDATA[<h3 id="1-What-is-a-relational-Database"><a href="#1-What-is-a-relational-Database" class="headerlink" title="1. What is a relational Database?"></a>1. What is a relational Database?</h3><p>Relational Databases are what most of us are all used to. They have been around since the 70s. Think of a traditional spreadsheet:</p>
<ul>
<li>Database</li>
<li>Tables</li>
<li>Row</li>
<li>Fields(Columns)</li>
</ul>
<a id="more"></a>

<h3 id="2-Relational-Database-Types"><a href="#2-Relational-Database-Types" class="headerlink" title="2. Relational Database Types"></a>2. Relational Database Types</h3><ul>
<li>SQL Server</li>
<li>Oracle</li>
<li>MySQL Server</li>
<li>PostgreSQL</li>
<li>Aurora</li>
<li>MariaDB</li>
</ul>
<h3 id="3-Non-Relational-Database"><a href="#3-Non-Relational-Database" class="headerlink" title="3. Non Relational Database"></a>3. Non Relational Database</h3><ul>
<li>Database<ul>
<li>Collection (= Table)</li>
<li>Document (= Row)</li>
<li>Key Value Pairs (= Fields)</li>
</ul>
</li>
<li>No pre-define table structure</li>
</ul>
<h3 id="4-What-is-Data-Warehousing"><a href="#4-What-is-Data-Warehousing" class="headerlink" title="4. What is Data Warehousing?"></a>4. What is Data Warehousing?</h3><p>A <strong>Data Warehousing (DW)</strong> is process for collecting and managing data from varied sources to provide meaningful business insights. A Data Warehouse is typically used to connect and analyse business data from heterogeneous sources. </p>
<h3 id="5-OLTP-vs-OLAP"><a href="#5-OLTP-vs-OLAP" class="headerlink" title="5. OLTP vs OLAP"></a>5. OLTP vs OLAP</h3><p><strong>Online Transaction Processing (OLTP)</strong> differs from OLAP <strong>Online Analytics Processing (OLAP)</strong> in terms of the types of queries you will run. OLTP is an online data modification system while OLAP is an online historical multidimensional data retrieval system, which retrieves the data for analysis that can help in decision making. Which one to use depend upon the users requirement for both works for different purpose. </p>
<h4 id="Definition-of-OLTP"><a href="#Definition-of-OLTP" class="headerlink" title="Definition of OLTP"></a>Definition of OLTP</h4><p>OLTP is an <strong>Online Transaction Processing System</strong>. The main focus of OLTP system is to record the current <strong>Update</strong>, <strong>Insertion</strong> and <strong>Deletion</strong> while transaction. The OLTP queries are <strong>simpler</strong> and <strong>short</strong> and hence require <strong>less time in processing</strong>, and also requires <strong>less space</strong>. </p>
<p>OLTP database gets <strong>updated frequently</strong>. It may happen that a transaction in OLTP fails in middle, which may effect data integrity. So, it has to take special care of <strong>data integrity</strong>. OLTP database has <strong>normalized tables (3NF)</strong>.</p>
<p>The best example for OLTP system is an <strong>ATM</strong>, in which using short transactions we modify the status of our account. OLTP system becomes the source of data for OLAP. </p>
<h4 id="Definition-of-OLAP"><a href="#Definition-of-OLAP" class="headerlink" title="Definition of OLAP"></a>Definition of OLAP</h4><p>OLAP is an <strong>Online Analytical Processing system</strong>. OLAP database stores historical data that has been inputted by OLTP. It allows a user to view different summaries of multi-dimensional data. Using OLAP, you can extract information from a large database and analyse it for decision making. </p>
<p>OLAP also allow a user to execute <strong>complex queries</strong> to extract multidimensional data. In OLTP system to retrieve data from a large database to analyse. Simply the user can fire the query again and extract the data for analysis. </p>
<p>The transaction in OLAP are <strong>long</strong> and hence take comparatively <strong>more time</strong> for processing and requires large space. The transactions in OLAP are <strong>less frequent</strong> as compared to OLTP. Even the tables in OLAP database may not be normalized. The example for OLAP is to view a financial report, or budgeting, marketing management, sales report, etc. </p>
<table>
<thead>
<tr>
<th align="center">Comparison</th>
<th align="center">OLTP</th>
<th align="center">OLAP</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Basic</td>
<td align="center">It is an online transactional system and manages database modification</td>
<td align="center">It is and online data retrieving and data analysis system.</td>
</tr>
<tr>
<td align="center">Focus</td>
<td align="center">Insert, Update, Delete information from the database</td>
<td align="center">Extract data for analysing that helps in decision making</td>
</tr>
<tr>
<td align="center">Data</td>
<td align="center">OLTP and its transactions are the original source of data</td>
<td align="center">Different OLTPs database becomes the source of data for OLAP</td>
</tr>
<tr>
<td align="center">Transaction</td>
<td align="center">OLTP has short transactions</td>
<td align="center">OLAP has long transactions</td>
</tr>
<tr>
<td align="center">Time</td>
<td align="center">The processing time of a transaction is comparatively less in OLTP</td>
<td align="center">The processing time of a transaction is comparatively more in OLAP</td>
</tr>
<tr>
<td align="center">Queries</td>
<td align="center">Simpler queries</td>
<td align="center">Complex queries</td>
</tr>
<tr>
<td align="center">Normalization</td>
<td align="center">Tables in OLTP database are normalized(3NF)</td>
<td align="center">Tables in OLAP database are not normalized</td>
</tr>
<tr>
<td align="center">Integrity</td>
<td align="center">OLTP database must maintain data integrity constraint</td>
<td align="center">OLAP database does not get frequently modified. Hence, data integrity is not affected.</td>
</tr>
</tbody></table>
<h3 id="6-What-is-Elasticache"><a href="#6-What-is-Elasticache" class="headerlink" title="6. What is Elasticache?"></a>6. What is Elasticache?</h3><p>ElasticCache is a web service that makes it easy to deploy, operate, and scale an in-memory cache in the cloud. The service improves the performance of web applications by allowing you to retrieve information from fast, managed, in-memory caches, instead of replying entirely on slower disk-based databases.</p>
<p>ElasticCache supports two open-source in-memory caching engines:</p>
<ul>
<li>Memcached</li>
<li>Redis</li>
</ul>
<h3 id="7-Summary"><a href="#7-Summary" class="headerlink" title="7. Summary"></a>7. Summary</h3><ul>
<li>RDS - OLTP<ul>
<li>SQL</li>
<li>MySQL</li>
<li>PostgreSQL</li>
<li>Oracle</li>
<li>Aurora</li>
<li>MariaDB</li>
</ul>
</li>
<li>DynamoDB - No SQL</li>
<li>RedShift - OLAP</li>
<li>Elasticache - In Memory Caching:</li>
<li>Memcached</li>
<li>Redis</li>
</ul>
]]></content>
      <categories>
        <category>AWS Services</category>
        <category>Relational Database Service</category>
        <category>AWS Certified Developer - Associate</category>
      </categories>
      <tags>
        <tag>AWS Services</tag>
        <tag>AWS Certified Developer - Associate</tag>
        <tag>Relational Database Service</tag>
        <tag>RDS</tag>
      </tags>
  </entry>
  <entry>
    <title>AWS Service | Elastic Load Balancer</title>
    <url>/category/AWS-Service-Elastic-Load-Balancer/</url>
    <content><![CDATA[<h3 id="1-What-is-Elastic-Load-Balancer"><a href="#1-What-is-Elastic-Load-Balancer" class="headerlink" title="1. What is Elastic Load Balancer"></a>1. What is Elastic Load Balancer</h3><p>Elastic Load Balancing automatically distributes incoming application traffic across multiple targets, such as Amazon EC2 instances, containers, IP address, and Lambda functions. It can handle the varying load of your application traffic in a single Availability Zone or across multiple Availability Zone. Elastic Load Balancing offers three types of load balancers that all feature the high availability, automatic scaling, and robust security necessary to make your applications fault tolerant. </p>
<a id="more"></a>

<hr>
<h3 id="2-Types-Of-Load-Balancers"><a href="#2-Types-Of-Load-Balancers" class="headerlink" title="2. Types Of Load Balancers"></a>2. Types Of Load Balancers</h3><ol>
<li>Application Load Balancer</li>
<li>Network Load Balancer</li>
<li>Classic Load Balancer</li>
</ol>
<h4 id="1-1-Application-Load-Balancer-ALB"><a href="#1-1-Application-Load-Balancer-ALB" class="headerlink" title="1.1. Application Load Balancer(ALB)"></a>1.1. Application Load Balancer(ALB)</h4><ul>
<li>Application Load Balancer is specially designed for load balancing of <strong>HTTP</strong> and <strong>HTTPS</strong> traffic.</li>
<li>They operate at Layer 7 and are application-aware.</li>
<li>They are intelligent, and you can create advanced request routing, sending specified requests to specific web servers. </li>
<li>It also provides advanced routing features such as host-based and path-based routing and also works with containers and microservices.</li>
</ul>
<h5 id="Understanding-the-Application-Load-Balancer"><a href="#Understanding-the-Application-Load-Balancer" class="headerlink" title="Understanding the Application Load Balancer"></a>Understanding the Application Load Balancer</h5><p>AWS Application Load Balancer(ALB) operates at <strong>Layer 7</strong> of the OSI Model. At Layer 7, the ELB has the ability to inspect application-level content, not just IP and port. This lets it route based on more complex rules than with the Classic Load Balancer.<br>For example, an ELB at a given IP will receive a request from the client on port <strong>443(HTTPS)</strong>. The Application Load Balancer will process the request, not only by receiving port, but also by looking at the destination URL. </p>
<ul>
<li>Application Load Balancer will be aware of each of these URLs based on patterns set up when configuring the load balancer, and can route to different clusters of servers depending on application need. Rules can also be added at a later time as you add new functionality to your stack. </li>
<li>The Application Load Balancer also integrates with EC2 Container Service(ECS) using Service Load Balancing. This allows for dynamic mapping of services to ports as specified in the ECS task definition. Multiple containers can be targeted on the same EC2 instance, each running different services on different ports. The ECS task scheduler will automatically add these tasks to the ALB. </li>
</ul>
<h5 id="Key-ALB-Concepts"><a href="#Key-ALB-Concepts" class="headerlink" title="Key ALB Concepts"></a>Key ALB Concepts</h5><p>There are some key concepts that you will need to know when configuring your ALB. The first is <strong>rules</strong>. Each rule specifies a <strong>condition</strong>, <strong>target group</strong>, and a <strong>priority</strong>.</p>
<ul>
<li><strong>Rules</strong> determine what action is taken when a rule matches a client request. Up to 10 URL-based rules can be defined in the ALB.<ul>
<li>The <strong>condition</strong> is the path pattern you want the ALB to evaluate in order for it to route requests. </li>
</ul>
</li>
<li>The <strong>target group</strong> is used to route requests to <strong>registered targets</strong> as part of an action for a rule. Target groups specify a protocol and target port. Health checks can be configured per target group. An ALB can route to multiple target groups.<ul>
<li><strong>Targets</strong> specify the endpoints and are registered with the ALB as part of a target group.</li>
</ul>
</li>
<li>Priority tells the ALB in which order to evaluate the rules. Rules are numerically evaluated in order from lowest to highest value. When a rule matches a request, traffic will be routes to the specified target group.</li>
</ul>
<hr>
<h4 id="1-2-Network-Load-Balancer"><a href="#1-2-Network-Load-Balancer" class="headerlink" title="1.2. Network Load Balancer"></a>1.2. Network Load Balancer</h4><ul>
<li>Network Load Balancers are best suited for load balancing of <strong>TCP traffic</strong> where extreme performance is required.</li>
<li>Operating at the connection <strong>level(Layer 4)</strong></li>
<li>Network Load Balancer are capable of handling millions of requests per second, while maintaining <strong>ultra-low latencies</strong>. </li>
<li>Use for <strong>extreme performance</strong>. The most costly load balancer of the three load balancers. </li>
</ul>
<h5 id="Understanding-the-Classic-Load-Balancer"><a href="#Understanding-the-Classic-Load-Balancer" class="headerlink" title="Understanding the Classic Load Balancer"></a>Understanding the Classic Load Balancer</h5><p>This load balancer operates at the <strong>Network layer</strong> of the OSI model.<br>Suppose your company’s website is running on four m4-xlarge instances and you’re using an ALB to distribute the traffic among them.<br>Now your company launched a new product today which got viral and your website starts to get millions of requests per second.<br>In this case, the ALB may not be able to handle the sudden spike in traffic.<br>This is where the NLB really shines. It has the capability to handle a sudden spike in traffic since it works at the connection level. It also provides support for <strong>static IPs</strong>.</p>
<hr>
<h4 id="1-3-Classic-Load-Balancer"><a href="#1-3-Classic-Load-Balancer" class="headerlink" title="1.3. Classic Load Balancer"></a>1.3. Classic Load Balancer</h4><ul>
<li>Classic Load Balancers are the <em>legacy</em> Elastic Load Balancers.</li>
<li>You can load balance <strong>HTTP/HTTPS</strong> applications and use <strong>Layer 7-specific</strong> features, such as <strong>X-Forwarded</strong> and <strong>sticky sessions</strong>.</li>
<li>You can also use strict Layer 4 load balancing for applications that rely purely on the TCP protocol. </li>
<li>If your application stops responding, the ELB(Classic Load Balancer) responds with a <strong>504 error</strong>. This  means that the application is having issues. This could be either at the <strong>Web Server Layer</strong> or at the <strong>Database Layer</strong>. Identify where the application is failing, and scale it up or out where possible. </li>
</ul>
<h5 id="Understanding-the-Classic-Load-Balancer-1"><a href="#Understanding-the-Classic-Load-Balancer-1" class="headerlink" title="Understanding the Classic Load Balancer"></a>Understanding the Classic Load Balancer</h5><p>The Classic EBL has a number of features available to help provide <em>high availability, monitoring, and better security</em> for your application stack.<br>The AWS Classic Load Balancer(CLB) operates at <strong>Layer 4</strong> of the OSI model. What this means is that the load balancer routes traffic between clients and backend servers based on IP address and TCP port.<br>For example, an ELB at a given IP address receives a request from a client on <strong>TCP port 80(HTTP)</strong>. It will then route that request based on the rules previously configured when setting up the load balancer to a specified port on one of a pool of backend servers. In this example, the port on which the load balancer routes to the target server will often be <strong>port 80(HTTP) or 443(HTTPS)</strong>.</p>
<p>The backend destination server will then fulfil the client request, and send the requested data back to the ELB, which will then forward the backend server reply to the client. From the client’s perspective, this request will appear to have been entirely fulfilled by the ELB. The client will have no knowledge of the backend server or servers fulfilling client requests.</p>
<h5 id="X-Forwarded-For-Header"><a href="#X-Forwarded-For-Header" class="headerlink" title="X-Forwarded-For Header"></a>X-Forwarded-For Header</h5><p><strong>Request</strong>(124.12.3.231) —&gt; <strong>Load Balancer</strong>(10.0.0.23) —&gt; <strong>EC2 Instance</strong>(10.0.0.23)(X-Forwarded-For: 124.12.3.231)</p>
<p>The request comes from a public IP address(124.12.3.231) then it hits the load balance. The load balance take the request and use private IP address(10.0.0.23) to send to EC2 instance. Now EC2 instance will only see the private IP address(10.0.0.23). Now you probably want to know where in the world it comes from. So how to get the public IP address when the Elastic Load Balancer sending a private address? The answer will be <strong>X-Forwarded-For</strong>.</p>
<hr>
<h3 id="3-ELB-Exam-Tips"><a href="#3-ELB-Exam-Tips" class="headerlink" title="3. ELB Exam Tips"></a>3. ELB Exam Tips</h3><ul>
<li>3 Types of Load Balancers:<ul>
<li>Application Load Balancers</li>
<li>Network Load Balancers</li>
<li>Classic Load Balancers</li>
</ul>
</li>
<li>504 Error means the gateway has timed out. This means that the application not responding within the idle timeout period.<ul>
<li>Trouble shoot the application. Is it from the Web Server or Database Server?</li>
</ul>
</li>
<li>If you need the <strong>IPv4 address</strong> of your end user, look for the <strong>X-Forwarded-For</strong> header. </li>
</ul>
]]></content>
      <categories>
        <category>AWS Services</category>
        <category>Elastic Load Balancer</category>
        <category>AWS Certified Developer - Associate</category>
      </categories>
      <tags>
        <tag>AWS Services</tag>
        <tag>AWS Certified Developer - Associate</tag>
        <tag>Elastic Load Balancer</tag>
        <tag>ELB</tag>
      </tags>
  </entry>
  <entry>
    <title>AWS Service | EC2 101</title>
    <url>/category/AWS-Service-EC2-101/</url>
    <content><![CDATA[<h3 id="1-What-is-EC2-Virtual-Server"><a href="#1-What-is-EC2-Virtual-Server" class="headerlink" title="1. What is EC2(Virtual Server)?"></a>1. What is EC2(Virtual Server)?</h3><ul>
<li>Amazon Elastic Compute Cloud(Amazon EC2) is a web service that provides resizable compute capacity in the cloud. Amazon EC2 reduces the time required to obtain and boot new server instances to minutes, allowing you to quickly scale capacity, both up and down, as your computing requirements change. <a id="more"></a><ul>
<li>(It’s just virtual machines in the cloud and it reduces the time required to obtain and boot new server)</li>
</ul>
</li>
<li>Amazon EC2 changes the economics of computing by allowing you to pay only for capacity that you actually use. Amazon EC2 provides developers the tools to build failure resilient applications and isolate themselves from common failure scenarios. </li>
</ul>
<hr>
<h3 id="2-EC2-Options"><a href="#2-EC2-Options" class="headerlink" title="2. EC2 Options"></a>2. EC2 Options</h3><ul>
<li><strong>On Demand</strong> <ul>
<li>allows you to pay a fixed rate by the hour (or by the second) with no commitment.</li>
</ul>
</li>
<li><strong>Reserved</strong> <ul>
<li>provides you with a capacity reservation, and offer a significant discount on the hourly charge for an instance. 1 Year or 3 Year Terms.</li>
</ul>
</li>
<li><strong>Spot</strong> <ul>
<li>enables you to bid whatever price you want for instance capacity, providing for even greater savings if your applications have flexible start and end times.</li>
</ul>
</li>
<li><strong>Dedicated Hosts</strong> <ul>
<li>Physical EC2 server dedicated for your use. Dedicated Hosts can help you reduce costs by allowing you to use your existing server-bound software licenses. </li>
</ul>
</li>
</ul>
<h4 id="2-1-On-Demand"><a href="#2-1-On-Demand" class="headerlink" title="2.1. On Demand"></a>2.1. On Demand</h4><ul>
<li>Perfect for users that want the low cost and flexibility of Amazon EC2 without any up-front payment or long-term commitment.</li>
<li>Applications with short term, spiky, or unpredictable workloads that cannot be interrupted.</li>
<li>Applications being developed or tested on Amazon EC2 for the first time. </li>
</ul>
<h4 id="2-2-Reserved-Instances"><a href="#2-2-Reserved-Instances" class="headerlink" title="2.2. Reserved Instances"></a>2.2. Reserved Instances</h4><ul>
<li>Applications with steady state or predictable usage</li>
<li>Applications that require reserved capacity</li>
<li>Users can make up-front payments to reduce their total computing costs even further<ul>
<li>Standard RIs(Reserved Instances)(Up to 75% off on-demand)</li>
<li>Convertible RIs(Up to 54% off on-demand) feature the capability to change the attributes of the RI as long as the exchange results in the creation of Reserved Instances of equal or greater value.</li>
<li>Scheduled RIs are available to launch within the time window you reserve. This option allows you to match your capacity reservation to a predictable recurring schedule that only requires a fraction(一小部分) of a day, a week, or a month. </li>
</ul>
</li>
</ul>
<h4 id="2-3-Spot-Instances"><a href="#2-3-Spot-Instances" class="headerlink" title="2.3. Spot Instances"></a>2.3. Spot Instances</h4><ul>
<li>Applications that have flexible start and end times</li>
<li>Applications that are only feasible at very low compute prices<ul>
<li>Some chemical companies or big pharmaceutical companies use this spot instances to do huge amounts of computing at like 4 am on Sunday morning and this can save a lot of money compared to using the same compute capacity from like 9-5 during the week. </li>
</ul>
</li>
<li>Users with an urgent need for large amounts of additional computing capacity</li>
</ul>
<h4 id="2-4-Dedicated-Hosts"><a href="#2-4-Dedicated-Hosts" class="headerlink" title="2.4. Dedicated Hosts"></a>2.4. Dedicated Hosts</h4><ul>
<li>Useful for regulatory requirements that may not support multi-tenant virtualization.</li>
<li>Great for licensing which does not support multi-tenancy or cloud deployments</li>
<li>Can be purchased On-Demand(hourly)</li>
<li>Can be purchased as a Reservation for up to 70% off the On-Demand price. </li>
</ul>
<hr>
<h3 id="3-EC2-Instance-Type"><a href="#3-EC2-Instance-Type" class="headerlink" title="3. EC2 Instance Type"></a>3. EC2 Instance Type</h3><table>
<thead>
<tr>
<th align="center"></th>
<th align="center">Family</th>
<th align="center">Speciality</th>
<th align="center">Use Case</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td align="center"><strong>F1</strong></td>
<td align="center"><strong>Field Programmable Gate Array</strong></td>
<td align="center">Genomics Research, Financial Analytics, Real-time video processing, Big Data, etc</td>
</tr>
<tr>
<td align="center">2</td>
<td align="center"><strong>I3</strong></td>
<td align="center"><strong>High Speed Storage</strong></td>
<td align="center">NoSQL DBs, Data Warehousing, etc</td>
</tr>
<tr>
<td align="center">3</td>
<td align="center"><strong>G3</strong></td>
<td align="center"><strong>Graphics Intensive</strong></td>
<td align="center">Video Encoding/3D Application Streaming</td>
</tr>
<tr>
<td align="center">4</td>
<td align="center"><strong>H1</strong></td>
<td align="center"><strong>High Disk Throughput</strong></td>
<td align="center">MapReduce-based workloads, Distributed file system such as HDFS and MapR-FS</td>
</tr>
<tr>
<td align="center">5</td>
<td align="center"><strong>T2</strong></td>
<td align="center"><strong>Lowest Cost, General Purpose</strong></td>
<td align="center">Web Servers/Small DBs</td>
</tr>
<tr>
<td align="center">6</td>
<td align="center"><strong>D2</strong></td>
<td align="center"><strong>Dense Storage</strong></td>
<td align="center">Fileservers/Data Warehousing/Hadoop</td>
</tr>
<tr>
<td align="center">7</td>
<td align="center"><strong>R4</strong></td>
<td align="center"><strong>Memory Optimized</strong></td>
<td align="center">Memory Intensive Apps/DBs</td>
</tr>
<tr>
<td align="center">8</td>
<td align="center"><strong>M5</strong></td>
<td align="center"><strong>General Purpose</strong></td>
<td align="center">Application Servers</td>
</tr>
<tr>
<td align="center">9</td>
<td align="center"><strong>C5</strong></td>
<td align="center"><strong>Compute Optimized</strong></td>
<td align="center">CPU Intensive Apps/DBs</td>
</tr>
<tr>
<td align="center">10</td>
<td align="center"><strong>P3</strong></td>
<td align="center"><strong>Graphics/General Purpose GPU</strong></td>
<td align="center">Machine Learning, Bit Coin Mining, etc</td>
</tr>
<tr>
<td align="center">11</td>
<td align="center"><strong>X1</strong></td>
<td align="center"><strong>Memory Optimized</strong></td>
<td align="center">SAP HANA/Apache Spark, etc</td>
</tr>
</tbody></table>
<h4 id="How-to-remember"><a href="#How-to-remember" class="headerlink" title="How to remember:"></a>How to remember:</h4><p><strong>F</strong> - <strong>FPGA</strong> (Field Programmable Gate Array)<br><strong>I</strong> - <strong>IOPS</strong> (High Speed Storage)<br><strong>G</strong> - <strong>Graphics</strong> (Graphics Intensive)<br><strong>H</strong> - <strong>High Disk Throughput</strong><br><strong>T</strong> - <strong>Cheap general purpose</strong> (Lowest Cost, General Purpose)<br><strong>D</strong> for <strong>Density</strong> (Dense Storage)<br><strong>R</strong> for <strong>RAM</strong> (Memory Optimized)<br><strong>M</strong> - main choice for <strong>general purpose</strong> apps (General Purpose)<br><strong>C</strong> for <strong>Compute</strong> (Compute Optimized)<br><strong>P</strong> - <strong>Graphics/General Purpose GPU</strong> (Pics)<br><strong>X</strong> - <strong>Extreme Memory</strong> (Memory Optimized)</p>
<hr>
<h3 id="4-What-is-EBS-Virtual-Disk"><a href="#4-What-is-EBS-Virtual-Disk" class="headerlink" title="4. What is EBS(Virtual Disk)?"></a>4. What is EBS(Virtual Disk)?</h3><p><strong>Amazon EBS(Elastic Block Storage)</strong> allows you to create storage volumes and attach them to Amazon EC2 instances. Once attached, you can create a file system on top of these volumes, run a database, or use them in any other way you would use a block device. Amazon EBS volumes are placed in a specific Availability Zone, where they are automatically replicated to protect you from the failure of a single component. </p>
<hr>
<h3 id="5-EBS-Volume-Types"><a href="#5-EBS-Volume-Types" class="headerlink" title="5. EBS Volume Types"></a>5. EBS Volume Types</h3><ul>
<li><strong>General Purpose SSD(GP2)</strong><ul>
<li>General purpose, balances both price and performance.</li>
<li>Ratio of 3 IOPS(Input/Output Operation Per Seconds) and the ability to burst up to 3000 IOPS for extended periods of time for volumes at 334 GB and above.</li>
</ul>
</li>
<li><strong>Provisioned IOPS SSD(IO1)</strong><ul>
<li>Designed for I/O intensive applications such as large relational or NoSQL databases</li>
<li>Use if you need more than 10, 000 IOPS</li>
<li>Can provision up to 20, 000 IOPS per volume</li>
</ul>
</li>
<li><strong>Throughput Optimized HHD(ST1)</strong><ul>
<li>Big  data</li>
<li>Data Warehouses</li>
<li>Log processing</li>
<li>Cannot be a boot volume have to be additional volume</li>
</ul>
</li>
<li><strong>Cold HDD(SC1)</strong><ul>
<li>Lowest Cost Storage for infrequently accessed workloads</li>
<li>File Server</li>
<li>Cannot be a boot volume</li>
</ul>
</li>
<li><strong>Magnetic(Standard)</strong><ul>
<li>Lowest cost per gigabyte of all EBS volume types that is bootable. Magnetic volumes are ideal for workloads where data is accessed infrequently, and applications where the lowest storage cost is important. </li>
</ul>
</li>
</ul>
<hr>
<h3 id="EC2-Exam-Tips"><a href="#EC2-Exam-Tips" class="headerlink" title="EC2 Exam Tips"></a>EC2 Exam Tips</h3><h4 id="1-EC2-Options"><a href="#1-EC2-Options" class="headerlink" title="1. EC2 Options"></a>1. EC2 Options</h4><ul>
<li>On Demand - allows you to pay a fixed rate by the hour (or by the second) with no commitment</li>
<li>Reserved - provides you with a capacity reservation, and offer a significant discount on the hourly charge for an instance. 1 Year or 3 Year Terms</li>
<li>Spot - enables you to bid whatever price you want for instance capacity, providing for even greater savings if your applications have flexible start and end times. </li>
<li>Dedicated Hosts - Physical EC2 server dedicated for your use. Dedicated Hosts can help you reduce costs by allowing you to use your existing server-bound software licenses. </li>
</ul>
<h4 id="2-If-a-Sport-instance-is-terminated-by-Amazon-EC2-you-will-not-be-charged-for-a-partial-hour-of-usage-However-if-you-terminate-the-instance-yourself-you-will-be-charged-for-the-complete-hour-in-which-the-instance-ran"><a href="#2-If-a-Sport-instance-is-terminated-by-Amazon-EC2-you-will-not-be-charged-for-a-partial-hour-of-usage-However-if-you-terminate-the-instance-yourself-you-will-be-charged-for-the-complete-hour-in-which-the-instance-ran" class="headerlink" title="2. If a Sport instance is terminated by Amazon EC2, you will not be charged for a partial hour of usage. However, if you terminate the instance yourself, you will be charged for the complete hour in which the instance ran."></a>2. If a Sport instance is terminated by Amazon EC2, you will not be charged for a partial hour of usage. However, if you terminate the instance yourself, you will be charged for the complete hour in which the instance ran.</h4><h4 id="3-SSD"><a href="#3-SSD" class="headerlink" title="3. SSD"></a>3. SSD</h4><p>a. <em>General Purpose SSD</em> - balances price and performance for a wide variety of workloads<br>b. <em>Provisioned IOPS SSD</em> - Highest - performance SSD volume for mission-critical low-latency or high-throughput workloads</p>
<h4 id="4-Magnetic"><a href="#4-Magnetic" class="headerlink" title="4. Magnetic"></a>4. Magnetic</h4><p>a. <em>Throughput Optimized HDD</em> - Low cost HDD volume designed for frequently accessed, throughput-intensive workloads<br>b. <em>Cold HDD</em> - Lowest cost HDD volume designed for less frequently accessed workloads<br>c. <em>Magnetic</em> - Previous Generation. Can be a boot volume. </p>
]]></content>
      <categories>
        <category>AWS Services</category>
        <category>EC2</category>
        <category>AWS Certified Developer - Associate</category>
      </categories>
      <tags>
        <tag>AWS Services</tag>
        <tag>EC2</tag>
        <tag>AWS Certified Developer - Associate</tag>
      </tags>
  </entry>
  <entry>
    <title>Dynamic Programming | Part 1 Overlapping Subproblems Property in DP</title>
    <url>/category/Dynamic-Programming-Part-1-Overlapping-Subproblems-Property-in-DP/</url>
    <content><![CDATA[<h3 id="Introduction-Dynamic-Programming"><a href="#Introduction-Dynamic-Programming" class="headerlink" title="Introduction - Dynamic Programming"></a>Introduction - Dynamic Programming</h3><p><em>Dynamic Programming</em> is an algorithmic paradigm that solves a given complex problem by breaking it into subproblems and stores the results of subproblems to avoid computing the same results again. Following are the two main properties of a problem that suggests that the given problem can be solved using Dynamic Programming.</p>
<a id="more"></a>

<ul>
<li>Overlapping Subproblems(This part)</li>
<li>Optimal Substructure(Next part)</li>
</ul>
<h3 id="Overlapping-Subproblems"><a href="#Overlapping-Subproblems" class="headerlink" title="Overlapping Subproblems"></a>Overlapping Subproblems</h3><p>Like Divide and Conquer, Dynamic Programming combines solutions to sub-problems. DP is mainly used when solutions of same subproblems are needed again and again. In DP, computed solutions to subproblems are stored in a table so that these don’t have to be recomputed. So DP is not useful when there are no common(overlapping) subproblems because there is no point storing the solutions if they are not needed again. For example, Binary Search doesn’t have common subproblems. If we take an example of following recursive program for Fibonacci Numbers, there are many subproblems which are solved again and again. </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* simple recursive program for Fibonacci numbers */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fib</span><span class="params">(<span class="keyword">int</span> n)</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">   <span class="keyword">if</span> ( n &lt;= <span class="number">1</span> ) </span><br><span class="line">      <span class="keyword">return</span> n; </span><br><span class="line">   <span class="keyword">return</span> fib(n-<span class="number">1</span>) + fib(n-<span class="number">2</span>); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Recursion-tree-for-execution-of-fib-5"><a href="#Recursion-tree-for-execution-of-fib-5" class="headerlink" title="Recursion tree for execution of fib(5)"></a>Recursion tree for execution of fib(5)</h4><p><img src="https://i.imgur.com/hOFtfJ4.png" alt="Recursion tree for execution of fib(5)"></p>
<p>We can see that the function fib(3) is being called 2 times. If we would have stored the value of fib(3), then instead of computing it again, we could have reused the old stored value. There are following two different ways to store the values so that these values can be reused: </p>
<h5 id="a-Memoization-Top-Down"><a href="#a-Memoization-Top-Down" class="headerlink" title="a) Memoization (Top Down)"></a>a) Memoization (Top Down)</h5><p>The memoized program for a problem is similar to the recursive version with a small modification that it look into a lookup table before computing solutions. We initialize a lookup array with all initial values as NIL. Whenever we need the solution to a subproblem, we first look into the lookup table. If the precomputed value is there then we return that value, otherwise, we calculate the value and put the result in the lookup table so that it can be reused later. </p>
<h6 id="The-Algorithm"><a href="#The-Algorithm" class="headerlink" title="The Algorithm:"></a>The Algorithm:</h6><ul>
<li>Initialize a lookup array/table with all its elements as NIL<ul>
<li>NIL is simply a constant value, e.g. -1, that signifies absence of a solution</li>
</ul>
</li>
<li>Call the recursive function f(n) to solve for ‘n’ using memoization<ul>
<li>At every step i, f(i) performs the following steps:</li>
<li>Checks whether table[i] is NIL or not</li>
<li>If it’s not NIL, f(i)returns the value ‘table[i]’</li>
<li>If it’s NIL; and ‘i’ satisfies the base condition, we update the lookup table with the base value and return the same. </li>
<li>If it’s NIL and ‘i’ does not satisfy the base condition, then f(i) splits the problem ‘i’ into subproblems and recursively calls itself to solve them.</li>
<li>After the recursive calls return, f(i) combines the solutions to subproblems, updates the lookup table and returns the solution for problem ‘i’</li>
</ul>
</li>
</ul>
<h6 id="Memoized-example-for-nth-Fibonacci-Number"><a href="#Memoized-example-for-nth-Fibonacci-Number" class="headerlink" title="Memoized example for nth Fibonacci Number:"></a>Memoized example for nth Fibonacci Number:</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Fibonacci</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> MAX = <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> NIL = -<span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> lookup[] = <span class="keyword">new</span> <span class="keyword">int</span>[MAX];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*Function to initialize NIL values in lookup table*/</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">_initialize</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; MAX; i++)</span><br><span class="line">            lookup[i] = NIL;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*Function for nth Fibonacci number*/</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">fib</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (lookup[n] == NIL)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (n &lt;= <span class="number">1</span>)</span><br><span class="line">                lookup[n] = n;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                lookup[n] = fib(n-<span class="number">1</span>) + fib(n-<span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> lookup[n];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Fibonacci f = <span class="keyword">new</span> Fibonacci();</span><br><span class="line">        <span class="keyword">int</span> n = <span class="number">40</span>;</span><br><span class="line">        f._initialize();</span><br><span class="line">        System.out.println(<span class="string">"Fibonacci number is : "</span> + f.fib(n));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Output:<br>Fibonacci number is : 102334155</p>
</blockquote>
<h5 id="b-Tabulation-Bottom-Up"><a href="#b-Tabulation-Bottom-Up" class="headerlink" title="b) Tabulation (Bottom Up)"></a>b) Tabulation (Bottom Up)</h5><p>The tabulated program for a given problem build a table in bottom up fashion and returns the last entry from table. For example, for the same Fibonacci number, we first calculate fib(0) then fib(1) then fib(2) then fib(3) and so on. So literally, we are building the solutions of subproblems bottom-up. </p>
<h6 id="The-algorithm"><a href="#The-algorithm" class="headerlink" title="The algorithm:"></a>The algorithm:</h6><ul>
<li>Build the lookup table in bottom up fashion</li>
<li>After the table is built, simply return table[n]</li>
</ul>
<h6 id="Steps"><a href="#Steps" class="headerlink" title="Steps:"></a>Steps:</h6><ol>
<li>We begin with initializing the base values of ‘i’</li>
<li>Next, we run a loop that iterates over the remaining values of ‘i’</li>
<li>At every iteration i, f(n) updates the ith entry in the lookup table by combining the solutions to the previously solved subproblems</li>
<li>Finally, f(n) returns table[n]</li>
</ol>
<p>Tabulated Example for nth Fibonacci Number:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*Java program for Tabulated version*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Fibonacci</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">fib</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> f[] = <span class="keyword">new</span> <span class="keyword">int</span>[n+<span class="number">1</span>];</span><br><span class="line">        f[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        f[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++)</span><br><span class="line">            f[i] = f[i-<span class="number">1</span>] + f[i-<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">return</span> f[n];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Fibonacci f = <span class="keyword">new</span> Fibonacci();</span><br><span class="line">        <span class="keyword">int</span> n = <span class="number">9</span>;</span><br><span class="line">        System.out.println(<span class="string">"Fibonacci number is : "</span> + f.fib(n));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Output:<br>Fibonacci number is : 34</p>
</blockquote>
<p>Both Tabulated and Memoized store the solutions of subproblems. In Memoized version, table is filled on demand while in Tabulated version, starting from the first entry, all entries are filled one by one. Unlike the Tabulated version, all entries of the lookup table are not necessarily filled in Memoized version. For example, Memorized solution of the LCS problem doesn’t necessarily fill all entries. </p>
<h3 id="Comparation"><a href="#Comparation" class="headerlink" title="Comparation"></a>Comparation</h3><h4 id="Tabulation"><a href="#Tabulation" class="headerlink" title="Tabulation"></a>Tabulation</h4><ul>
<li>Works in bottom up fashion</li>
<li>Avoids multiple lookups, thus, saves function call overhead time</li>
</ul>
<h4 id="Memoization"><a href="#Memoization" class="headerlink" title="Memoization"></a>Memoization</h4><ul>
<li>Works in top down fashion</li>
<li>Sometimes, avoids computing solutions to subproblems that are not needed, e.g., Longest Common Subsequence</li>
<li>Sometimes, more intuitive to write, e.g., Matrix Chain Multiplication</li>
</ul>
]]></content>
      <categories>
        <category>Data Structure</category>
        <category>Dynamic Programming</category>
      </categories>
      <tags>
        <tag>Data Structure</tag>
        <tag>Dynamic Programming</tag>
      </tags>
  </entry>
  <entry>
    <title>Queue in Java | Part 4 ConcurrentLinkedQueue Class</title>
    <url>/category/Queue-in-Java-Part-4-ConcurrentLinkedQueue-Class/</url>
    <content><![CDATA[<h3 id="Intriduction-ConcurrentLinkedQueue"><a href="#Intriduction-ConcurrentLinkedQueue" class="headerlink" title="Intriduction - ConcurrentLinkedQueue"></a>Intriduction - ConcurrentLinkedQueue</h3><p>The <em>ConcurrentLinkedQueue</em> class in Java is part of the Java Collection Framework and implements the Collection Interface and the AbstractCollection class. It is used to implement Queue with the help of LinkedList concurrently. </p>
<a id="more"></a>

<h4 id="Class-Hierarchy"><a href="#Class-Hierarchy" class="headerlink" title="Class Hierarchy"></a>Class Hierarchy</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">java.lang.Object</span><br><span class="line">  ↳ java.util.AbstractCollection&lt;E&gt;</span><br><span class="line">     ↳ java.util.AbstractQueue&lt;E&gt;</span><br><span class="line">        ↳ Class ConcurrentLinkedQueue&lt;E&gt;</span><br></pre></td></tr></table></figure>

<h4 id="Syntax"><a href="#Syntax" class="headerlink" title="Syntax"></a>Syntax</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcurrentLinkedQueue</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">extends</span> <span class="title">AbstractCollection</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">Queue</span>&lt;<span class="title">E</span>&gt;, <span class="title">Serializable</span></span></span><br></pre></td></tr></table></figure>
<p>where E is the type of elements maintained<br>by this collection</p>
<h4 id="Constructors-in-Java-ConcurrentLinkedQueue"><a href="#Constructors-in-Java-ConcurrentLinkedQueue" class="headerlink" title="Constructors in Java ConcurrentLinkedQueue"></a>Constructors in Java ConcurrentLinkedQueue</h4><ul>
<li><strong>ConcurrentLinkedQueue()</strong>: This constructor is used to construct an empty queue.</li>
<li><strong>ConcurrentLinkedQueue(Collection<E> c)</strong>: This constructor is used to construct a queue with the elements of the Collection passed as the parameter.</li>
</ul>
<hr>
<h3 id="Methods-in-Java-ConcurrentLinkedQueue"><a href="#Methods-in-Java-ConcurrentLinkedQueue" class="headerlink" title="Methods in Java ConcurrentLinkedQueue"></a>Methods in Java ConcurrentLinkedQueue</h3><ul>
<li><strong>add(E e)</strong><ul>
<li>This method inserts the specified element at the tail of this queue.</li>
</ul>
</li>
<li><strong>addAll(Collection c)</strong><ul>
<li>This method appends all the elements in the specified collection to the end of this queue, in the order that they are returned by the specified collections’s iterator.</li>
</ul>
</li>
<li><strong>contains(Object o)</strong><ul>
<li>This method returns true if this queue contains the specified element.</li>
</ul>
</li>
<li><strong>isEmpty()</strong><ul>
<li>This method returns true if this queue contains no elements</li>
</ul>
</li>
<li><strong>iterator()</strong><ul>
<li>This method returns an iterator over the elements in this queue in proper sequence.</li>
</ul>
</li>
<li><strong>offer(E e)</strong><ul>
<li>This method inserts the specified element at the tail of this queue.</li>
</ul>
</li>
<li><strong>peek()</strong><ul>
<li>This method retrieves, but does not remove, the head of this queue, or returns null if this queue is empty.</li>
</ul>
</li>
<li><strong>poll()</strong><ul>
<li>This method retrieves and removes the head of this queue, or returns null if this queue is empty.</li>
</ul>
</li>
<li><strong>remove(Object o)</strong><ul>
<li>This method removes a single instance of the specified element from this queue, if it is present.</li>
</ul>
</li>
<li><strong>size()</strong><ul>
<li>This method returns the number of elements in this queue</li>
</ul>
</li>
<li><strong>spliterator?()</strong><ul>
<li>This method returns an array containing all of the elements in this queue, in proper sequence.</li>
</ul>
</li>
<li><strong>toArray()</strong><ul>
<li>This method returns an array containing all of the elements in this queue, in proper sequence.</li>
</ul>
</li>
<li><strong>toArray(T[] a)</strong><ul>
<li>This method returns an array containing all of the elements in this queue, in proper sequence; the runtimet type of the returned array is that of the specified array.</li>
</ul>
</li>
</ul>
<h4 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.ConcurrentLinkedQueue;</span><br><span class="line"><span class="comment">// Small Java Program to demonstrate ConcurrentLinkedQueue</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcurrentLinkedQueueDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// Create a ConcurrentLinkedQueue</span></span><br><span class="line">        <span class="comment">// Using ConcurrentLinkedQueue() constructor</span></span><br><span class="line">        ConcurrentLinkedQueue&lt;Integer&gt; clq1 = <span class="keyword">new</span> ConcurrentLinkedQueue&lt;Integer&gt;();</span><br><span class="line">        </span><br><span class="line">        clq1.add(<span class="number">11</span>);</span><br><span class="line">        clq1.add(<span class="number">22</span>);</span><br><span class="line">        clq1.add(<span class="number">33</span>);</span><br><span class="line">        clq1.add(<span class="number">44</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// Displaying the existing LinkedQueue</span></span><br><span class="line">        System.out.println(<span class="string">"ConcurrentLinkedQueue : "</span> + clq1);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// Create a ConcurrentLinkedQueue</span></span><br><span class="line">        <span class="comment">// Using ConcurrentLinkedQueue(Collection c) constructor</span></span><br><span class="line">        ConcurrentLinkedQueue&lt;Integer&gt; clq2 = <span class="keyword">new</span> ConcurrentLinkedQueue&lt;Integer&gt;(clq1);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// Displaying the existing LinkedQueue</span></span><br><span class="line">        System.out.println(<span class="string">"ConcurrentLinkedQueue : "</span> + clq2);</span><br><span class="line">                </span><br><span class="line">        <span class="comment">// Displaying the first element</span></span><br><span class="line">        <span class="comment">// using peek() method</span></span><br><span class="line">        System.out.println(<span class="string">"First element is : "</span> + clq2.peek());</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// Remove and display the first element</span></span><br><span class="line">        <span class="comment">// using poll() method</span></span><br><span class="line">        System.out.println(<span class="string">"Head element is : "</span> + clq2.poll());</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// Displaying the existing LinkedQueue</span></span><br><span class="line">        System.out.println(<span class="string">"ConcurrentLinkedQueue : "</span> + clq2);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// Get the size using size() method</span></span><br><span class="line">        System.out.println(<span class="string">"Size : "</span> + clq2.size());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Example-output"><a href="#Example-output" class="headerlink" title="Example output"></a>Example output</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ConcurrentLinkedQueue : [<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>, <span class="number">44</span>]</span><br><span class="line">ConcurrentLinkedQueue : [<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>, <span class="number">44</span>]</span><br><span class="line">First element is : <span class="number">11</span></span><br><span class="line">Head element is : <span class="number">11</span></span><br><span class="line">ConcurrentLinkedQueue : [<span class="number">22</span>, <span class="number">33</span>, <span class="number">44</span>]</span><br><span class="line">Size : <span class="number">3</span></span><br></pre></td></tr></table></figure>


















]]></content>
      <categories>
        <category>Data Structure</category>
        <category>Queue</category>
      </categories>
      <tags>
        <tag>Data Structure</tag>
        <tag>Queue</tag>
      </tags>
  </entry>
  <entry>
    <title>Queue in Java | Part 3 - ArrayBlockingQueue Class</title>
    <url>/category/Queue-in-Java-Part-3-ArrayBlockingQueue-Class/</url>
    <content><![CDATA[<h3 id="Introduction-ArrayBlockingQueue"><a href="#Introduction-ArrayBlockingQueue" class="headerlink" title="Introduction - ArrayBlockingQueue"></a>Introduction - ArrayBlockingQueue</h3><p><em>ArrayBlockingQueue</em> class is a bounded blocking queue backed by an array. By bounded it means that the size of the Queue is fixed. Once created, the capacity cannot be changed. Attempts to put an element into a full queue will result in the operation blocking. Similarly attempts to take an element from an empty queue will also be blocked. Boundness of the <em>ArrayBlockingQueue</em> can be achieved initially by passing capacity as the parameter in the constructor of <em>ArrayBlockingQueue</em>.<a id="more"></a> This queue orders elements <strong>FIFO(first-in-first-out)</strong>. It means that the head of this queue is the oldest element of the elements present in this queue. The tail of this queue is the newest element of the elements of this queue. The newly inserted elements are always inserted at the tail of the queue, and the queue retrieval operations obtain elements at the head of the queue. </p>
<p>This class and its iterator implement all of the optional methods of the Collection and Iterator interfaces. This class is a member of the Java Collections Framework. </p>
<h4 id="Class-Heirarchy"><a href="#Class-Heirarchy" class="headerlink" title="Class Heirarchy"></a>Class Heirarchy</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">java.lang.Object </span><br><span class="line">    ↳ java.util.AbstractCollection </span><br><span class="line">        ↳ java.util.AbstractQueue </span><br><span class="line">            ↳ java.util.concurrent.ArrayBlockingQueue</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>Type Parameters</strong>: The type parameter of ArrayBlockingQueue E is the type of elements held in this collection</p>
</blockquote>
<h5 id="Implemented-Interfaces"><a href="#Implemented-Interfaces" class="headerlink" title="Implemented Interfaces"></a>Implemented Interfaces</h5><p>Following are the interfaces implemented by the ArrayBlockingQueue Class</p>
<ul>
<li>Serializable</li>
<li>Iterable</li>
<li>Collection</li>
<li>BlockingQueue</li>
<li>Queue</li>
</ul>
<h4 id="Syntax"><a href="#Syntax" class="headerlink" title="Syntax"></a>Syntax</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayBlockingQueue</span></span></span><br><span class="line"><span class="class">    <span class="keyword">extends</span> <span class="title">AbstractQueue</span></span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">BlockingQueue</span>, <span class="title">Serializable</span></span></span><br></pre></td></tr></table></figure>

<h4 id="Constructor-Summary"><a href="#Constructor-Summary" class="headerlink" title="Constructor Summary"></a>Constructor Summary</h4><ul>
<li>ArrayBlockingQueue(int capacity)<ul>
<li>Creates an ArrayBlockingQueue with the given(fixed) capacity and default access policy</li>
</ul>
</li>
<li>ArrayBlockingQueue(int capacity, boolean fair)<ul>
<li>Creates an ArrayBlockingQueue with ths given(fixed) capacity and the specified access policy. If the fair value is true then queue accesses for threads blocked on insertion or removal, are processed in FIFO order; if false the access order in unspecified. </li>
</ul>
</li>
<li>ArrayBlockingQueue(int capacity, boolean fair, Collection c)<ul>
<li>Creates an ArrayBlockingQueue with the given(fixed) capacity, the specified access policy and initially containing the elements of the given collection, added in traversal order of the collection’s iterator. If the fair value is true then queue accesses for threads blocked on insertion or removal, are processed in FIFO order; if false the access order is unspecified. </li>
</ul>
</li>
</ul>
<hr>
<h3 id="Method-Summary"><a href="#Method-Summary" class="headerlink" title="Method Summary"></a>Method Summary</h3><ul>
<li><strong>boolean add(E e)</strong><ul>
<li>Inserts the specified element at the tail of this queue if it is possible to do so immediately without exceeding the queue’s capacity, returning true upon success and thrwoing an IllegalStateException if this queue is full.</li>
</ul>
</li>
<li><strong>void clear()</strong><ul>
<li>Atomically removes all of the elements from this queue.</li>
</ul>
</li>
<li><strong>boolean contains(Object o)</strong><ul>
<li>Returns true if this queue contains the specified element.</li>
</ul>
</li>
<li><strong>int drainTo(Collection c)</strong><ul>
<li>Removes all available elements from this queue and adds them to the given collection</li>
</ul>
</li>
<li><strong>int drainTo(Collection c, int maxElements)</strong><ul>
<li>Removes at most the given number of available elements from this queue and adds them to the given collection.</li>
</ul>
</li>
<li><strong>Iterator iterator()</strong><ul>
<li>Returns an iterator over the elements in this queue in proper sequence.</li>
</ul>
</li>
<li><strong>boolean offer(E e)</strong><ul>
<li>Inserts the specified element at the tail of this queue if it is possible to do so immediately without exceeding the queue’s capacity, returning true upon success and false if this queue is full.</li>
</ul>
</li>
<li><strong>Boolean offer(E e, long timeout, TimeUnit unit)</strong><ul>
<li>Inserts the specified element at the tail of this queue, waiting up to the specified wait time for space to become available if the queue is full. </li>
</ul>
</li>
<li><strong>E peek()</strong><ul>
<li>Retrieves, but does not remove, the head of this queue, or returns null if this queue is empty.</li>
</ul>
</li>
<li><strong>E poll()</strong><ul>
<li>Retrieves and removes the head of this queue, or returns null if this queue is empty.</li>
</ul>
</li>
<li><strong>E poll(long timeout, TimeUnit unit)</strong><ul>
<li>Retrieves and removes the head of this queue, waiting up to the specified wait time if necessary for an element to become available.</li>
</ul>
</li>
<li><strong>void put(E e)</strong><ul>
<li>Inserts the specified element at the tail of this queue, waiting for space to become available if the queue is full</li>
</ul>
</li>
<li><strong>int remainingCapacity()</strong><ul>
<li>Returns the number of additional elements that this queue can ideally (in the absence of memory or resource constraints) accept without blocking</li>
</ul>
</li>
<li><strong>boolean remove(Object o)</strong><ul>
<li>Removes a single instance of the specified element from this queue, if it is present.</li>
</ul>
</li>
<li><strong>int size()</strong><ul>
<li>Returns the number of elements in this queue</li>
</ul>
</li>
<li><strong>Spliterator spliterator()</strong><ul>
<li>Returns a Spliterator over the elements in this queue</li>
</ul>
</li>
<li><strong>E take()</strong><ul>
<li>Retrieves and removes the head of this queue, waiting if necessary until an element becomes available.</li>
</ul>
</li>
<li><strong>Object[] toArray()</strong><ul>
<li>Returns an array containing all of the elements in this queue, in proper sequence; the runtime type of the returned array is that of the specified array.</li>
</ul>
</li>
<li><strong>T[] toArray(T[] a)</strong><ul>
<li>Returns an array containing all of the elements in this queue, in 0proper sequence; the runtime type of the returned array is that of the specified array.</li>
</ul>
</li>
<li><strong>String toString()</strong><ul>
<li>Returns a string representation of this collection.</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Data Structure</category>
        <category>Queue</category>
      </categories>
      <tags>
        <tag>Data Structure</tag>
        <tag>Queue</tag>
      </tags>
  </entry>
  <entry>
    <title>[LeetCode] 739. Daily Temperatures</title>
    <url>/category/LeetCode-739-Daily-Temperatures/</url>
    <content><![CDATA[<h3 id="Description"><a href="#Description" class="headerlink" title="Description:"></a>Description:</h3><p>Given a list of daily temperatures T, return a list such that, for each day in the input, tells you how many days you would have to wait until a warmer temperature. If there is no future day for which this is possible, put 0 instead.For example, given the list of temperatures T = [73, 74, 75, 71, 69, 72, 76, 73], your output should be [1, 1, 4, 2, 1, 1, 0, 0].</p>
<a id="more"></a>

<h4 id="Note"><a href="#Note" class="headerlink" title="Note:"></a>Note:</h4><ul>
<li>The length of temperatures will be in the range [1, 30000]. </li>
<li>Each temperature will be an integer in the range [30, 100].</li>
</ul>
<hr>
<h3 id="Solution-One-Stack"><a href="#Solution-One-Stack" class="headerlink" title="Solution One : Stack"></a>Solution One : Stack</h3><h4 id="Explaination"><a href="#Explaination" class="headerlink" title="Explaination"></a>Explaination</h4><ol>
<li>Process indices i in descending order. We’ll keep a stack of indices such that T[stack[-1]] &lt; T[stack[-2]] &lt; …, where stack[-1] is the top of the stack, stack[-2] is second from the top, and so on.</li>
<li>We will maintain this invariant as we process each temperature. </li>
<li>After, it is easy to know the next occurrence of a warmer temperature: it’s simply the top index in the stack.</li>
<li>Here is an example of the contents of the stack as work through T = [73, 74, 75, 71, 69, 72, 76, 73] in reverse order, at the end of the loop (after adding T[i]). For clarity, stack only contains indices i, but we’ll write the value of T[i] beside it in brackets, such as o (73).</li>
</ol>
<blockquote>
<p>When i = 7, stack = [7 (73)]. ans[i] = 0.<br>When i = 6, stack = [6 (76)]. ans[i] = 0.<br>When i = 5, stack = [5 (72), 6 (76)]. ans[i] = 1.<br>When i = 4, stack = [4 (69), 5 (72), 6 (76)]. ans[i] = 1.<br>When i = 3, stack = [3 (71), 5 (72), 6 (76)]. ans[i] = 2.<br>When i = 2, stack = [2 (75), 6 (76)]. ans[i] = 4.<br>When i = 1, stack = [1 (74), 2 (75), 6 (76)]. ans[i] = 1.<br>When i = 0, stack = [0 (73), 1 (74), 2 (75), 6 (76)]. ans[i] = 1.</p>
</blockquote>
<p>Run the below code, you can get some explaination output. </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">dailyTemperatures</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] daily_Temperatures(<span class="keyword">int</span>[] T) &#123;</span><br><span class="line">        <span class="keyword">int</span>[] result = <span class="keyword">new</span> <span class="keyword">int</span>[T.length];</span><br><span class="line">        System.out.println(<span class="string">"Initial result array : "</span> + Arrays.toString(result));</span><br><span class="line">        Stack&lt;Integer&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        System.out.println(<span class="string">"Initial stack : "</span> + Arrays.toString(stack.toArray()) + <span class="string">'\n'</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = T.length - <span class="number">1</span>; i &gt;= <span class="number">0</span> ; --i)</span><br><span class="line">        &#123;</span><br><span class="line">        	System.out.println(<span class="string">"When i is "</span> + i + <span class="string">" | Now stack is : "</span> + Arrays.toString(stack.toArray()) + <span class="string">" "</span>);</span><br><span class="line"></span><br><span class="line">        	<span class="keyword">while</span> (!stack.isEmpty() &amp;&amp; T[i] &gt;= T[stack.peek()]) </span><br><span class="line">        	&#123;</span><br><span class="line">            	System.out.println(<span class="string">"Now T["</span> + i + <span class="string">"] = "</span> + T[i] + <span class="string">". The top of the stack is : "</span> + stack.peek());</span><br><span class="line">            	System.out.println(<span class="string">"T["</span> + stack.peek() + <span class="string">"] = "</span> + T[stack.peek()]);</span><br><span class="line">            	System.out.println(<span class="string">"Because T["</span> + i + <span class="string">"]("</span> + T[i] + <span class="string">") &gt;= T["</span> + stack.peek() + <span class="string">"]("</span> + T[stack.peek()]+ <span class="string">"), so "</span> + stack.peek() + <span class="string">" will be removed from stack."</span>);</span><br><span class="line">            	System.out.print(<span class="string">"Now the new stack after removing "</span> + stack.peek() + <span class="string">" is : "</span>);</span><br><span class="line">            	stack.pop();</span><br><span class="line">            	System.out.print(Arrays.toString(stack.toArray()) + <span class="string">'\n'</span>);</span><br><span class="line">        	&#125;</span><br><span class="line">        	result[i] = stack.isEmpty() ? <span class="number">0</span> : stack.peek() - i;</span><br><span class="line">            <span class="keyword">if</span> (result[i] == <span class="number">0</span>)</span><br><span class="line">                System.out.print(<span class="string">"Because the stack is empty, so "</span>);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            	System.out.print(<span class="string">"The stack is not empty, result["</span> + i + <span class="string">"] will be (the top element from the stack - 1), so "</span>);</span><br><span class="line">            System.out.println(<span class="string">"result["</span> + i + <span class="string">"] = "</span> + result[i]);</span><br><span class="line">            stack.push(i);</span><br><span class="line">            System.out.println(i + <span class="string">" will be pushed to the stack, now the stack is : "</span> + Arrays.toString(stack.toArray()));</span><br><span class="line">            System.out.println(<span class="string">"The result for this loop is : "</span> + Arrays.toString(result));</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    	<span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    	dailyTemperatures temp = <span class="keyword">new</span> dailyTemperatures();</span><br><span class="line">    	<span class="keyword">int</span>[] T = &#123;<span class="number">73</span>, <span class="number">74</span>, <span class="number">75</span>, <span class="number">71</span>, <span class="number">69</span>, <span class="number">72</span>, <span class="number">76</span>, <span class="number">73</span>&#125;;</span><br><span class="line">    	</span><br><span class="line">    	<span class="keyword">int</span> [] result = temp.daily_Temperatures(T);</span><br><span class="line">    	System.out.println(<span class="string">"result is : "</span> + Arrays.toString(result));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>The output of above code</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Initial result array : [0, 0, 0, 0, 0, 0, 0, 0]</span><br><span class="line">Initial stack : []</span><br><span class="line"></span><br><span class="line">When i is 7 | Now stack is : [] </span><br><span class="line">Because the stack is empty, so result[7] = 0</span><br><span class="line">7 will be pushed to the stack, now the stack is : [7]</span><br><span class="line">The result for this loop is : [0, 0, 0, 0, 0, 0, 0, 0]</span><br><span class="line"></span><br><span class="line">When i is 6 | Now stack is : [7] </span><br><span class="line">Now T[6] = 76. The top of the stack is : 7</span><br><span class="line">T[7] = 73</span><br><span class="line">Because T[6](76) &gt;= T[7](73), so 7 will be removed from stack.</span><br><span class="line">Now the new stack after removing 7 is : []</span><br><span class="line">Because the stack is empty, so result[6] = 0</span><br><span class="line">6 will be pushed to the stack, now the stack is : [6]</span><br><span class="line">The result for this loop is : [0, 0, 0, 0, 0, 0, 0, 0]</span><br><span class="line"></span><br><span class="line">When i is 5 | Now stack is : [6] </span><br><span class="line">The stack is not empty, result[5] will be (the top element from the stack - 1), so result[5] = 1</span><br><span class="line">5 will be pushed to the stack, now the stack is : [6, 5]</span><br><span class="line">The result for this loop is : [0, 0, 0, 0, 0, 1, 0, 0]</span><br><span class="line"></span><br><span class="line">When i is 4 | Now stack is : [6, 5] </span><br><span class="line">The stack is not empty, result[4] will be (the top element from the stack - 1), so result[4] = 1</span><br><span class="line">4 will be pushed to the stack, now the stack is : [6, 5, 4]</span><br><span class="line">The result for this loop is : [0, 0, 0, 0, 1, 1, 0, 0]</span><br><span class="line"></span><br><span class="line">When i is 3 | Now stack is : [6, 5, 4] </span><br><span class="line">Now T[3] = 71. The top of the stack is : 4</span><br><span class="line">T[4] = 69</span><br><span class="line">Because T[3](71) &gt;= T[4](69), so 4 will be removed from stack.</span><br><span class="line">Now the new stack after removing 4 is : [6, 5]</span><br><span class="line">The stack is not empty, result[3] will be (the top element from the stack - 1), so result[3] = 2</span><br><span class="line">3 will be pushed to the stack, now the stack is : [6, 5, 3]</span><br><span class="line">The result for this loop is : [0, 0, 0, 2, 1, 1, 0, 0]</span><br><span class="line"></span><br><span class="line">When i is 2 | Now stack is : [6, 5, 3] </span><br><span class="line">Now T[2] = 75. The top of the stack is : 3</span><br><span class="line">T[3] = 71</span><br><span class="line">Because T[2](75) &gt;= T[3](71), so 3 will be removed from stack.</span><br><span class="line">Now the new stack after removing 3 is : [6, 5]</span><br><span class="line">Now T[2] = 75. The top of the stack is : 5</span><br><span class="line">T[5] = 72</span><br><span class="line">Because T[2](75) &gt;= T[5](72), so 5 will be removed from stack.</span><br><span class="line">Now the new stack after removing 5 is : [6]</span><br><span class="line">The stack is not empty, result[2] will be (the top element from the stack - 1), so result[2] = 4</span><br><span class="line">2 will be pushed to the stack, now the stack is : [6, 2]</span><br><span class="line">The result for this loop is : [0, 0, 4, 2, 1, 1, 0, 0]</span><br><span class="line"></span><br><span class="line">When i is 1 | Now stack is : [6, 2] </span><br><span class="line">The stack is not empty, result[1] will be (the top element from the stack - 1), so result[1] = 1</span><br><span class="line">1 will be pushed to the stack, now the stack is : [6, 2, 1]</span><br><span class="line">The result for this loop is : [0, 1, 4, 2, 1, 1, 0, 0]</span><br><span class="line"></span><br><span class="line">When i is 0 | Now stack is : [6, 2, 1] </span><br><span class="line">The stack is not empty, result[0] will be (the top element from the stack - 1), so result[0] = 1</span><br><span class="line">0 will be pushed to the stack, now the stack is : [6, 2, 1, 0]</span><br><span class="line">The result for this loop is : [1, 1, 4, 2, 1, 1, 0, 0]</span><br><span class="line"></span><br><span class="line">result is : [1, 1, 4, 2, 1, 1, 0, 0]</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>LeetCode Medium</category>
        <category>Stack</category>
      </categories>
      <tags>
        <tag>LeetCode (Medium)</tag>
        <tag>Stack</tag>
      </tags>
  </entry>
  <entry>
    <title>AWS Service | IAM 101</title>
    <url>/category/AWS-Service-IAM-101/</url>
    <content><![CDATA[<h3 id="What-is-IAM"><a href="#What-is-IAM" class="headerlink" title="What is IAM"></a>What is IAM</h3><p>Essentially, IAM allows you to manage users and their level of access to the AWS Console. It is important to understand IAM and how it woks, both for the exam and for administrating a company’s AWS account in real life. </p>
<a id="more"></a>

<h3 id="What-does-IAM-give-you"><a href="#What-does-IAM-give-you" class="headerlink" title="What does IAM give you"></a>What does IAM give you</h3><ul>
<li><strong>Centralized control of your AWS account</strong></li>
<li><strong>Shared Access to your AWS account</strong></li>
<li><strong>Granular Permissions</strong><ul>
<li>It means you can enable different levels of access to different users within your organization</li>
</ul>
</li>
<li><strong>Identity Federation</strong> (including Active Directory, Facebook, LinkedIn, etc) <ul>
<li>This means it can enable users to log in using credentials stored in an Active Directory, Facebook or LinkedIn</li>
</ul>
</li>
<li><strong>Multifactor Authentication</strong><ul>
<li>This is where a user is granted access only after successfully completing multiple independent authentication mechanisms. For example, providing a username and password as one authentication mechanism and then providing a software token site that could be via a token generator like Google Authenticator as the second authentication mechanism</li>
</ul>
</li>
<li><strong>Provides temporary access for users/devices and services, as necessary</strong><ul>
<li>For example, if you developed a web or mobile phone application you can configure identity access management to enable users to have temporary access to AWS resources within your account. For example, to enable access to store or retrieve data located in an S3 bucket or within a Dynamo DB database.</li>
</ul>
</li>
<li><strong>Allows you to set up your own password rotation policy</strong></li>
<li><strong>Integrates with many different AWS services</strong></li>
<li><strong>Supports PCI DSS Compliance</strong><ul>
<li>for applications associated with the payment card industry</li>
</ul>
</li>
</ul>
<hr>
<h3 id="Critical-Terms"><a href="#Critical-Terms" class="headerlink" title="Critical Terms"></a>Critical Terms</h3><ul>
<li><strong>Users</strong> - End Users (think people)<ul>
<li>So these are the people logging into the AWS console and also interacting with AWS by running API commands.  </li>
</ul>
</li>
<li><strong>Groups</strong> - A collection of users under one set of permissions<ul>
<li>For example, your marketing team might need access to read and write certain files stored in S3 bucket and that might be logos or images etc. And they’re going to need a specific set of permissions to allow them to do this. So it makes sense to create a group with the required permissions and then all you need to do is add the relevant users into that group and they will all have permissions to read the S3 bucket.</li>
</ul>
</li>
<li><strong>Roles</strong> - Your create roles and can then assign them to AWS resources<ul>
<li>A role is used to define a set of permissions for example S3 bucket access and then that role could be assumed by either uses or AWS services such as EC2. So you might have an EC2 instance which needs to query a database or access files in S3 you can configure that using a role. </li>
</ul>
</li>
<li><strong>Policies</strong> - A document that defines one (or more) permissions<ul>
<li>A policy can be attached to either a user , group or role. </li>
<li>When we attach a policy the user, group or the role will then have the permissions defined within that policy. </li>
<li>It’s possible for a user, a group and a role to all share the same policy. </li>
</ul>
</li>
</ul>
<hr>
<h3 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h3><ul>
<li><strong>IAM is universal</strong>. It does not apply to regions at this time.</li>
<li>The “root account” is simply the account created when first setup your AWS account. It has complete Admin access.</li>
<li>New Users have <strong>NO permissions</strong> when first created.</li>
<li>New Users are assigned <strong>Access Key ID &amp; Secret Access Keys</strong> when first created.</li>
<li>These are not the same as a password, and you cannot use the Access key ID &amp; Secret Access Key to login in to the AWS Management Console. </li>
<li>You can use this to access AWS via the <strong>APIs and Command Line</strong>, however. </li>
<li>You only get to view Access Key ID &amp; Secret Access Key once. If you lose them, you have to regenerate them. So, save them  in a secure location.</li>
<li>Always setup Multifactor Authentication (MFA) on your root account</li>
<li>You can create and customise your own password rotation policies.</li>
</ul>
]]></content>
      <categories>
        <category>AWS Services</category>
        <category>IAM</category>
        <category>AWS Certified Developer - Associate</category>
      </categories>
      <tags>
        <tag>AWS Services</tag>
        <tag>AWS Certified Developer - Associate</tag>
        <tag>IAM</tag>
      </tags>
  </entry>
  <entry>
    <title>Queue in Java | Part 2 AbstractQueue</title>
    <url>/category/Queue-in-Java-Part-2-AbstractQueue/</url>
    <content><![CDATA[<h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><p>The <strong>AbstractQueue</strong> class in Java is a part of the Java Collection Framework and implements the Collection Interface and the AbstractCollection class. It provides skeletal implementations of some <strong>Queue</strong> operations. The implementations in this class are appropriate when the base implementation does not allow null elements.</p>
<a id="more"></a>

<h5 id="All-implemented-Interfaces"><a href="#All-implemented-Interfaces" class="headerlink" title="All implemented Interfaces:"></a>All implemented Interfaces:</h5><p><em>Iterable<E>, Collection<E>, Queue<E></em></p>
<h5 id="Direct-Known-Subclasses"><a href="#Direct-Known-Subclasses" class="headerlink" title="Direct Known Subclasses:"></a>Direct Known Subclasses:</h5><p><em>ArrayBlockingQueue, ConcurrentLinkedQueue, DelayQueue, LinkedBlockingDeque, LinkedTransferQueue, PriorityBlockingQueue, PriorityQueue, SynchronousQueue</em></p>
<h4 id="Class-Hierarchy"><a href="#Class-Hierarchy" class="headerlink" title="Class Hierarchy:"></a>Class Hierarchy:</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">java.lang.Object</span><br><span class="line"> ↳ java.util.AbstractCollection&lt;E&gt;</span><br><span class="line">    ↳ Class AbstractQueue&lt;E&gt;</span><br></pre></td></tr></table></figure>
<h4 id="Syntax"><a href="#Syntax" class="headerlink" title="Syntax:"></a>Syntax:</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractQueue</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">  <span class="keyword">extends</span> <span class="title">AbstractCollection</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">     <span class="keyword">implements</span> <span class="title">Queue</span>&lt;<span class="title">E</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Where E is the type of element maintained by this collection class.</p>
<h4 id="Constructors-in-Java-AbstractQueue"><a href="#Constructors-in-Java-AbstractQueue" class="headerlink" title="Constructors in Java AbstractQueue:"></a>Constructors in Java AbstractQueue:</h4><ul>
<li><strong>protected AbstractQueue()</strong>: The default constructor, but being protected, it doesn’t allow to create an AbstractQueue object.</li>
</ul>
<h4 id="Methods-in-Java-AbstractQueue"><a href="#Methods-in-Java-AbstractQueue" class="headerlink" title="Methods in Java AbstractQueue:"></a>Methods in Java AbstractQueue:</h4><ol>
<li><strong>add(E e)</strong> : Inserts the specified element into this queue if it is possible to do so immediately without voilating capacity restrictions, returning true upon success and throwing an IllegalStateException if no space is currently available. </li>
<li><strong>addAll(Collection c)</strong> : Adds all of the elements in the specified collection to this queue.</li>
<li><strong>clear()</strong> : Removes all of the elements from this queue.</li>
<li><strong>element()</strong> : Retrives, but does not remove, the head of this queue. </li>
<li><strong>remove()</strong> : Retrieves and removes the head of this queue. </li>
</ol>
<h4 id="Methods-inherited-from-different-class"><a href="#Methods-inherited-from-different-class" class="headerlink" title="Methods inherited from different class"></a>Methods inherited from different class</h4><table>
<thead>
<tr>
<th align="center">java.util.AbstractCollection</th>
<th align="center">Java.lang.Object</th>
<th align="center">interface java.util.Queue</th>
<th align="center">interface java.util.Collection</th>
</tr>
</thead>
<tbody><tr>
<td align="center">contains, containsAll, isEmpty, interator, remove, removeAll, retainAll, size, toArray, toString</td>
<td align="center">clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait</td>
<td align="center">offer, peek, poll</td>
<td align="center">contains, containsAll, equals, hashCode, isEmpty, iterator, remove, removeAll, retainAll, size, toArray</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>Data Structure</category>
        <category>Queue</category>
      </categories>
      <tags>
        <tag>Data Structure</tag>
        <tag>Queue</tag>
      </tags>
  </entry>
  <entry>
    <title>Queue in Java | Part 1 Queue Interface</title>
    <url>/category/Queue-in-Java-Part-1-Queue-Interface/</url>
    <content><![CDATA[<h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><p>The Queue interface is available in java.util package and extends the Collection interface. The queue collection is used to hold the elements about to be processed and provides various operations like the insertion, removal etc. It is an <strong>ordered list of objects</strong> with its use limited to insert elements at the end of the list and deleting elements from the start of list. i.e. It follows the <em>FIFO</em> or the <em>First In-First-Out</em> principle. Being an interface the queue needs a concrete class for the declaration and the most common classes are the <strong>PriorityQueue</strong> and LinkedList in Java. It is to be noted that both the implementations are not thread safe. <strong>PriorityBlockingQueue</strong> is one alternate implementation if thread safe implementation is needed. Few important characteristics of Queue are:</p>
<a id="more"></a>

<p>• The Queue is used to insert elements at the end of the queue and removes from the beginning of the queue. It follows FIFO concept.<br>• The Java Queue supports all methods of Collection interface including insertion, deletion etc.<br>• <strong>LinkedList</strong>, <strong>ArrayBlockingQueue</strong> and <strong>PriorityQueue</strong> are the most frequently used implementations.<br>• If any null operation is performed on <strong>BlockingQueues</strong>, <em>NullPointerException</em> is thrown.<br>• BlockingQueues have <strong>thread-safe</strong> implementations.<br>• The Queues which are available in java.util package are <strong>Unbounded Queues</strong><br>• The Queues which are available in java.util.concurrent package are the <strong>Bounded Queues</strong><br>• All Queues except the Deques supports insertion and removal at the tail and head of the queue respectively. The Deques support element insertion and removal at both ends</p>
<hr>
<h3 id="Methods-in-Queue"><a href="#Methods-in-Queue" class="headerlink" title="Methods in Queue:"></a>Methods in Queue:</h3><ol>
<li><strong>add()</strong> - This method is used to add elements at the tail of queue. More specifically, at the last of <strong>linked-list</strong> if it is used, or according to the priority in case of priority queue implementation.</li>
<li><strong>peek()</strong> - This method is used to view the head of queue without removing it. It returns <em>Null</em> if the queue is empty.</li>
<li><strong>element()</strong> - This method is similar to <em>peek()</em>. It throws <em>NoSuchElementException</em> when the queue is empty.</li>
<li><strong>remove()</strong> - This method removes and returns the head of the queue. It throws <em>NoSuchElementException</em> when the queue is empty. </li>
<li><strong>poll()</strong> - This method removes and returns the head of the queue. It returns <em>null</em> if the queue is empty. </li>
<li><strong>size()</strong> - This method returns the no. of elements in the queue.</li>
</ol>
<p>Since it is a subtype of Collection class, it inherits all the methods of it namely <strong>size()</strong>, <strong>isEmpty()</strong>, <strong>contains()</strong> etc.</p>
]]></content>
      <categories>
        <category>Data Structure</category>
        <category>Queue</category>
      </categories>
      <tags>
        <tag>Data Structure</tag>
        <tag>Queue</tag>
      </tags>
  </entry>
  <entry>
    <title>[LeetCode] 890. Find and Replace Pattern</title>
    <url>/category/LeetCode-890-Find-and-Replace-Pattern/</url>
    <content><![CDATA[<h3 id="Description"><a href="#Description" class="headerlink" title="Description:"></a>Description:</h3><p>You have a list of words and a pattern, and you want to know which words in words matches the pattern.<br>A word matches the pattern if there exists a permutation of letters p so that after replacing every letter x in the pattern with p(x), we get the desired word.<br>(Recall that a permutation of letters is a bijection from letters to letters: every letter maps to another letter, and no two letters map to the same letter.)<br>Return a list of the words in words that match the given pattern.<br>You may return the answer in any order.</p>
<a id="more"></a>

<hr>
<h4 id="Example-1"><a href="#Example-1" class="headerlink" title="Example 1"></a>Example 1</h4><blockquote>
<p>Input: words = [“abc”,”deq”,”mee”,”aqq”,”dkd”,”ccc”], pattern = “abb”<br>Output: [“mee”,”aqq”]</p>
</blockquote>
<h4 id="Explanation"><a href="#Explanation" class="headerlink" title="Explanation"></a>Explanation</h4><p>“mee” matches the pattern because there is a permutation {a -&gt; m, b -&gt; e, …}.<br>“ccc” does not match the pattern because {a -&gt; c, b -&gt; c, …} is not a permutation,<br>since a and b map to the same letter.</p>
<h4 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h4><ol>
<li>1 &lt;= words.length &lt;= 50</li>
<li>1 &lt;= pattern.length = words[i].length &lt;= 20</li>
</ol>
<hr>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">findAndReplacePattern</span><span class="params">(String[] words, String pattern)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; res = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(String word : words)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (checkPattern(word, pattern))</span><br><span class="line">                res.add(word);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">checkPattern</span><span class="params">(String word, String pattern)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (pattern.length() != word.length()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        HashMap&lt;Character, Character&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; word.length(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">char</span> w = word.charAt(i);</span><br><span class="line">            <span class="keyword">char</span> p = pattern.charAt(i);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (map.keySet().contains(w))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (map.get(w) != p) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (map.values().contains(p)) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                map.put(w, p);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode Medium</category>
        <category>Hashing</category>
        <category>String</category>
      </categories>
      <tags>
        <tag>Hashing</tag>
        <tag>String</tag>
        <tag>LeetCode (Medium)</tag>
      </tags>
  </entry>
  <entry>
    <title>[LeetCode] 383. Ransom Note</title>
    <url>/category/LeetCode-383-Ransom-Note/</url>
    <content><![CDATA[<h3 id="Description"><a href="#Description" class="headerlink" title="Description:"></a>Description:</h3><p>Given an arbitrary ransom note string and another string containing letters from all the magazines, write a function that will return true if the ransom note can be constructed from the magazines ; otherwise, it will return false. Each letter in the magazine string can only be used once in your ransom note.</p>
<a id="more"></a>

<hr>
<h4 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h4><ul>
<li>canConstruct(“a”, “b”) -&gt; false</li>
<li>canConstruct(“aa”, “ab”) -&gt; false</li>
<li>canConstruct(“aa”, “aab”) -&gt; true</li>
</ul>
<hr>
<h4 id="Note"><a href="#Note" class="headerlink" title="Note:"></a>Note:</h4><ul>
<li>You may assume that both strings contain only lowercase letters.</li>
</ul>
<hr>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><h4 id="One"><a href="#One" class="headerlink" title="One"></a>One</h4><h5 id="Complexity-Analysis"><a href="#Complexity-Analysis" class="headerlink" title="Complexity Analysis :"></a>Complexity Analysis :</h5><ul>
<li>Time Complexity: <strong>O(Math.max(m,n))</strong></li>
<li>Space Complexity: <strong>O(1)</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canConstruct</span><span class="params">(String ransomNote, String magazine)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (ransomNote.length() &gt; magazine.length()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> len = ransomNote.length(), rPointer = <span class="number">0</span>, mPointer = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">char</span>[] rChars = ransomNote.toCharArray();</span><br><span class="line">        Arrays.sort(rChars);</span><br><span class="line">        <span class="keyword">char</span>[] mChars = magazine.toCharArray();</span><br><span class="line">        Arrays.sort(mChars);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// Now the two character arrays are sorted, start to compare now</span></span><br><span class="line">        <span class="keyword">while</span> (len &gt;= <span class="number">0</span> &amp;&amp; rPointer &lt; rChars.length &amp;&amp; mPointer &lt; mChars.length)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (rChars[rPointer] == mChars[mPointer])</span><br><span class="line">            &#123;</span><br><span class="line">                len--;</span><br><span class="line">                rPointer++;</span><br><span class="line">                mPointer++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> </span><br><span class="line">            &#123;</span><br><span class="line">                mPointer++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> (len == <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Two"><a href="#Two" class="headerlink" title="Two"></a>Two</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canConstruct</span><span class="params">(String ransomNote, String magazine)</span> </span>&#123;</span><br><span class="line">        Map&lt;Character, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; magazine.length(); i++)</span><br><span class="line">            map.put(magazine.charAt(i), map.getOrDefault(magazine.charAt(i), <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; ransomNote.length(); j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">char</span> c = ransomNote.charAt(j);</span><br><span class="line">            <span class="keyword">if</span> (map.containsKey(c))</span><br><span class="line">            &#123;</span><br><span class="line">                map.put(c, map.get(c) - <span class="number">1</span>);</span><br><span class="line">                <span class="keyword">if</span> (map.get(c) &lt; <span class="number">0</span>)</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode Easy</category>
        <category>Hashing</category>
        <category>String</category>
      </categories>
      <tags>
        <tag>Hashing</tag>
        <tag>LeetCode(Easy)</tag>
        <tag>String</tag>
      </tags>
  </entry>
  <entry>
    <title>[LeetCode] 1002. Find Common Characters</title>
    <url>/category/LeetCode-1002-Find-Common-Characters/</url>
    <content><![CDATA[<h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>Given an array A of strings made only from lowercase letters, return a list of all characters that show up in all strings within the list (<strong>including duplicates</strong>).<br>For example, if a character occurs 3 times in all strings but not 4 times, you need to include that character three times in the final answer.<br>You may return the answer in any order.</p>
<a id="more"></a>

<hr>
<h4 id="Example-1"><a href="#Example-1" class="headerlink" title="Example 1"></a>Example 1</h4><p>Input: [“bella”,”label”,”roller”]<br>Output: [“e”,”l”,”l”]</p>
<h4 id="Example-2"><a href="#Example-2" class="headerlink" title="Example 2"></a>Example 2</h4><p>Input: [“cool”,”lock”,”cook”]<br>Output: [“c”,”o”]</p>
<hr>
<h3 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h3><ol>
<li>1 &lt;= A.length &lt;= 100</li>
<li>1 &lt;= A[i].length &lt;= 100</li>
<li>A[i][j] is a lowercase letter</li>
</ol>
<hr>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">commonChars</span><span class="params">(String[] A)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span>[] commonCharsCount = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">26</span>];</span><br><span class="line">        <span class="comment">// fill the array with the max integer, so it can be compared with </span></span><br><span class="line">        Arrays.fill(commonCharsCount, Integer.MAX_VALUE);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// iterate each string in A</span></span><br><span class="line">        <span class="keyword">for</span> (String s : A)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span>[] tempCharsCount = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">26</span>];</span><br><span class="line"></span><br><span class="line">            <span class="comment">// count char in this string</span></span><br><span class="line">            <span class="comment">// index will be the sequence of each letter. eg: tempCharsCount[0] : a, tempCharsCount[1] : b</span></span><br><span class="line">            <span class="keyword">for</span> (Char c : s.toCharArray())</span><br><span class="line">                tempCharsCount[c - <span class="string">'a'</span>]++;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// update the commonCharsCount</span></span><br><span class="line">            <span class="comment">// after iterate the string itself, compare with the common char array, </span></span><br><span class="line">            <span class="comment">// it will get the min element from the array and reassign to the common char array</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; commonCharsCount.length; i++)</span><br><span class="line">                commonCharsCount[i] = Math.min(commonCharsCount[i], tempCharsCount[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// iterate commonCharsCount to add each char</span></span><br><span class="line">        <span class="comment">// now the commonCharsCount has our result : the common elements will be marked as the count of the element</span></span><br><span class="line">        <span class="comment">// if the elements are not common, it will be 0 in the array</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; commonCharsCount.length; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span> (commonCharsCount[i] &gt; <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                result.add(<span class="string">""</span> + (<span class="keyword">char</span>)(<span class="string">'a'</span> + i));</span><br><span class="line">                commonCharsCount[i]--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode Easy</category>
        <category>Hashing</category>
      </categories>
      <tags>
        <tag>Hashing</tag>
        <tag>LeetCode(Easy)</tag>
      </tags>
  </entry>
  <entry>
    <title>How HashSet make sure no duplicates</title>
    <url>/category/How-HashSet-make-sure-no-duplicates/</url>
    <content><![CDATA[<h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>HashSet类实现了Set接口，其底层其实是包装了一个HashMap去实现的。HashSet采用HashCode算法来存取集合中的元素，因此具有比较好的读取和查找性能</p>
<a id="more"></a>

<h4 id="构造方法："><a href="#构造方法：" class="headerlink" title="构造方法："></a>构造方法：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashSet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>很明显，HashSet底层是HashMap储存的</p>
<h4 id="add方法"><a href="#add方法" class="headerlink" title="add方法"></a>add方法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Dummy value to associate with an Object in the backing Map</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> HashMap&lt;E,Object&gt; map;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object PRESENT = <span class="keyword">new</span> Object();</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Adds the specified element to this set if it is not already present.</span></span><br><span class="line"><span class="comment"> * More formally, adds the specified element &lt;tt&gt;e&lt;/tt&gt; to this set if</span></span><br><span class="line"><span class="comment"> * this set contains no element &lt;tt&gt;e2&lt;/tt&gt; such that</span></span><br><span class="line"><span class="comment"> * &lt;tt&gt;(e==null&amp;nbsp;?&amp;nbsp;e2==null&amp;nbsp;:&amp;nbsp;e.equals(e2))&lt;/tt&gt;.</span></span><br><span class="line"><span class="comment"> * If this set already contains the element, the call leaves the set</span></span><br><span class="line"><span class="comment"> * unchanged and returns &lt;tt&gt;false&lt;/tt&gt;.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> e element to be added to this set</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &lt;tt&gt;true&lt;/tt&gt; if this set did not already contain the specified</span></span><br><span class="line"><span class="comment"> * element</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> map.put(e, PRESENT)==<span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>add方法的参数（要储存的value）作为HashMap的Key， PRESENT(Object <strong>PRESENT</strong> = new Objcet();)作为固定的value，因为HashMap的key是不能重复的，而这里HashSet的元素又是作为map的key，所以也不能重复</p>
</blockquote>
<p>HashSet如何保证元素不重复的原因找到了，下面看看HashMap里面是怎么保证key不重复的：</p>
<h4 id="HashSet一部分源码"><a href="#HashSet一部分源码" class="headerlink" title="HashSet一部分源码"></a>HashSet一部分源码</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> putVal(hash(key), key, value, <span class="keyword">false</span>, <span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Implements Map.put and related methods</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> hash hash for key</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> key the key</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> value the value to put</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> onlyIfAbsent if true, don't change existing value</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> evict if false, the table is in creation mode.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> previous value, or null if none</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">final</span> V <span class="title">putVal</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">boolean</span> onlyIfAbsent,</span></span></span><br><span class="line"><span class="function"><span class="params">               <span class="keyword">boolean</span> evict)</span> </span>&#123;</span><br><span class="line">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="keyword">int</span> n, i;</span><br><span class="line">    <span class="keyword">if</span> ((tab = table) == <span class="keyword">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">        n = (tab = resize()).length;</span><br><span class="line">    <span class="keyword">if</span> ((p = tab[i = (n - <span class="number">1</span>) &amp; hash]) == <span class="keyword">null</span>)</span><br><span class="line">        tab[i] = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        Node&lt;K,V&gt; e; K k;</span><br><span class="line">        <span class="keyword">if</span> (p.hash == hash &amp;&amp;</span><br><span class="line">            ((k = p.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">            e = p;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">            e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="keyword">this</span>, tab, hash, key, value);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> binCount = <span class="number">0</span>; ; ++binCount) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((e = p.next) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    p.next = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">                    <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>) <span class="comment">// -1 for 1st</span></span><br><span class="line">                        treeifyBin(tab, hash);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (e.hash == hash &amp;&amp; ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                p = e;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123; <span class="comment">// existing mapping for key</span></span><br><span class="line">            V oldValue = e.value;</span><br><span class="line">            <span class="keyword">if</span> (!onlyIfAbsent || oldValue == <span class="keyword">null</span>)</span><br><span class="line">                e.value = value;</span><br><span class="line">            afterNodeAccess(e);</span><br><span class="line">            <span class="keyword">return</span> oldValue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ++modCount;</span><br><span class="line">    <span class="keyword">if</span> (++size &gt; threshold)</span><br><span class="line">        resize();</span><br><span class="line">    afterNodeInsertion(evict);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中最关键的一句：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (e.hash == hash &amp;&amp; ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br></pre></td></tr></table></figure>

<p>调用了对象的hashCode和equals方法进行的判断，所以又得出一个结论：若要将对象存放到HashSet中保证对象不重复，应根据实际情况将对象的hashcode方法和equals方法重写</p>
<p>从源码中，我们可以看出将一个key-value对防区HashMap中，首先根据key的hashcode()返回值决定该entry的存储位置，如果两个key的hash值相等，那么它们的存储位置相等。如果这两个key的equals比较返回true，那么新添加的entry的value会覆盖原来的entry的value，key不会被覆盖。且HashSet中add()中map.put(e, PRESENT) == null为false, HashSet添加元素失败，因此，如果像HashSet中添加一个已经存在的元素，新添加的集合元素不会覆盖原来已有的集合元素</p>
<hr>
<h3 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h3><p>通过分析HashSet的实现原理，可以肯定的是它的去重效率是很高的，前提是去重对象需要有hashcode, equal方法的实现，除此之外，HashMap所拥有的大多数特性都适用于HashSet</p>
]]></content>
      <categories>
        <category>Data Structure</category>
        <category>Hashing</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Hashing</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Hashing Data Structure | Part 3 (Open Addressing)</title>
    <url>/category/Hashing-Data-Structure-Part-3-Open-Addressing/</url>
    <content><![CDATA[<h3 id="Open-Addressing"><a href="#Open-Addressing" class="headerlink" title="Open Addressing"></a>Open Addressing</h3><p>Like separate chaining, open addressing is a method for handling collisions. In Open Addressing, all elements are stored in the hash table itself. So at any point, size of the table must be greater than or equal to the total number of keys(Note that we can increase table size by copying old data if needed).</p>
<a id="more"></a>

<blockquote>
<p><strong>Insert(k)</strong>: Keep probing until an empty slot is found. Once an empty slot is found, insert k.<br><strong>Search(k)</strong>: Keep probing until slot’s key doesn’t become equal to k or an empty slot is reached.<br><strong>Delete(k)</strong>: Delete operation is interesting. If we simply delete a key, then search may fail. So slots of deleted keys are marked specially as “deleted”.</p>
</blockquote>
<p>Insert can insert an item in a deleted slot, but the search doesn’t stop at a deleted slot. </p>
<hr>
<h3 id="Open-Addressing-is-done-following-ways"><a href="#Open-Addressing-is-done-following-ways" class="headerlink" title="Open Addressing is done following ways"></a>Open Addressing is done following ways</h3><h4 id="A-Linear-Probing"><a href="#A-Linear-Probing" class="headerlink" title="A. Linear Probing:"></a>A. Linear Probing:</h4><p>In linear probing, we linearly probe for next slot. For example typical gap between two probes is 1 as taken in below example also. </p>
<p>Let <strong>hash(x)</strong> be the slot index computed using hash function and S be the table size. </p>
<p>If slot <strong>hash(x) % S</strong> is full, then we try <strong>(hash(x) + 1) % S</strong><br>If slot <strong>(hash(x) + 1) % S</strong> is also full, then we try <strong>(hash(x) + 2) % S</strong><br>……<br>……</p>
<p>Let’s consider a simple  hash function as <strong>“key mod 7”</strong> and sequence of keys as 50, 700, 76, 85, 92, 73, 101</p>
<table>
<thead>
<tr>
<th align="center">index(0)</th>
</tr>
</thead>
<tbody><tr>
<td align="center">index(1)</td>
</tr>
<tr>
<td align="center">index(2)</td>
</tr>
<tr>
<td align="center">index(3)</td>
</tr>
<tr>
<td align="center">index(4)</td>
</tr>
<tr>
<td align="center">index(5)</td>
</tr>
<tr>
<td align="center">index(6)</td>
</tr>
</tbody></table>
<p>(Initial Empty Table)</p>
<table>
<thead>
<tr>
<th align="center">&emsp;</th>
</tr>
</thead>
<tbody><tr>
<td align="center">50(index(1))</td>
</tr>
<tr>
<td align="center">&emsp;</td>
</tr>
<tr>
<td align="center">&emsp;</td>
</tr>
<tr>
<td align="center">&emsp;</td>
</tr>
<tr>
<td align="center">&emsp;</td>
</tr>
</tbody></table>
<p>(Insert <strong>50</strong>, (50%7 = <em>1</em>))</p>
<table>
<thead>
<tr>
<th align="center">700</th>
</tr>
</thead>
<tbody><tr>
<td align="center">50</td>
</tr>
<tr>
<td align="center">&emsp;</td>
</tr>
<tr>
<td align="center">&emsp;</td>
</tr>
<tr>
<td align="center">&emsp;</td>
</tr>
<tr>
<td align="center">&emsp;</td>
</tr>
<tr>
<td align="center">76</td>
</tr>
</tbody></table>
<p>(Insert <strong>700</strong>, (700%7 = <em>0</em>) and <strong>76</strong>, (76%7 = <em>6</em>))</p>
<table>
<thead>
<tr>
<th align="center">700</th>
</tr>
</thead>
<tbody><tr>
<td align="center">50</td>
</tr>
<tr>
<td align="center">85</td>
</tr>
<tr>
<td align="center">&emsp;</td>
</tr>
<tr>
<td align="center">&emsp;</td>
</tr>
<tr>
<td align="center">&emsp;</td>
</tr>
<tr>
<td align="center">76</td>
</tr>
</tbody></table>
<p>(Insert <strong>85</strong> (85%7 = <em>1</em>) : Collision Occurs, insert <strong>85</strong> at next free slot: 85%7 = <em>1</em>, (1+1)%7 = <em>2</em>)</p>
<table>
<thead>
<tr>
<th align="center">700</th>
</tr>
</thead>
<tbody><tr>
<td align="center">50</td>
</tr>
<tr>
<td align="center">85</td>
</tr>
<tr>
<td align="center">92</td>
</tr>
<tr>
<td align="center">&emsp;</td>
</tr>
<tr>
<td align="center">&emsp;</td>
</tr>
<tr>
<td align="center">76</td>
</tr>
</tbody></table>
<p>(Insert <strong>92</strong>, (92%7 = <em>1</em>), Collision occurs as 50 is there at index <em>1</em>, insert at the next free slot : (1+1)%7 = <em>2</em>, 85 is there, next free slot: (2+1)%7 = <em>3</em>, insert <strong>92</strong> at index <em>3</em>)</p>
<table>
<thead>
<tr>
<th align="center">700</th>
</tr>
</thead>
<tbody><tr>
<td align="center">50</td>
</tr>
<tr>
<td align="center">85</td>
</tr>
<tr>
<td align="center">92</td>
</tr>
<tr>
<td align="center">73</td>
</tr>
<tr>
<td align="center">101</td>
</tr>
<tr>
<td align="center">76</td>
</tr>
</tbody></table>
<p>(Insert <strong>73</strong>, (73%7 = 3), 92 at index <em>3</em>, next free slot: (3+1)%7 = 4, insert <strong>73</strong> at index <em>4</em>.)<br>(Insert <strong>101</strong>, (101%7 = 3), 92 at index <em>3</em>, next free slot: (3+1)%7 = 4, 73 at index <em>4</em>, next free slot: (4+1)%7 = 5, insert <strong>101</strong> at index <em>5</em>)</p>
<p><strong>Clustering</strong> : The main problem with linear probing is clustering, many consecutive elements from groups and it starts taking time to find a free slot or to search an element. </p>
<h4 id="B-Quadratic-Probing"><a href="#B-Quadratic-Probing" class="headerlink" title="B. Quadratic Probing"></a>B. Quadratic Probing</h4><p>We look for <strong>i^2th</strong> slot in <strong>i’th</strong> iteration.</p>
<p>Let <strong>hash(x)</strong> be the slot index computed using hash function.</p>
<p>If slot <strong>hash(x) % S</strong> is full, then we try <strong>(hash(x) + 1*1) % S</strong><br>If <strong>(hash(x) + 1*1) % S</strong> is also full, then we try <strong>(hash(x) + 2*2) % S</strong><br>If <strong>(hash(x) + 2*2) % S</strong> is also full, then we try <strong>(hash(x) + 3*3) % S</strong><br>…..<br>…..</p>
<h4 id="C-Double-Hashing"><a href="#C-Double-Hashing" class="headerlink" title="C. Double Hashing"></a>C. Double Hashing</h4><p>We use another hash function <strong>hash2(x)</strong> and look for <strong>i*hash2(x)</strong> slot in <strong>i’th</strong> rotation.</p>
<p>Let <strong>hash(x)</strong> be the slot index computed using hash function.</p>
<p>If slot <strong>hash(x) % S</strong> is full, then we try <strong>(hash(x) + 1* hash2(x)) % S</strong><br>If <strong>(hash(x) + 1* hash2(x)) % S</strong> is also full, then we try <strong>(hash(x) + 2* hash2(x)) % S</strong><br>If <strong>(hash(x) + 2* hash2(x)) % S</strong> is also full, then we try <strong>(hash(x) + 3* hash2(x)) % S</strong><br>…..<br>…..</p>
<hr>
<h3 id="Comparison-of-above-three"><a href="#Comparison-of-above-three" class="headerlink" title="Comparison of above three"></a>Comparison of above three</h3><ul>
<li>Linear probing has the best cache performance but suffers from clustering. One more advantage of linear probing is <strong>easy to compute</strong>.</li>
<li>Quadratic probing lies between the two in terms of cache performance and clustering. </li>
<li>Double hashing has poor cache performance but <strong>no clustering</strong>. Double hashing requires more computation time as two hash functions need to be computed. </li>
</ul>
<table>
<thead>
<tr>
<th align="center">&emsp;</th>
<th align="center">Separate Chaining</th>
<th align="center">Open Addressing</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td align="center">Chaining is Simpler to implement</td>
<td align="center">Open Addressing requires more computation</td>
</tr>
<tr>
<td align="center">2</td>
<td align="center">In chaining, hash table never fills up, we can always add more elements to chain</td>
<td align="center">In open addressing, table may become full</td>
</tr>
<tr>
<td align="center">3</td>
<td align="center">Chaining is less sensitive to the hash function or load factors</td>
<td align="center">Open addressing requires extra care for to avoid clustering and load factor.</td>
</tr>
<tr>
<td align="center">4</td>
<td align="center">Chaining is mostly used when it is unknown how many and how frequently keys may be inserted or deleted</td>
<td align="center">Open addressing is used when the frequency and number of keys is known</td>
</tr>
<tr>
<td align="center">5</td>
<td align="center">Cache performance of chaining is not good as keys are stored using linked list</td>
<td align="center">Open addressing provides better cache performance</td>
</tr>
<tr>
<td align="center">6</td>
<td align="center">Wastage of Space(Some Parts of hash table in chaining are never used)</td>
<td align="center">In Open addressing, a slot can be used even if an input doesn’t map to it</td>
</tr>
<tr>
<td align="center">7</td>
<td align="center">Chaining uses extra space for links</td>
<td align="center">No links in Open addressing</td>
</tr>
</tbody></table>
<hr>
<h4 id="Performance-of-Open-Addressing"><a href="#Performance-of-Open-Addressing" class="headerlink" title="Performance of Open Addressing"></a>Performance of Open Addressing</h4><p>Like chaining, the performance of hashing can be evaluated under the assumption that each key is equally likely to be hashed to any slot of the table(simple uniform hashing)</p>
<p><strong>m</strong> = Number of slots in the hash table<br><strong>n</strong> = Number of slots to be inserted in the hash table</p>
<p>Load factor <strong>α = n / m ( &lt; 1)</strong></p>
<p>Expected time to <strong>search/insert /delete &lt; 1 / (1 - α)</strong></p>
<p>So Search, Insert and Delete take <strong>(1 / (1 - α))</strong> time</p>
]]></content>
      <categories>
        <category>Data Structure</category>
        <category>Hashing</category>
      </categories>
      <tags>
        <tag>Data Structure</tag>
        <tag>Hashing</tag>
      </tags>
  </entry>
  <entry>
    <title>Hashing Data Structure | Part 2 (Separate Chaining)</title>
    <url>/category/Hashing-Data-Structure-Part-2-Separate-Chaining/</url>
    <content><![CDATA[<h3 id="What-is-Collision"><a href="#What-is-Collision" class="headerlink" title="What is Collision?"></a>What is Collision?</h3><p>Since a hash function gets us a small number for a key which is a big integer or string, there is a possibility that two keys result in the same value. The situation where a newly inserted key maps to an already occupied slot in the hash table is called collision and must be handled using some collision handling technique. </p>
<a id="more"></a>

<hr>
<h3 id="What-are-the-chances-of-collisions-with-large-table"><a href="#What-are-the-chances-of-collisions-with-large-table" class="headerlink" title="What are the chances of collisions with large table?"></a>What are the chances of collisions with large table?</h3><p>Collisions are very likely even if we have big table to store keys. An important observation is Birthday Paradox. With only 23 person, the probability that two people have the same birthday is 50%.</p>
<h3 id="How-to-handle-Collisions"><a href="#How-to-handle-Collisions" class="headerlink" title="How to handle Collisions?"></a>How to handle Collisions?</h3><p>There are mainly two methods to handle collision:</p>
<blockquote>
<ol>
<li>Separate Chaining</li>
<li>Open Addressing</li>
</ol>
</blockquote>
<p>We’re going to discuss separate chaining in this post:</p>
<h3 id="Separate-Chaining"><a href="#Separate-Chaining" class="headerlink" title="Separate Chaining"></a>Separate Chaining</h3><p>The idea is to make each cell of hash table point to a linked list of records that have same hash function value. </p>
<p>Let’s consider a simple hash function as <strong>“Key mod 7”</strong> and sequence of keys as 50, 700, 76, 85, 92, 73, 101.</p>
<p><img src="https://i.imgur.com/3shuwBp.png" alt="Key mod 7 Example"></p>
<hr>
<h4 id="Advantages"><a href="#Advantages" class="headerlink" title="Advantages"></a>Advantages</h4><ol>
<li>Simplest to implement.</li>
<li>Hash table never fills up, we can always add more elements to the chain.</li>
<li>Less sensitive to the hash function or load factors.</li>
<li>It is mostly used when it is unknown how many and how frequently keys may be inserted or deleted</li>
</ol>
<hr>
<h4 id="Disadvantages"><a href="#Disadvantages" class="headerlink" title="Disadvantages"></a>Disadvantages</h4><ol>
<li>Cache performance of chaining is not good as keys are stored using a linked list. Open addressing provides better cache performance as everything is sorted in the same table. </li>
<li>Wastage of Space(Some Parts of hash table are never used)</li>
<li>If the chain becomes long, then search time can become <strong>O(n)</strong> in the worst case.</li>
<li>Uses extra space for links.</li>
</ol>
<hr>
<h4 id="Performance-of-Chaining"><a href="#Performance-of-Chaining" class="headerlink" title="Performance of Chaining"></a>Performance of Chaining</h4><p>Performance of hashing can be evaluated under the assumption that each key is equally likely to be hashed to any slot of table(simple uniform hashing)</p>
<p><strong>m</strong> = Number of slots in hash table<br><strong>n</strong> = Number of keys to be inserted in hash table<br><strong>α = n / m</strong> (Load factor or average keys per slot)</p>
<p>Expected time to search = <strong>O(1 + α)</strong></p>
<p>Expected time to insert/delete = <strong>O(1 + α)</strong></p>
<p>Time complexity of search insert and delete is: <strong>O(1)</strong> if <strong>α</strong> is <strong>O(1)</strong></p>
]]></content>
      <categories>
        <category>Data Structure</category>
        <category>Hashing</category>
      </categories>
      <tags>
        <tag>Data Structure</tag>
        <tag>Hashing</tag>
      </tags>
  </entry>
  <entry>
    <title>[LeetCode] 1160. Find Words That Can be Formed by Characters</title>
    <url>/category/LeetCode-1160-Find-Words-That-Can-be-Formed-by-Characters/</url>
    <content><![CDATA[<h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>You are given an array of strings words and a string chars.<br>A string is good if it can be formed by characters from chars (each character can only be used once).<br>Return the sum of lengths of all good strings in words.</p>
<a id="more"></a>

<hr>
<h4 id="Example-1"><a href="#Example-1" class="headerlink" title="Example 1"></a>Example 1</h4><p>Input: words = [“cat”,”bt”,”hat”,”tree”], chars = “atach”<br>Output: 6</p>
<blockquote>
<p>Explanation<br>The strings that can be formed are “cat” and “hat” so the answer is 3 + 3 = 6.</p>
</blockquote>
<h4 id="Example-2"><a href="#Example-2" class="headerlink" title="Example 2"></a>Example 2</h4><p>Input: words = [“hello”,”world”,”leetcode”], chars = “welldonehoneyr”</p>
<p>Output: 10</p>
<blockquote>
<p>Explanation<br>The strings that can be formed are “hello” and “world” so the answer is 5 + 5 = 10.</p>
</blockquote>
<hr>
<h3 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h3><ol>
<li>1 &lt;= words.length &lt;= 1000</li>
<li>1 &lt;= words[i].length, chars.length &lt;= 100</li>
<li>All strings contain lowercase English letters only.</li>
</ol>
<hr>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">countCharacters</span><span class="params">(String[] words, String chars)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        Map&lt;Character, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;Character, Integer&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">char</span> c : chars.toCharArray())</span><br><span class="line">            map.put(c, map.getOrDefault(c, <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// for each word</span></span><br><span class="line">        <span class="keyword">for</span> (String word : words)</span><br><span class="line">        &#123;</span><br><span class="line">            Map&lt;Character, Integer&gt; wordMap = <span class="keyword">new</span> HashMap&lt;Character, Integer&gt;();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">char</span> c : word.toCharArray())</span><br><span class="line">                wordMap.put(c, wordMap.getOrDefault(c, <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">boolean</span> invalidWord = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">for</span> (Character key : wordMap.keySet())</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (!map.containsKey(key) || map.get(key) &lt; wordMap.get(key))</span><br><span class="line">                    invalidWord = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!invalidWord)</span><br><span class="line">            &#123;</span><br><span class="line">                count = count + word.length();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode Easy</category>
        <category>Hashing</category>
      </categories>
      <tags>
        <tag>Hashing</tag>
        <tag>LeetCode(Easy)</tag>
      </tags>
  </entry>
  <entry>
    <title>[LeetCode] 811. Subdomain Visit Count</title>
    <url>/category/LeetCode-811-Subdomain-Visit-Count/</url>
    <content><![CDATA[<h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>A website domain like <strong>“discuss.leetcode.com”</strong> consists of various subdomains. At the top level, we have <strong>“com”</strong>, at the next level, we have <strong>“leetcode.com”</strong>, and at the lowest level, <strong>“discuss.leetcode.com”</strong>. When we visit a domain like <strong>“discuss.leetcode.com”</strong>, we will also visit the parent domains <strong>“leetcode.com”</strong> and <strong>“com”</strong> implicitly.</p>
<a id="more"></a>

<p>Now, call a <strong>“count-paired domain”</strong> to be a count (representing the number of visits this domain received), followed by a space, followed by the address. An example of a count-paired domain might be “9001 discuss.leetcode.com”.</p>
<p>We are given a list cpdomains of count-paired domains. We would like a list of count-paired domains, (in the same format as the input, and in any order), that explicitly counts the number of visits to each subdomain.</p>
<hr>
<h4 id="Example-1"><a href="#Example-1" class="headerlink" title="Example 1"></a>Example 1</h4><blockquote>
<p>Input:<br>[“9001 discuss.leetcode.com”]<br>Output:<br>[“9001 discuss.leetcode.com”, “9001 leetcode.com”, “9001 com”]<br>Explanation:<br>We only have one website domain: “discuss.leetcode.com”. As discussed above, the subdomain “leetcode.com” and “com” will also be visited. So they will all be visited 9001 times.</p>
</blockquote>
<h4 id="Example-2"><a href="#Example-2" class="headerlink" title="Example 2"></a>Example 2</h4><blockquote>
<p>Input:<br>[“900 google.mail.com”, “50 yahoo.com”, “1 intel.mail.com”, “5 wiki.org”]<br>Output:<br>[“901 mail.com”,”50 yahoo.com”,”900 google.mail.com”,”5 wiki.org”,”5 org”,”1 intel.mail.com”,”951 com”]<br>Explanation:<br>We will visit “google.mail.com” 900 times, “yahoo.com” 50 times, “intel.mail.com” once and “wiki.org” 5 times. For the subdomains, we will visit “mail.com” 900 + 1 = 901 times, “com” 900 + 50 + 1 = 951 times, and “org” 5 times.</p>
</blockquote>
<h4 id="Notes"><a href="#Notes" class="headerlink" title="Notes"></a>Notes</h4><ul>
<li>The length of cpdomains will not exceed 100. </li>
<li>The length of each domain name will not exceed 100.</li>
<li>Each address will have either 1 or 2 “.” characters.</li>
<li>The input count in any count-paired domain will not exceed 10000.</li>
<li>The answer output can be returned in any order.</li>
</ul>
<hr>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">subdomainVisits</span><span class="params">(String[] cpdomains)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; result = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        Map&lt;String, Integer&gt; counts = <span class="keyword">new</span> HashMap&lt;String, Integer&gt;();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (String domain : cpdomains)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// \\s+ matches sequence of one or more whitespace characters</span></span><br><span class="line">            String[] info = domain.split(<span class="string">"\\s+"</span>);</span><br><span class="line">            String[] subdomains = info[<span class="number">1</span>].split(<span class="string">"\\."</span>);</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">int</span> count = Integer.valueOf(info[<span class="number">0</span>]);</span><br><span class="line">            String current = <span class="string">""</span>;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = subdomains.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">            &#123;</span><br><span class="line">                current = subdomains[i] + (i &lt; subdomains.length - <span class="number">1</span> ? <span class="string">"."</span> : <span class="string">""</span>) + current;</span><br><span class="line">                counts.put(current, counts.getOrDefault(current, <span class="number">0</span>) + count);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (String key : counts.keySet())</span><br><span class="line">            result.add(counts.get(key) + <span class="string">" "</span> + key);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="Time-Complexity"><a href="#Time-Complexity" class="headerlink" title="Time Complexity"></a>Time Complexity</h3><p><strong>O(n)</strong>, where n is the length of cpdomains, and assuming the length of cpdomains[i] is fixed</p>
<h3 id="Space-Complexity"><a href="#Space-Complexity" class="headerlink" title="Space Complexity"></a>Space Complexity</h3><p><strong>O(n)</strong>, the space used in our count</p>
]]></content>
      <categories>
        <category>LeetCode Easy</category>
        <category>Hashing</category>
      </categories>
      <tags>
        <tag>Hashing</tag>
        <tag>LeetCode(Easy)</tag>
      </tags>
  </entry>
  <entry>
    <title>[LeetCode] 1207. Unique Number of Occurrences</title>
    <url>/category/LeetCode-1207-Unique-Number-of-Occurrences/</url>
    <content><![CDATA[<h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>Given an array of integers <strong>arr</strong>, write a function that returns true if and only if the number of occurrences of each value in the array is unique.</p>
<a id="more"></a>

<hr>
<h4 id="Example-1"><a href="#Example-1" class="headerlink" title="Example 1"></a>Example 1</h4><p>Input: arr = [1,2,2,1,1,3]<br>Output: true</p>
<p>Explanation: The value 1 has 3 occurrences, 2 has 2 and 3 has 1. No two values have the same number of occurrences.</p>
<h4 id="Example-2"><a href="#Example-2" class="headerlink" title="Example 2"></a>Example 2</h4><p>Input: arr = [1,2]<br>Output: false</p>
<h4 id="Example-3"><a href="#Example-3" class="headerlink" title="Example 3"></a>Example 3</h4><p>Input: arr = [-3,0,1,-3,1,1,1,-3,10,0]<br>Output: true</p>
<h4 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h4><ul>
<li>1 &lt;= arr.length &lt;= 1000</li>
<li>-1000 &lt;= arr[i] &lt;= 1000</li>
</ul>
<hr>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">uniqueOccurrences</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">        Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;Integer, Integer&gt;();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            map.put(arr[i], map.getOrDefault(arr[i], <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> count = map.size();</span><br><span class="line">        Set&lt;Integer&gt; set = <span class="keyword">new</span> HashSet(map.values());</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> set.size() &lt; count ? <span class="keyword">false</span> : <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode Easy</category>
        <category>Hashing</category>
      </categories>
      <tags>
        <tag>Hashing</tag>
        <tag>LeetCode(Easy)</tag>
      </tags>
  </entry>
  <entry>
    <title>[LeetCode] 961. N-Repeated Element in Size 2N Array</title>
    <url>/category/LeetCode-961-N-Repeated-Element-in-Size-2N-Array/</url>
    <content><![CDATA[<h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>In a array A of size <strong>2N</strong>, there are <strong>N+1</strong> unique elements, and exactly one of these elements is repeated <strong>N</strong> times.</p>
<p>Return the element repeated <strong>N</strong> times.</p>
<a id="more"></a>

<hr>
<h4 id="Example-1"><a href="#Example-1" class="headerlink" title="Example 1"></a>Example 1</h4><p>Input: [1,2,3,3]<br>Output: 3</p>
<h4 id="Example-2"><a href="#Example-2" class="headerlink" title="Example 2"></a>Example 2</h4><p>Input: [2,1,2,5,3,2]<br>Output: 2</p>
<h4 id="Example-3"><a href="#Example-3" class="headerlink" title="Example 3"></a>Example 3</h4><p>Input: [5,1,5,2,5,3,5,4]<br>Output: 5</p>
<h4 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h4><ol>
<li>4 &lt;= <strong>A.length</strong> &lt;= 10000</li>
<li>0 &lt;= <strong>A[i]</strong> &lt; 10000</li>
<li><strong>A.length</strong> is even</li>
</ol>
<hr>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">repeatedNTimes</span><span class="params">(<span class="keyword">int</span>[] A)</span> </span>&#123;</span><br><span class="line">        Map&lt;Integer, Integer&gt; count = <span class="keyword">new</span> HashMap();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> x : A)</span><br><span class="line">        &#123;</span><br><span class="line">            count.put(x, count.getOrDefault(x, <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i : count.keySet())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (count.get(i) &gt; <span class="number">1</span>)</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Time-Complexity"><a href="#Time-Complexity" class="headerlink" title="Time Complexity"></a>Time Complexity</h3><p><strong>O(N)</strong>, where N is the length of A</p>
<h3 id="Space-Complexity"><a href="#Space-Complexity" class="headerlink" title="Space Complexity"></a>Space Complexity</h3><p>Space Complexity: <strong>O(N)</strong></p>
]]></content>
      <categories>
        <category>LeetCode Easy</category>
        <category>Hashing</category>
      </categories>
      <tags>
        <tag>Hashing</tag>
        <tag>LeetCode(Easy)</tag>
      </tags>
  </entry>
  <entry>
    <title>[LeetCode] 760. Find Anagram Mappings</title>
    <url>/category/LeetCode-760-Find-Anagram-Mappings/</url>
    <content><![CDATA[<h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>Given two lists <strong>A</strong> and <strong>B</strong>, and <strong>B</strong> is an anagram of <strong>A</strong>. <strong>B</strong> is an anagram of <strong>A</strong> means <strong>B</strong> is made by randomizing the order of the elements in <strong>A</strong>.<br>We want to find an index mapping <strong>P</strong>, from <strong>A</strong> to <strong>B</strong>.<br><strong>A</strong> mapping <strong>P[i] = j</strong> means the ith element in <strong>A</strong> appears in <strong>B</strong> at index j.<br>These lists <strong>A</strong> and <strong>B</strong> may contain duplicates. If there are multiple answers, output any of them.</p>
<a id="more"></a>

<hr>
<h4 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h4><p>For example, given</p>
<blockquote>
<p>A = [12, 28, 46, 32, 50]<br>B = [50, 12, 32, 46, 28]</p>
</blockquote>
<p>We should return</p>
<blockquote>
<p>[1, 4, 3, 2, 0]</p>
</blockquote>
<p>as <strong>P[0] = 1</strong> because the 0th element of <strong>A</strong> appears at <strong>B[1]</strong>, and <strong>P[1]</strong> = <strong>4</strong> because the 1st element of A appears at <strong>B[4]</strong>, and so on.</p>
<h4 id="Note"><a href="#Note" class="headerlink" title="Note:"></a>Note:</h4><p><strong>A</strong>, <strong>B</strong> have equal lengths in range <strong>[1, 100]</strong>.<br><strong>A[i]</strong>, <strong>B[i]</strong> are integers in range <strong>[0, 10^5]</strong>.</p>
<hr>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p><strong>P[i] = j</strong>, <strong>A[i] = B[j]</strong>. Traverse list <strong>A</strong>, map each value of <strong>A</strong> to its index in <strong>B</strong>.<br>And before that, we need to traverse <strong>B</strong>, and find a hash table that can map value of <strong>B</strong> to its index</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] anagramMappings(<span class="keyword">int</span>[] A, <span class="keyword">int</span>[] B) &#123;</span><br><span class="line">        <span class="comment">// key is the index value from B</span></span><br><span class="line">        <span class="comment">// value is the index from B</span></span><br><span class="line">        Map&lt;Integer, Integer&gt; mapB = <span class="keyword">new</span> HashMap();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; B.length; i++)</span><br><span class="line">            mapB.put(B[i], i);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[] result = <span class="keyword">new</span> <span class="keyword">int</span>[A.length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; A.length; j++)</span><br><span class="line">            result[j] = mapB.get(A[j]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Time-Complexity"><a href="#Time-Complexity" class="headerlink" title="Time Complexity"></a>Time Complexity</h3><p>Traverse list <strong>A</strong> and <strong>B</strong> : <strong>O(n)</strong></p>
<h3 id="Space-Complexity"><a href="#Space-Complexity" class="headerlink" title="Space Complexity"></a>Space Complexity</h3><p>Use a hash table to store the mapping from value of <strong>B</strong> to its index: <strong>O(n)</strong></p>
]]></content>
      <categories>
        <category>LeetCode Easy</category>
        <category>Hashing</category>
      </categories>
      <tags>
        <tag>Hashing</tag>
        <tag>LeetCode(Easy)</tag>
      </tags>
  </entry>
  <entry>
    <title>Hashing Data Structure | Part 1 (Introduction)</title>
    <url>/category/Hashing-Data-Structure-Part-1-Introduction/</url>
    <content><![CDATA[<h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>Hashing is an important Data Structure which is designed to use a special function called the <strong>Hash Function</strong> which is used to map a given value with a particular key for faster access of elements. The efficiency of mapping depends of the efficiency of the hash function used.</p>
<a id="more"></a>

<p><strong>Hashing</strong> - provides <strong>O(1)</strong> time on average for insert, search and delete<br><strong>Hashing Function</strong> - hash function maps a big number or string to a small integer that can be used as index in hash table</p>
<p>Suppose we want to design a system for storing employee records keyed using phone numbers. And we want following queries to be performed efficiently:</p>
<blockquote>
<ul>
<li>Insert a phone number and corresponding information</li>
<li>Search a phone number and fetch the information</li>
<li>Delete a phone number and related information</li>
</ul>
</blockquote>
<p>We can think of using the following data structures to maintain information about different phone numbers. </p>
<blockquote>
<ol>
<li>Array of phone numbers and records</li>
<li>Linked list of phone numbers and records</li>
<li>Balanced binary search tree with phone numbers as keys</li>
<li>Direct Access Table</li>
</ol>
</blockquote>
<p>For <strong>arrays and linked lists</strong>, we need to search a linear fashion, which can be costly in practice. If we use arrays and keep the data sorted, then a phone number can be search in <strong>O(logn)</strong> time using Binary Search, but insert and delete operations become costly as we have to maintain sorted order. </p>
<p>With <strong>balanced binary search tree</strong>, we get moderate search, insert and delete times. All of these operations can be guaranteed to be in <strong>O(logn)</strong> time.</p>
<p>Another solution that one can think of is to use a <strong>direct access table</strong> where we make a big array and use phone numbers as index in the array. An entry in arrays is NIL if phone number is not present, else the array entry stores pointer to records corresponding to phone number. Time complexity wise this solution is the best among all, we can do all operations in <strong>O(1)</strong>. For example to insert a phone number, we create a record with details of given phone number, use phone number as index and store the pointer to the created record in table.<br>This solution has many practical limitations. First problem with this solution is extra space required is huge. For example if phone number is n digits, we need <strong>O(m*10^n)</strong> space for table where <strong>m</strong> is size of a pointer to record. Another problem is an integer in a programming language may not store n digits.<br>Due to above limitations Direct Access Table cannot always be used. Hashing is the solution that can be used in almost all such situations and performs extremely well compared to above data structures like Array, Linked List, Balanced BST in practice. With hashing we get <strong>O(1)</strong> search time on average(under reasonable assumptions) and <strong>O(n)</strong> in worst case. </p>
<p>Hashing is an improvement over Direct Access Table. The idea is to use hash function that converts a given phone number or any other key to a smaller number and uses the small number as index in a table called hash table. </p>
<h3 id="Hash-Function"><a href="#Hash-Function" class="headerlink" title="Hash Function"></a>Hash Function</h3><p>A function that converts a given big phone number to a small practical integer value. The mapped integer value is used as an index in hash table. In simple terms, a hash function maps a big number or string to a small integer that can be used as index in hash table. </p>
<p>A good hash function should have following properties:</p>
<blockquote>
<ol>
<li>Efficiently computable</li>
<li>Should uniformly distribute the keys(Each table position equally likely for each key)</li>
</ol>
</blockquote>
<p>For example for phone numbers a bad hash function is to take first three digits. A better function is consider last three digits. Please note the this may not be the best hash function. There may be better ways.</p>
<h3 id="Hash-Table"><a href="#Hash-Table" class="headerlink" title="Hash Table"></a>Hash Table</h3><p>An array that stores pointers to records corresponding to a given phone number. An entry in hash table is NIL if no existing phone number has hash function value equal to the index for the entry. </p>
<h4 id="Collision-Handling"><a href="#Collision-Handling" class="headerlink" title="Collision Handling"></a>Collision Handling</h4><p>Since a hash function gets us a small number for a big key, there is possibility that two keys result in same value. The situation where a newly inserted key maps to an already occupied slot in hash table is called collision and must be handled using some collision handling technique. Following are the ways to handle collisions:</p>
<blockquote>
<ul>
<li><strong>Chaining</strong> : The idea is to make each cell of hash table point to a <strong>linked list</strong> of records that have same hash function value. Chaining is simple, but requires additional memory outside the table.</li>
<li><strong>Open Addressing</strong> : In open addressing, all elements are stored in the hash table itself. Each table entry contains either a record or NIL. When searching for an element, we one by one examine table slots until the desired element is found or it is clear that the element is not in the table. </li>
</ul>
</blockquote>
<ul>
<li>Linear Probing</li>
<li>Quadratic Probing</li>
<li>Double Hashing</li>
</ul>
]]></content>
      <categories>
        <category>Data Structure</category>
        <category>Hashing</category>
      </categories>
      <tags>
        <tag>Data Structure</tag>
        <tag>Hashing</tag>
      </tags>
  </entry>
  <entry>
    <title>Database Normalization Explained</title>
    <url>/category/Database-Normalization-Explained/</url>
    <content><![CDATA[<p><strong>Normalization</strong> is a database design technique which organizes tables in a manner that avoids data redundancy, insertion anomaly, update anomaly and deletion anomaly.</p>
<a id="more"></a>

<h2 id="Anomalies-in-DBMS"><a href="#Anomalies-in-DBMS" class="headerlink" title="Anomalies in DBMS"></a>Anomalies in DBMS</h2><p>There are three types of anomalies that occur when the database is not normalized. These are <strong>Insertion</strong>, <strong>Update</strong> and <strong>Deletion</strong> anomaly. </p>
<p><strong>Example :</strong></p>
<p>Suppose a manufacturing company stores the employee details in a table named employee that has four attributes: emp_id for storing employee’s id, emp_name for storing employee’s name, emp_address for storing employee’s address and emp_dept for storing the department details in which the employee works. At some point of time the table looks like this: </p>
<table>
<thead>
<tr>
<th align="center">emp_id</th>
<th align="center">emp_name</th>
<th align="center">emp_address</th>
<th align="center">emp_dept</th>
</tr>
</thead>
<tbody><tr>
<td align="center">101</td>
<td align="center">Rick</td>
<td align="center">AddressA</td>
<td align="center">D001</td>
</tr>
<tr>
<td align="center">101</td>
<td align="center">Rick</td>
<td align="center">AddressA</td>
<td align="center">D002</td>
</tr>
<tr>
<td align="center">123</td>
<td align="center">Maggie</td>
<td align="center">AddressB</td>
<td align="center">D890</td>
</tr>
<tr>
<td align="center">166</td>
<td align="center">Glenn</td>
<td align="center">AddressC</td>
<td align="center">D900</td>
</tr>
<tr>
<td align="center">166</td>
<td align="center">Glenn</td>
<td align="center">AddressC</td>
<td align="center">D004</td>
</tr>
</tbody></table>
<p>The above table is not normalized. Here are the problems we could face when a table is not normalized.</p>
<ul>
<li><p><strong>Update anomaly</strong></p>
<p>In the above table we have two rows for employee Rick as he belongs to two departments of the company. If we want to update the address of Rick then we have to update the same in two rows or the data will become inconsistent. If somehow, the correct address gets updated in one department but not in other then as per the database, Rick would be having two different addresses, which is not correct and would lead to inconsistent data. </p>
</li>
</ul>
<ul>
<li><p><strong>Insert anomaly</strong></p>
<p>Suppose a new employee joins the company, who is under training and currently not assigned to any department then we would not be able to insert the data into the table if emp_dept field doesn’t allow nulls.</p>
</li>
</ul>
<ul>
<li><p><strong>Delete anomaly</strong></p>
<p>Suppose, if at a point of time the company closes the department D890 then deleting the rows that are having emp_dept as D890 would also delete the information of employee Maggie since she is assigned only to this department.  </p>
</li>
</ul>
<hr>
<h2 id="Database-Normal-Forms"><a href="#Database-Normal-Forms" class="headerlink" title="Database Normal Forms"></a>Database Normal Forms</h2><h3 id="1NF-First-Normal-Form-Rules"><a href="#1NF-First-Normal-Form-Rules" class="headerlink" title="1NF(First Normal Form) Rules"></a>1NF(First Normal Form) Rules</h3><ul>
<li>A column of a table cannot hold multiple values. Each table cell should contain a single value (atomic value)</li>
<li>Each record needs to be unique</li>
</ul>
<p>This is one table that is without normalization because the Movies and Category columns have multiple values :</p>
<table>
<thead>
<tr>
<th align="center">Name</th>
<th align="center">Address</th>
<th align="center">Movies</th>
<th align="center">Salutation</th>
<th align="center">Category</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Janet</td>
<td align="center">Flat B, 6th Street</td>
<td align="center">Deadpool, Spider-Man</td>
<td align="center">Ms.</td>
<td align="center">Action, Action</td>
</tr>
<tr>
<td align="center">Robert</td>
<td align="center">3rd Street</td>
<td align="center">Call Me by Your Name, La La Land</td>
<td align="center">Mr.</td>
<td align="center">Romance, Romance</td>
</tr>
<tr>
<td align="center">Robert</td>
<td align="center">5th Avenue</td>
<td align="center">Spider-Man</td>
<td align="center">Mr.</td>
<td align="center">Action</td>
</tr>
</tbody></table>
<p>(Table 0)</p>
<p>The above table in <strong>1NF</strong> will look like this : </p>
<h4 id="1NF-Example"><a href="#1NF-Example" class="headerlink" title="1NF Example :"></a>1NF Example :</h4><table>
<thead>
<tr>
<th align="center">Name</th>
<th align="center">Address</th>
<th align="center">Movies Rented</th>
<th align="center">Salutation</th>
<th align="center">Category</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Janet</td>
<td align="center">Flat B, 6th Street</td>
<td align="center">Deadpool</td>
<td align="center">Ms.</td>
<td align="center">Action</td>
</tr>
<tr>
<td align="center">Janet</td>
<td align="center">Flat B, 6th Street</td>
<td align="center">Spider-Man</td>
<td align="center">Ms.</td>
<td align="center">Action</td>
</tr>
<tr>
<td align="center">Robert</td>
<td align="center">3rd Street</td>
<td align="center">Call Me by Your Name</td>
<td align="center">Mr.</td>
<td align="center">Romance</td>
</tr>
<tr>
<td align="center">Robert</td>
<td align="center">3rd Street</td>
<td align="center">La La Land</td>
<td align="center">Mr.</td>
<td align="center">Romance</td>
</tr>
<tr>
<td align="center">Robert</td>
<td align="center">5th Avenue</td>
<td align="center">Spider-Man</td>
<td align="center">Mr.</td>
<td align="center">Action</td>
</tr>
</tbody></table>
<p>(Table 1: In 1NF)</p>
<p>A few things too understand first:</p>
<h4 id="What-is-a-KEY"><a href="#What-is-a-KEY" class="headerlink" title="What is a KEY?"></a>What is a KEY?</h4><p>A <strong>KEY</strong> is a value used to identify a record in a table uniquely. A <strong>KEY</strong> could be a single column or combination of multiple columns.</p>
<p>Note: Columns in a table that are NOT used to identify a record uniquely are called non-key columns</p>
<h4 id="What-is-a-primary-Key"><a href="#What-is-a-primary-Key" class="headerlink" title="What is a primary Key?"></a>What is a primary Key?</h4><p>A primary is a single column value used to identify a database record uniquely.</p>
<p>It has following attributes : </p>
<ul>
<li>A primary key cannot be <strong>NULL</strong></li>
<li>A primary key value must be <strong>unique</strong></li>
<li>The primary key values should rarely be changed</li>
<li>The primary key must be given a value when a new record is inserted</li>
</ul>
<h4 id="What-is-a-Composite-Key"><a href="#What-is-a-Composite-Key" class="headerlink" title="What is a Composite Key?"></a>What is a Composite Key?</h4><p>A <strong>composite key</strong> is a primary key composed of multiple columns used to identify a record uniquely</p>
<p>Take the above table as an example, the Name column is not unique. Hence, we require both Name and Address to identify a record uniquely. That is a <strong>composite key</strong>. </p>
<p>Now, move to <strong>Second Normal Form (2NF)</strong></p>
<hr>
<h3 id="2NF-Second-Normal-Form-Rules"><a href="#2NF-Second-Normal-Form-Rules" class="headerlink" title="2NF(Second Normal Form) Rules"></a>2NF(Second Normal Form) Rules</h3><ul>
<li>Rule 1 - Follow 1NF</li>
<li>Rule 2 - <strong>Single Column Primary Key</strong></li>
</ul>
<p>It’s clear that we cannot move forward to make simple database in 2nd Normalization form unless we partition the table above. </p>
<h4 id="2NF-Example"><a href="#2NF-Example" class="headerlink" title="2NF Example :"></a>2NF Example :</h4><table>
<thead>
<tr>
<th align="center">Membership ID</th>
<th align="center">Name</th>
<th align="center">Physical Address</th>
<th align="center">Salutation</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td align="center">Janet</td>
<td align="center">Flat B, 6th Street</td>
<td align="center">Ms.</td>
</tr>
<tr>
<td align="center">2</td>
<td align="center">Robert</td>
<td align="center">3rd Street</td>
<td align="center">Mr.</td>
</tr>
<tr>
<td align="center">3</td>
<td align="center">Robert</td>
<td align="center">5th Avenue</td>
<td align="center">Mr.</td>
</tr>
</tbody></table>
<p>(Table 1)</p>
<table>
<thead>
<tr>
<th align="center">Membership ID</th>
<th align="center">Movies Rented</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td align="center">Deadpool</td>
</tr>
<tr>
<td align="center">1</td>
<td align="center">Spider-Man</td>
</tr>
<tr>
<td align="center">2</td>
<td align="center">Call Me by Your Name</td>
</tr>
<tr>
<td align="center">2</td>
<td align="center">La La Land</td>
</tr>
<tr>
<td align="center">3</td>
<td align="center">Spider-Man</td>
</tr>
</tbody></table>
<p>(Table 2)</p>
<p>We have divided our 1NF table into two tables, Table 1 and Table 2. Table 1 contains member information. Table 2 contains information on movies rented. </p>
<p>We have introduced a new column called <strong>Membership_ID</strong> which is the primary key for Table 1. Records can be uniquely identified in Table 1 using membership id. </p>
<h4 id="Database-Foreign-Key"><a href="#Database-Foreign-Key" class="headerlink" title="Database - Foreign Key"></a>Database - Foreign Key</h4><p>In Table 2, Membership ID is the <strong>Foreign Key</strong> : </p>
<p>Foreign Key references the primary key of another Table! It helps connect your tables</p>
<ul>
<li>A foreign key can have a different name from its primary key</li>
<li>It ensures rows in one table have corresponding rows in another</li>
<li>Unlike the Primary Key, they do not have to be unique. Most often they aren’t</li>
<li>Foreign keys can be null even though primary keys can not</li>
</ul>
<table>
<thead>
<tr>
<th align="center">Membership ID</th>
<th align="center">Movies Rented</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td align="center">Deadpool</td>
</tr>
<tr>
<td align="center">1</td>
<td align="center">Spider-Man</td>
</tr>
<tr>
<td align="center">2</td>
<td align="center">Call Me by Your Name</td>
</tr>
<tr>
<td align="center">2</td>
<td align="center">La La Land</td>
</tr>
<tr>
<td align="center">3</td>
<td align="center">Spider-Man</td>
</tr>
</tbody></table>
<p>(Table 2)</p>
<ul>
<li>Foreign Key references Primary Key</li>
<li>Foreign Key can only have values present in primary key</li>
<li>It could have a name other than that of Primary Key</li>
</ul>
<table>
<thead>
<tr>
<th align="center">Membership ID</th>
<th align="center">Name</th>
<th align="center">Physical Address</th>
<th align="center">Salutation</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td align="center">Janet</td>
<td align="center">Flat B, 6th Street</td>
<td align="center">Ms.</td>
</tr>
<tr>
<td align="center">2</td>
<td align="center">Robert</td>
<td align="center">3rd Street</td>
<td align="center">Mr.</td>
</tr>
<tr>
<td align="center">3</td>
<td align="center">Robert</td>
<td align="center">5th Avenue</td>
<td align="center">Mr.</td>
</tr>
</tbody></table>
<p>(Table 1)</p>
<h4 id="Why-need-a-foreign-key"><a href="#Why-need-a-foreign-key" class="headerlink" title="Why need a foreign key?"></a>Why need a foreign key?</h4><p>You will only be able to insert values into your foreign key that exist in the unique key in the parent table. That helps in referential integrity</p>
<ol>
<li><p>Insert a record in Table 2 where Membership ID = 101</p>
<table>
<thead>
<tr>
<th align="center">Membership ID</th>
<th align="center">Movies Rented</th>
</tr>
</thead>
<tbody><tr>
<td align="center">101</td>
<td align="center">Mission Impossible</td>
</tr>
</tbody></table>
</li>
<li><p>But Membership ID 101 is not present in Table 1</p>
<table>
<thead>
<tr>
<th align="center">Membership ID</th>
<th align="center">Name</th>
<th align="center">Physical Address</th>
<th align="center">Salutation</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td align="center">Janet</td>
<td align="center">FlatB, 6th Street</td>
<td align="center">Ms.</td>
</tr>
<tr>
<td align="center">2</td>
<td align="center">Robert</td>
<td align="center">3rd Street</td>
<td align="center">Mr.</td>
</tr>
<tr>
<td align="center">3</td>
<td align="center">Robert</td>
<td align="center">5th Avenue</td>
<td align="center">Mr.</td>
</tr>
</tbody></table>
<p> (Table 1)</p>
</li>
<li><p>Database will throw an ERROR. This helps in <strong>referential integrity</strong></p>
</li>
</ol>
<p>The above problem can be overcome by declaring membership ID from Table 2 as foreign key of membership ID from Table 1</p>
<p>Now, if somebody tries insert a value in the Membership ID field that does not exist in the parent table, an error will be shown.</p>
<h4 id="What-are-transitive-functional-dependencies"><a href="#What-are-transitive-functional-dependencies" class="headerlink" title="What are transitive functional dependencies?"></a>What are transitive functional dependencies?</h4><p>A <strong>transitive function dependency</strong> is when changing a non-key column, might cause any of the other non-key columns to change</p>
<p>Consider the table 1. Changing the non-key column Name may change Salutation</p>
<table>
<thead>
<tr>
<th align="center">Membership ID</th>
<th align="center">Name</th>
<th align="center">Physical Address</th>
<th align="center">Salutation</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td align="center">Janet</td>
<td align="center">Flat B, 6th Street</td>
<td align="center">Ms.</td>
</tr>
<tr>
<td align="center">2</td>
<td align="center">Robert</td>
<td align="center">3rd Street</td>
<td align="center">Mr.</td>
</tr>
<tr>
<td align="center">3</td>
<td align="center">Robert</td>
<td align="center">5th Avenue</td>
<td align="center">Mr.</td>
</tr>
</tbody></table>
<p>(Table 1)</p>
<p>Let’s move into <strong>3NF</strong></p>
<hr>
<h3 id="3NF-Third-Normal-Form-Rules"><a href="#3NF-Third-Normal-Form-Rules" class="headerlink" title="3NF(Third Normal Form) Rules"></a>3NF(Third Normal Form) Rules</h3><ul>
<li>Rule 1 - Follow 2NF</li>
<li>Rule 2 - Has <strong>no transitive functional dependencies</strong></li>
</ul>
<p>To move 2NF table into 3NF, we again need to divide the table</p>
<h4 id="3NF-Example"><a href="#3NF-Example" class="headerlink" title="3NF Example :"></a>3NF Example :</h4><table>
<thead>
<tr>
<th align="center">Membership ID</th>
<th align="center">Name</th>
<th align="center">Physical Address</th>
<th align="center">Salutation ID</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td align="center">Janet</td>
<td align="center">Flat B, 6th Street</td>
<td align="center">2</td>
</tr>
<tr>
<td align="center">2</td>
<td align="center">Robert</td>
<td align="center">3rd Street</td>
<td align="center">1</td>
</tr>
<tr>
<td align="center">3</td>
<td align="center">Robert</td>
<td align="center">5th Avenue</td>
<td align="center">1</td>
</tr>
</tbody></table>
<p>(Table 1)</p>
<table>
<thead>
<tr>
<th align="center">Membership ID</th>
<th align="center">Movies Rented</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td align="center">Deadpool</td>
</tr>
<tr>
<td align="center">1</td>
<td align="center">Spider-Man</td>
</tr>
<tr>
<td align="center">2</td>
<td align="center">Call Me by Your Name</td>
</tr>
<tr>
<td align="center">2</td>
<td align="center">La La Land</td>
</tr>
<tr>
<td align="center">3</td>
<td align="center">Spider-Man</td>
</tr>
</tbody></table>
<p>(Table 2)</p>
<table>
<thead>
<tr>
<th align="center">Salutation ID</th>
<th align="center">Salutation</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td align="center">Mr.</td>
</tr>
<tr>
<td align="center">2</td>
<td align="center">Ms.</td>
</tr>
<tr>
<td align="center">3</td>
<td align="center">Mrs.</td>
</tr>
<tr>
<td align="center">4</td>
<td align="center">Dr.</td>
</tr>
</tbody></table>
<p>(Table 3)</p>
<p>We have again divided our tables and created a new table which stores Salutations. There are no transitive functional dependencies, and hence our table is in 3NF. In Table 3 Salutation ID is primary key, and in Table 1 Salutation ID is the foreign to primary key in Table 3. </p>
<p>Now our little example is at a level that cannot further be <strong>decomposed</strong> to attain higher forms of normalization. Infact, it is already in higher normalization forms. Separate efforts for moving into next levels of normalizing data are normally needed in complex databases.</p>
<hr>
<h3 id="Boyce-Codd-Normal-Form-BCNF"><a href="#Boyce-Codd-Normal-Form-BCNF" class="headerlink" title="Boyce-Codd Normal Form(BCNF)"></a>Boyce-Codd Normal Form(BCNF)</h3><p>Even when a database is in 3rd Normal Form, still there would be anomalies resulted if it has more than one Candidate Key.</p>
<p>Sometimes BCNF is also referred as 3.5 Normal Form.</p>
<hr>
<h3 id="4NF-Fourth-Normal-Form-Rules"><a href="#4NF-Fourth-Normal-Form-Rules" class="headerlink" title="4NF(Fourth Normal Form) Rules"></a>4NF(Fourth Normal Form) Rules</h3><p>If no database table instance contains two or more, independent and multivalued data describing the relevant entity, then it is in 4th NF.</p>
<hr>
<h3 id="5NF-Fifth-Normal-Form-Rules"><a href="#5NF-Fifth-Normal-Form-Rules" class="headerlink" title="5NF(Fifth Normal Form) Rules"></a>5NF(Fifth Normal Form) Rules</h3><p>A table is in 5th Normal Form only if it is in 4NF and it cannot be decomposed into any number of smaller tables without loss of data.</p>
<hr>
<h3 id="6NF-Sixth-Normal-Form-Rules"><a href="#6NF-Sixth-Normal-Form-Rules" class="headerlink" title="6NF(Sixth Normal Form) Rules"></a>6NF(Sixth Normal Form) Rules</h3><p>Normally, it wouldn’t be used. </p>
<hr>
<h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><ul>
<li>Database designing is critical to the successful implementation of a database management system that meets the data requirements of an enterprise system</li>
<li>Normalization helps produce database systems that are cost-effective and have better security modles</li>
<li>Functional dependencies are a very important component of the normalize data process</li>
<li>Most database systems are normalized database up to the third normal forms</li>
<li>A primary key uniquely identifies record in a Table and cannot be null</li>
<li>A foreign key helps connect table and references a primary key</li>
</ul>
]]></content>
      <categories>
        <category>SQL</category>
        <category>Database</category>
      </categories>
      <tags>
        <tag>Database Normalization</tag>
        <tag>SQL</tag>
        <tag>1NF</tag>
        <tag>2NF</tag>
        <tag>3NF</tag>
      </tags>
  </entry>
  <entry>
    <title>ASCII, ANSI and Unicode</title>
    <url>/category/ASCII-ANSI-and-Unicode/</url>
    <content><![CDATA[<h3 id="Character-Encoding"><a href="#Character-Encoding" class="headerlink" title="Character Encoding"></a>Character Encoding</h3><p>A character encoding tells the computer how to interpret raw zeroes and ones into real characters. It usually does this by pairing numbers with characters. Words and sentences in text are created from characters and these characters are grouped into a character set. There are many different types of character encodings floating arounds at present, but the ones we deal most frequently with are ASCII, <strong>8-bit</strong> encodings, and Unicode-based encodings.</p>
<a id="more"></a>

<h3 id="ASCII"><a href="#ASCII" class="headerlink" title="ASCII"></a>ASCII</h3><p><strong>American Standard Code for Information Interchange(ASCII)</strong> is a character-encoding scheme and it was the first character encoding standard. It is a code for representing English characters as numbers, with each letter assigned a number from 0-127. Most modern character-encoding schemes are based on ASCII, though they support many additional characters. It is a single byte encoding only using the bottom <strong>7 bits</strong>. In an ASCII file, each alphabetic, numeric, or special character is represented with a <strong>7-bit</strong> binay number. </p>
<h3 id="ANSI"><a href="#ANSI" class="headerlink" title="ANSI"></a>ANSI</h3><ul>
<li>ANSI(American National Standards Institute) codes are standardized numeric or alphabetic codes issued by the American National Standards Institute to ensure uniform identification. </li>
<li>This is essentially an extension of the ASCII character set in that it includes all the ASCII characters with an additional 128 character codes. </li>
<li>ASCII just defines a 7 bit code page with 128 symbols. <strong>ANSI</strong> extends this to <strong>8 bit</strong> and there are serveral different code page for the symbols 128 to 255. It can only represent a maximum of 256 characters. </li>
<li>ANSI is very old and is used by OS like Windows 95/98 and older. </li>
</ul>
<h3 id="Unicode"><a href="#Unicode" class="headerlink" title="Unicode"></a>Unicode</h3><ul>
<li>Unicode is a newer encoding which defines the internal text coding system in almost all OS used in computers at present, whether it is Windows, Unix, Macintosh, Linux or whatever, because Unicode can handle characters for almost all modern languages and even some ancient languages at the same time, as long as the client has fonts for the particular language installed in his system.</li>
<li>Unicode uses a maximum of <strong>32 bits</strong> for each code point</li>
</ul>
<h3 id="UTF"><a href="#UTF" class="headerlink" title="UTF"></a>UTF</h3><p>Unicode assigns each character a unique number, or code point. It defines two mapping methods, the <strong>UTF(Unicode Transformation Format) encodings</strong>, and the <strong>UCS(Universal Character Set)</strong> encodings. Unicode-based encodings implement the Unicode standard and include <strong>UTF-8</strong>, <strong>UTF-16</strong> and <strong>UTF-32/UCS-4</strong>. They go beyond <strong>8-bits</strong> and support almost every language in the world. UTF-8 is gaining traction as the dominant international encoding of the web. UTF-8, UTF-16 and UTF-32 are probably the most commonly used encodings.</p>
<h4 id="UTF-8"><a href="#UTF-8" class="headerlink" title="UTF-8"></a>UTF-8</h4><ul>
<li>Uses <strong>1 byte</strong> to represesnt characters in the ASCII set, <strong>two bytes</strong> for characters in several more alphabetic blocks, and <strong>three bytes</strong> for the rest of the BMP. Supplementary characters use <strong>4 bytes</strong>. </li>
<li>UTF-8 uses a <strong>multibyte encoding scheme</strong> makes it possible to accommodate all these code point yet manages to consume minimal memory. The first byte of UTF-8 matches ASCII exactly, hence the most common characters only need a single byte. </li>
</ul>
<h4 id="UTF-16"><a href="#UTF-16" class="headerlink" title="UTF-16"></a>UTF-16</h4><p>Uses <strong>2 bytes</strong> for any character in the BMP, and 4 bytes for supplementary characters.</p>
<h4 id="UTF-32"><a href="#UTF-32" class="headerlink" title="UTF-32"></a>UTF-32</h4><p>Uses <strong>4 bytes</strong> for all characters. </p>
]]></content>
      <categories>
        <category>Encoding</category>
      </categories>
      <tags>
        <tag>ASCII</tag>
        <tag>ANSI</tag>
        <tag>Unicode</tag>
        <tag>UTF</tag>
      </tags>
  </entry>
  <entry>
    <title>[LeetCode] 35. Search Insert Position</title>
    <url>/category/LeetCode-35-Search-Insert-Position/</url>
    <content><![CDATA[<h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>Given a sorted array and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.</p>
<p>You may assume no duplicates in the array.</p>
<a id="more"></a>

<hr>
<h4 id="Example-1"><a href="#Example-1" class="headerlink" title="Example 1"></a>Example 1</h4><p>Input: [1,3,5,6], 5<br>Output: 2</p>
<h4 id="Example-2"><a href="#Example-2" class="headerlink" title="Example 2"></a>Example 2</h4><p>Input: [1,3,5,6], 2<br>Output: 1</p>
<h4 id="Example-3"><a href="#Example-3" class="headerlink" title="Example 3"></a>Example 3</h4><p>Input: [1,3,5,6], 7<br>Output: 4</p>
<h4 id="Example-4"><a href="#Example-4" class="headerlink" title="Example 4"></a>Example 4</h4><p>Input: [1,3,5,6], 0<br>Output: 0</p>
<hr>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">searchInsert</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> right = nums.length - <span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> pivot = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (nums[pivot] == target) <span class="keyword">return</span> pivot;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (nums[pivot] &gt; target) right = pivot - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (nums[pivot] &lt; target) left = pivot + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> left;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode Easy</category>
        <category>Binary Search</category>
      </categories>
      <tags>
        <tag>LeetCode(Easy)</tag>
        <tag>Binary Search</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL Commands</title>
    <url>/category/SQL-Commands/</url>
    <content><![CDATA[<h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>Structured Query Language(SQL) as we all know is the database language by the use of wich we can perform certain operations on the existing database and also we can use this language to create a database. SQL uses certain commands like Create, Drop, Insert stc. to carry out the required tasks. </p>
<a id="more"></a>

<hr>
<p>These SQL commands are mainly categorized into four categories as:</p>
<ol>
<li>DDL - Data Definition Language</li>
<li>DQL - Data Query Language</li>
<li>DML - Data Manipulation Language</li>
<li>DCL - Data Control Language</li>
</ol>
<p>Though many resources claim there to be another category of SQL clauses TCL - Transaction Control Language.</p>
<p><img src="https://i.imgur.com/uZg5Qre.png" alt="Types of SQL Commands"></p>
<hr>
<h3 id="1-DDL-Data-Definition-Language"><a href="#1-DDL-Data-Definition-Language" class="headerlink" title="1. DDL(Data Definition Language)"></a>1. DDL(Data Definition Language)</h3><p>DDL or Data Definition Language actually consists of the SQL commands that can be used to define the database schema. It simpy deals with descriptions of the database schema and is used to create and modify the structure of database objects in the database.</p>
<p><strong>Examples of DDL commands:</strong></p>
<ul>
<li>CREATE - is used to create the database or its objects (like table, index, function, views, store procedure and triggers)</li>
<li>DROP - is used to delete objects from the database</li>
<li>ALTER - is used to alter the structure of the database</li>
<li>TRANCATE - is used to remove all records from a table, including all spaces allocated for the records are removed</li>
<li>COMMENT - is used to add comments to the data dictionary</li>
<li>RENAME - is used to rename an object existing in the database</li>
</ul>
<hr>
<h3 id="2-DQL-Data-Query-Language"><a href="#2-DQL-Data-Query-Language" class="headerlink" title="2. DQL (Data Query Language)"></a>2. DQL (Data Query Language)</h3><p>DQL statements are used for performing queries on the data within schema objects. The purpose of DQL Command is to get some schema relation based on the query passed to it.</p>
<p><strong>Eample of DQL:</strong></p>
<ul>
<li>SELECT - is used to retrieve data from the database</li>
</ul>
<hr>
<h3 id="3-DML-Data-Manipulation-Language"><a href="#3-DML-Data-Manipulation-Language" class="headerlink" title="3. DML(Data Manipulation Language)"></a>3. DML(Data Manipulation Language)</h3><p>The SQL commands that deals with the manipulation of data present in the database belong to DML or Data Manipulation Language and this includes most of the SQL statements.</p>
<p><strong>Eamples of DML:</strong></p>
<ul>
<li>INSERT - is used to insert data into a table</li>
<li>UPDATE - is used to update existing data within a table</li>
<li>DELETE - is used to delete records from a database table</li>
</ul>
<hr>
<h3 id="4-DCL-Data-Control-Language"><a href="#4-DCL-Data-Control-Language" class="headerlink" title="4. DCL(Data Control Language)"></a>4. DCL(Data Control Language)</h3><p>DCL included commands such as GRANT and REVOKE which mainly deals with the rights, permissions and other controls of the database system.</p>
<p><strong>Examples:</strong></p>
<ul>
<li>GRANT - gives user’s access privileges to database</li>
<li>REVOKE - withdraw user’s access privileges given by using the GRANT command</li>
</ul>
<hr>
<h3 id="5-TCC-Transaction-Control-Commands"><a href="#5-TCC-Transaction-Control-Commands" class="headerlink" title="5. TCC(Transaction Control Commands)"></a>5. TCC(Transaction Control Commands)</h3><p>TCL commands deals with the transaction within the database</p>
<p><strong>Examples of TCL commands:</strong></p>
<ul>
<li>COMMIT - commits a transaction</li>
<li>ROLLBACK - rollbacks a transaction in case of anu error occurs</li>
<li>SAVEPOINT - set a savepoint within a transaction</li>
<li>SET TRANSACTION - specify characteristics for the transaction</li>
</ul>
]]></content>
      <categories>
        <category>SQL</category>
      </categories>
      <tags>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>[LeetCode] 4. Median of Two Sorted Arrays</title>
    <url>/category/LeetCode-4-Median-of-Two-Sorted-Arrays/</url>
    <content><![CDATA[<h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>There are two sorted arrays <strong>nums1</strong> and <strong>nums2</strong> of size m and n respectively.<br>Find the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).<br>You may assume <strong>nums1</strong> and <strong>nums2</strong> cannot be both empty.</p>
<a id="more"></a>
<hr>
<h4 id="Example-1"><a href="#Example-1" class="headerlink" title="Example 1"></a>Example 1</h4><p>nums1 = [1, 3]<br>nums2 = [2]</p>
<p>The median is 2.0</p>
<h4 id="Example-2"><a href="#Example-2" class="headerlink" title="Example 2"></a>Example 2</h4><p>nums1 = [1, 2]<br>nums2 = [3, 4]  </p>
<p>The median is (2 + 3)/2 = 2.5</p>
<hr>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>Find the median of two sorted arrays:</p>
<p>eg.<br>arr1 = [1, 3, 5]<br>arr2 = [2, 4, 6]</p>
<p>[1, 2, 3, 4, 5, 6] (merge in a sorted order)</p>
<p>median(arr1, arr2) = (3+4) / 2 = 3.5 </p>
<p>There are some questions we need to consider. In this case, the problem definition doesn’t specify that the two arrays are the same length. If it’s not the same length, we need to do it in a clever way. Second, the arrays are arrays of integers and we’re going to return a double in this case because we’re doing an average.</p>
<p>Normal way:<br>Merge two arrays into one sorted array and it will take linear time. The median will be the middle element(size is odd) or the average of middle two elements(size is even). </p>
<p>Another example:<br>arr1 = [1, 2, 3, 4, 5, 6]<br>Median: 3.5</p>
<p>arr2 = [0, 0, 0, 0, 10, 10]<br>Median: 0</p>
<p>We can see that the median of the first array is bigger than the second array, that means that the first array must have more elements on the high side than the second array. So we can find that the median of the first arrays must be in the lesser half of the array. And for the second array, the median must be in the greater half of the array. Otherwise the medians would be equal. This means both arrays have the same spacing of the elements on either side of the median. And if the median is the same for both array, the median for both array stay the same.  </p>
<p>[To Be Continue]</p>
]]></content>
      <categories>
        <category>LeetCode Hard</category>
        <category>Binary Search</category>
      </categories>
      <tags>
        <tag>Binary Search</tag>
        <tag>LeetCode(Hard)</tag>
      </tags>
  </entry>
  <entry>
    <title>[LeetCode] 349. Intersection of Two Arrays</title>
    <url>/category/LeetCode-349-Intersection-of-Two-Arrays/</url>
    <content><![CDATA[<h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>Given two arrays, write a function to compute their intersection.</p>
<a id="more"></a>
<hr>
<h4 id="Example-1"><a href="#Example-1" class="headerlink" title="Example 1"></a>Example 1</h4><p>Input: nums1 = [1,2,2,1], nums2 = [2,2]<br>Output: [2]</p>
<h4 id="Example-2"><a href="#Example-2" class="headerlink" title="Example 2"></a>Example 2</h4><p>Input: nums1 = [4,9,5], nums2 = [9,4,9,8,4]<br>Output: [9,4]</p>
<h4 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h4><p>Each element in the result must be unique.<br>The result can be in any order.</p>
<hr>
<h3 id="Solutions"><a href="#Solutions" class="headerlink" title="Solutions"></a>Solutions</h3><p>Time: O(nlogn)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] intersection(<span class="keyword">int</span>[] nums1, <span class="keyword">int</span>[] nums2) &#123;</span><br><span class="line">        HashSet&lt;Integer&gt; set = <span class="keyword">new</span> HashSet&lt;Integer&gt;();</span><br><span class="line">        Arrays.sort(nums1);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// loop num2 find if element in nums2 also in num1</span></span><br><span class="line">        <span class="comment">// if yes add to set</span></span><br><span class="line">        <span class="keyword">for</span> (Integer num : nums2)</span><br><span class="line">        &#123;</span><br><span class="line">           <span class="keyword">if</span> (binarySearch(nums1, num))</span><br><span class="line">           &#123;</span><br><span class="line">               set.add(num);</span><br><span class="line">           &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// convert HashSet to array</span></span><br><span class="line">        <span class="keyword">int</span>[] result = <span class="keyword">new</span> <span class="keyword">int</span>[set.size()];</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> n : set)</span><br><span class="line">        &#123;</span><br><span class="line">            result[i++] = n;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">binarySearch</span> <span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>, pivot = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> right = nums.length - <span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right)</span><br><span class="line">        &#123;</span><br><span class="line">            pivot = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (target &gt; nums[pivot])</span><br><span class="line">            &#123;</span><br><span class="line">                left = pivot + <span class="number">1</span>;</span><br><span class="line">            &#125; </span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (target &lt; nums[pivot])</span><br><span class="line">            &#123;</span><br><span class="line">                right = pivot - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> </span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode Easy</category>
        <category>Binary Search</category>
      </categories>
      <tags>
        <tag>LeetCode(Easy)</tag>
        <tag>Binary Search</tag>
      </tags>
  </entry>
  <entry>
    <title>How to improve SQL queries performance</title>
    <url>/category/How%20to%20improve%20SQL%20queries%20perofrmace/</url>
    <content><![CDATA[<h2 id="1-Only-Retrieve-The-Data-You-Need"><a href="#1-Only-Retrieve-The-Data-You-Need" class="headerlink" title="1. Only Retrieve The Data You Need"></a>1. Only Retrieve The Data You Need</h2><p>The mindset of “the more data, the better” isn’t the correct way when you’re writing SQL query. You SQL performance might suffer from the fact that your query is trying to pull to too much data. So that’s why it’s generally a good idea to look out for the <strong>SELECT</strong> statement, the <strong>DISTINCT</strong> and <strong>UNION</strong> clause and the <strong>LIKE</strong> operator</p>
<a id="more"></a>

<h3 id="The-SELECT-Statement"><a href="#The-SELECT-Statement" class="headerlink" title="The SELECT Statement"></a>The SELECT Statement</h3><p>The first thing you can check when you have written your query is whether the <strong>SELECT</strong> statement is as compact as possible. Do not get used to <code>select *</code> because in the most cases, you don’t need that and the unnecessary columns places extra loads on the database which will slown down the single SQL and the system. Besides, it can increase the consumption of extra I/O, memory and CPU as well. It’s better for you to specify the columns you want. </p>
<h3 id="The-DISTINCT-and-UNION-clause"><a href="#The-DISTINCT-and-UNION-clause" class="headerlink" title="The DISTINCT and UNION clause"></a>The DISTINCT and UNION clause</h3><p><strong>DISTINCT</strong> and <strong>UNION</strong> should be used only if it is necessary. <strong>DISTINCT</strong> and <strong>UNION</strong> operators cause sorting, which slows down the SQL execution. </p>
<p>The <code>SELECT DISTINCT</code> statement is used to return only distinct(different) values. The execution time only increases if you add this clause to your query. <strong>DISTINCT</strong> works by grouping all fields in the query to create distinct results. To accomplish this goal however, a large amount of processing power is required. </p>
<p>It’s therefore always a good idea to consider whether you need this <code>DISTINCT</code>.<br>Use <strong>UNION ALL</strong> instead of <strong>UNION</strong>, if possible, as it is much more efficient.  </p>
<h3 id="The-LIKE-operator"><a href="#The-LIKE-operator" class="headerlink" title="The LIKE operator"></a>The LIKE operator</h3><p>The predicate <strong>LIKE</strong> <code>&#39;%abc&#39;</code> causes a full table scan. So try to avoid using wildcard(%) at the beginning of a predicate. </p>
<h2 id="2-Limit-Your-Results"><a href="#2-Limit-Your-Results" class="headerlink" title="2. Limit Your Results"></a>2. Limit Your Results</h2><ul>
<li>You can add <code>LIMIT</code> or <code>TOP</code> clauses to your query to set a maximum number of rows for the result set. </li>
<li>Additionally, you can also add the <code>ROWNUM</code>clause, which is equivalent to using <code>LIMIT</code>in your query. See the examples below. </li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT * FROM Users</span><br><span class="line">WHERE age = 25 AND ROWNUM &lt;= 5;</span><br><span class="line"></span><br><span class="line">SELECT * FROM Users LIMIT 5</span><br><span class="line">WHERE age = 25 AND;</span><br></pre></td></tr></table></figure>

<h2 id="3-Don’t-Make-Queries-More-Complex-Than-They-Need-To-Be"><a href="#3-Don’t-Make-Queries-More-Complex-Than-They-Need-To-Be" class="headerlink" title="3. Don’t Make Queries More Complex Than They Need To Be"></a>3. Don’t Make Queries More Complex Than They Need To Be</h2><p>Try to keep your query simple and efficient</p>
<h2 id="4-Create-joins-with-INNER-JOIN-rather-than-WHERE"><a href="#4-Create-joins-with-INNER-JOIN-rather-than-WHERE" class="headerlink" title="4. Create joins with INNER JOIN rather than WHERE"></a>4. Create joins with INNER JOIN rather than WHERE</h2><p>I used to prefer to make joins with <strong>WHERE</strong> clause, such as the following:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT dwColumns.ID, dwColumns.Name, dwTables.ID, dwTables.Name</span><br><span class="line">FROM dwTables, dwColumns</span><br><span class="line">WHERE dwTables.ID = dwColumns.tableID</span><br></pre></td></tr></table></figure>

<p>This type of join creates a Cartesian Join, also called a Cartesian Product or <strong>CROSS JOIN</strong>. In Cartesian Join, all possible combinations of the variables are creates. In this example, if we had 1,000 tables with 100 columns for each table, the query would first genrate 100,000 results, then filter for the 1,000 records where the table ID is correctly joined. This is an inefficient use of database resources. Cartesian Joins are especially problematic in large-scale databases, because a Cartesian Join of two large tables could create billions or trillions of results. </p>
<p>To avoid creating a Cartesion Join, <strong>INNER JOIN</strong> should be used instead:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT dwTables.ID, dwTables.Name, dwTables.ID, dwTables.Name</span><br><span class="line">FROM dwTables</span><br><span class="line">    INNER JOIN dwColumns</span><br><span class="line">    ON dwTables.ID = dwColumns.tableID</span><br></pre></td></tr></table></figure>

<h2 id="5-Avoid-using-wildcard-at-the-beginning-of-a-predicate"><a href="#5-Avoid-using-wildcard-at-the-beginning-of-a-predicate" class="headerlink" title="5. Avoid using wildcard(%) at the beginning of a predicate."></a>5. Avoid using wildcard(%) at the beginning of a predicate.</h2><p>The predicate LIKE ‘%abc’ causes full table scan. </p>
<p>When a leading wildcard is used, especially in combination with an ending wildcard, the database is tasked with searching all records for a match anywhere within the selected fields. </p>
<p>For example:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT * FROM TABLE1 WHERE COL1 LIKE &apos;%abc&apos;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>SQL</category>
      </categories>
      <tags>
        <tag>SQL</tag>
      </tags>
  </entry>
</search>
