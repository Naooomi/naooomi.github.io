<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>[LeetCode] 1207. Unique Number of Occurrences</title>
    <url>/category/LeetCode-1207-Unique-Number-of-Occurrences/</url>
    <content><![CDATA[<h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>Given an array of integers <strong>arr</strong>, write a function that returns true if and only if the number of occurrences of each value in the array is unique.</p>
<a id="more"></a>

<h4 id="Example-1"><a href="#Example-1" class="headerlink" title="Example 1"></a>Example 1</h4><p>Input: arr = [1,2,2,1,1,3]<br>Output: true</p>
<p>Explanation: The value 1 has 3 occurrences, 2 has 2 and 3 has 1. No two values have the same number of occurrences.</p>
<h4 id="Example-2"><a href="#Example-2" class="headerlink" title="Example 2"></a>Example 2</h4><p>Input: arr = [1,2]<br>Output: false</p>
<h4 id="Example-3"><a href="#Example-3" class="headerlink" title="Example 3"></a>Example 3</h4><p>Input: arr = [-3,0,1,-3,1,1,1,-3,10,0]<br>Output: true</p>
<h4 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h4><ul>
<li>1 &lt;= arr.length &lt;= 1000</li>
<li>-1000 &lt;= arr[i] &lt;= 1000</li>
</ul>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">uniqueOccurrences</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">        Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;Integer, Integer&gt;();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            map.put(arr[i], map.getOrDefault(arr[i], <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> count = map.size();</span><br><span class="line">        Set&lt;Integer&gt; set = <span class="keyword">new</span> HashSet(map.values());</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> set.size() &lt; count ? <span class="keyword">false</span> : <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode Easy</category>
        <category>Hashing</category>
      </categories>
      <tags>
        <tag>Hashing</tag>
        <tag>LeetCode(Easy)</tag>
      </tags>
  </entry>
  <entry>
    <title>[LeetCode] 961. N-Repeated Element in Size 2N Array</title>
    <url>/category/LeetCode-961-N-Repeated-Element-in-Size-2N-Array/</url>
    <content><![CDATA[<h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>In a array A of size <strong>2N</strong>, there are <strong>N+1</strong> unique elements, and exactly one of these elements is repeated <strong>N</strong> times.</p>
<p>Return the element repeated <strong>N</strong> times.</p>
<a id="more"></a>

<h4 id="Example-1"><a href="#Example-1" class="headerlink" title="Example 1"></a>Example 1</h4><p>Input: [1,2,3,3]<br>Output: 3</p>
<h4 id="Example-2"><a href="#Example-2" class="headerlink" title="Example 2"></a>Example 2</h4><p>Input: [2,1,2,5,3,2]<br>Output: 2</p>
<h4 id="Example-3"><a href="#Example-3" class="headerlink" title="Example 3"></a>Example 3</h4><p>Input: [5,1,5,2,5,3,5,4]<br>Output: 5</p>
<h4 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h4><ol>
<li>4 &lt;= <strong>A.length</strong> &lt;= 10000</li>
<li>0 &lt;= <strong>A[i]</strong> &lt; 10000</li>
<li><strong>A.length</strong> is even</li>
</ol>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">repeatedNTimes</span><span class="params">(<span class="keyword">int</span>[] A)</span> </span>&#123;</span><br><span class="line">        Map&lt;Integer, Integer&gt; count = <span class="keyword">new</span> HashMap();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> x : A)</span><br><span class="line">        &#123;</span><br><span class="line">            count.put(x, count.getOrDefault(x, <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i : count.keySet())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (count.get(i) &gt; <span class="number">1</span>)</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Time-Complexity"><a href="#Time-Complexity" class="headerlink" title="Time Complexity"></a>Time Complexity</h3><p><strong>O(N)</strong>, where N is the length of A</p>
<h3 id="Space-Complexity"><a href="#Space-Complexity" class="headerlink" title="Space Complexity"></a>Space Complexity</h3><p>Space Complexity: <strong>O(N)</strong></p>
]]></content>
      <categories>
        <category>LeetCode Easy</category>
        <category>Hashing</category>
      </categories>
      <tags>
        <tag>Hashing</tag>
        <tag>LeetCode(Easy)</tag>
      </tags>
  </entry>
  <entry>
    <title>[LeetCode] 760. Find Anagram Mappings</title>
    <url>/category/LeetCode-760-Find-Anagram-Mappings/</url>
    <content><![CDATA[<h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>Given two lists <strong>A</strong> and <strong>B</strong>, and <strong>B</strong> is an anagram of <strong>A</strong>. <strong>B</strong> is an anagram of <strong>A</strong> means <strong>B</strong> is made by randomizing the order of the elements in <strong>A</strong>.<br>We want to find an index mapping <strong>P</strong>, from <strong>A</strong> to <strong>B</strong>.<br><strong>A</strong> mapping <strong>P[i] = j</strong> means the ith element in <strong>A</strong> appears in <strong>B</strong> at index j.<br>These lists <strong>A</strong> and <strong>B</strong> may contain duplicates. If there are multiple answers, output any of them.</p>
<a id="more"></a>

<h4 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h4><p>For example, given</p>
<blockquote>
<p>A = [12, 28, 46, 32, 50]<br>B = [50, 12, 32, 46, 28]</p>
</blockquote>
<p>We should return</p>
<blockquote>
<p>[1, 4, 3, 2, 0]</p>
</blockquote>
<p>as <strong>P[0] = 1</strong> because the 0th element of <strong>A</strong> appears at <strong>B[1]</strong>, and <strong>P[1]</strong> = <strong>4</strong> because the 1st element of A appears at <strong>B[4]</strong>, and so on.</p>
<h4 id="Note"><a href="#Note" class="headerlink" title="Note:"></a>Note:</h4><p><strong>A</strong>, <strong>B</strong> have equal lengths in range <strong>[1, 100]</strong>.<br><strong>A[i]</strong>, <strong>B[i]</strong> are integers in range <strong>[0, 10^5]</strong>.</p>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p><strong>P[i] = j</strong>, <strong>A[i] = B[j]</strong>. Traverse list <strong>A</strong>, map each value of <strong>A</strong> to its index in <strong>B</strong>.<br>And before that, we need to traverse <strong>B</strong>, and find a hash table that can map value of <strong>B</strong> to its index</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] anagramMappings(<span class="keyword">int</span>[] A, <span class="keyword">int</span>[] B) &#123;</span><br><span class="line">        <span class="comment">// key is the index value from B</span></span><br><span class="line">        <span class="comment">// value is the index from B</span></span><br><span class="line">        Map&lt;Integer, Integer&gt; mapB = <span class="keyword">new</span> HashMap();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; B.length; i++)</span><br><span class="line">            mapB.put(B[i], i);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[] result = <span class="keyword">new</span> <span class="keyword">int</span>[A.length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; A.length; j++)</span><br><span class="line">            result[j] = mapB.get(A[j]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Time-Complexity"><a href="#Time-Complexity" class="headerlink" title="Time Complexity"></a>Time Complexity</h3><p>Traverse list <strong>A</strong> and <strong>B</strong> : <strong>O(n)</strong></p>
<h3 id="Space-Complexity"><a href="#Space-Complexity" class="headerlink" title="Space Complexity"></a>Space Complexity</h3><p>Use a hash table to store the mapping from value of <strong>B</strong> to its index: <strong>O(n)</strong></p>
]]></content>
      <categories>
        <category>LeetCode Easy</category>
        <category>Hashing</category>
      </categories>
      <tags>
        <tag>Hashing</tag>
        <tag>LeetCode(Easy)</tag>
      </tags>
  </entry>
  <entry>
    <title>Hashing Data Structure | Part 1 (Introduction)</title>
    <url>/category/Hashing-Data-Structure-Part-1-Introduction/</url>
    <content><![CDATA[<h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>Hashing is an important Data Structure which is designed to use a special function called the <strong>Hash Function</strong> which is used to map a given value with a particular key for faster access of elements. The efficiency of mapping depends of the efficiency of the hash function used.</p>
<a id="more"></a>

<p><strong>Hashing</strong> - provides <strong>O(1)</strong> time on average for insert, search and delete<br><strong>Hashing Function</strong> - hash function maps a big number or string to a small integer that can be used as index in hash table</p>
<p>Suppose we want to design a system for storing employee records keyed using phone numbers. And we want following queries to be performed efficiently:</p>
<blockquote>
<ul>
<li>Insert a phone number and corresponding information</li>
<li>Search a phone number and fetch the information</li>
<li>Delete a phone number and related information</li>
</ul>
</blockquote>
<p>We can think of using the following data structures to maintain information about different phone numbers. </p>
<blockquote>
<ol>
<li>Array of phone numbers and records</li>
<li>Linked list of phone numbers and records</li>
<li>Balanced binary search tree with phone numbers as keys</li>
<li>Direct Access Table</li>
</ol>
</blockquote>
<p>For <strong>arrays and linked lists</strong>, we need to search a linear fashion, which can be costly in practice. If we use arrays and keep the data sorted, then a phone number can be search in <strong>O(logn)</strong> time using Binary Search, but insert and delete operations become costly as we have to maintain sorted order. </p>
<p>With <strong>balanced binary search tree</strong>, we get moderate search, insert and delete times. All of these operations can be guaranteed to be in <strong>O(logn)</strong> time.</p>
<p>Another solution that one can think of is to use a <strong>direct access table</strong> where we make a big array and use phone numbers as index in the array. An entry in arrays is NIL if phone number is not present, else the array entry stores pointer to records corresponding to phone number. Time complexity wise this solution is the best among all, we can do all operations in <strong>O(1)</strong>. For example to insert a phone number, we create a record with details of given phone number, use phone number as index and store the pointer to the created record in table.<br>This solution has many practical limitations. First problem with this solution is extra space required is huge. For example if phone number is n digits, we need <strong>O(m*10^n)</strong> space for table where <strong>m</strong> is size of a pointer to record. Another problem is an integer in a programming language may not store n digits.<br>Due to above limitations Direct Access Table cannot always be used. Hashing is the solution that can be used in almost all such situations and performs extremely well compared to above data structures like Array, Linked List, Balanced BST in practice. With hashing we get <strong>O(1)</strong> search time on average(under reasonable assumptions) and <strong>O(n)</strong> in worst case. </p>
<p>Hashing is an improvement over Direct Access Table. The idea is to use hash function that converts a given phone number or any other key to a smaller number and uses the small number as index in a table called hash table. </p>
<h3 id="Hash-Function"><a href="#Hash-Function" class="headerlink" title="Hash Function"></a>Hash Function</h3><p>A function that converts a given big phone number to a small practical integer value. The mapped integer value is used as an index in hash table. In simple terms, a hash function maps a big number or string to a small integer that can be used as index in hash table. </p>
<p>A good hash function should have following properties:</p>
<blockquote>
<ol>
<li>Efficiently computable</li>
<li>Should uniformly distribute the keys(Each table position equally likely for each key)</li>
</ol>
</blockquote>
<p>For example for phone numbers a bad hash function is to take first three digits. A better function is consider last three digits. Please note the this may not be the best hash function. There may be better ways.</p>
<h3 id="Hash-Table"><a href="#Hash-Table" class="headerlink" title="Hash Table"></a>Hash Table</h3><p>An array that stores pointers to records corresponding to a given phone number. An entry in hash table is NIL if no existing phone number has hash function value equal to the index for the entry. </p>
<h4 id="Collision-Handling"><a href="#Collision-Handling" class="headerlink" title="Collision Handling"></a>Collision Handling</h4><p>Since a hash function gets us a small number for a big key, there is possibility that two keys result in same value. The situation where a newly inserted key maps to an already occupied slot in hash table is called collision and must be handled using some collision handling technique. Following are the ways to handle collisions:</p>
<blockquote>
<ul>
<li><strong>Chaining</strong> : The idea is to make each cell of hash table point to a <strong>linked list</strong> of records that have same hash function value. Chaining is simple, but requires additional memory outside the table.</li>
<li><strong>Open Addressing</strong> : In open addressing, all elements are stored in the hash table itself. Each table entry contains either a record or NIL. When searching for an element, we one by one examine table slots until the desired element is found or it is clear that the element is not in the table. </li>
</ul>
</blockquote>
<ul>
<li>Linear Probing</li>
<li>Quadratic Probing</li>
<li>Double Hashing</li>
</ul>
]]></content>
      <categories>
        <category>Data Structure</category>
        <category>Hashing</category>
      </categories>
      <tags>
        <tag>Data Stracture</tag>
        <tag>Hashing</tag>
      </tags>
  </entry>
  <entry>
    <title>Database Normalization Explained</title>
    <url>/category/Database-Normalization-Explained/</url>
    <content><![CDATA[<p><strong>Normalization</strong> is a database design technique which organizes tables in a manner that avoids data redundancy, insertion anomaly, update anomaly and deletion anomaly.</p>
<a id="more"></a>

<h2 id="Anomalies-in-DBMS"><a href="#Anomalies-in-DBMS" class="headerlink" title="Anomalies in DBMS"></a>Anomalies in DBMS</h2><p>There are three types of anomalies that occur when the database is not normalized. These are <strong>Insertion</strong>, <strong>Update</strong> and <strong>Deletion</strong> anomaly. </p>
<p><strong>Example :</strong></p>
<p>Suppose a manufacturing company stores the employee details in a table named employee that has four attributes: emp_id for storing employee’s id, emp_name for storing employee’s name, emp_address for storing employee’s address and emp_dept for storing the department details in which the employee works. At some point of time the table looks like this: </p>
<table>
<thead>
<tr>
<th align="center">emp_id</th>
<th align="center">emp_name</th>
<th align="center">emp_address</th>
<th align="center">emp_dept</th>
</tr>
</thead>
<tbody><tr>
<td align="center">101</td>
<td align="center">Rick</td>
<td align="center">AddressA</td>
<td align="center">D001</td>
</tr>
<tr>
<td align="center">101</td>
<td align="center">Rick</td>
<td align="center">AddressA</td>
<td align="center">D002</td>
</tr>
<tr>
<td align="center">123</td>
<td align="center">Maggie</td>
<td align="center">AddressB</td>
<td align="center">D890</td>
</tr>
<tr>
<td align="center">166</td>
<td align="center">Glenn</td>
<td align="center">AddressC</td>
<td align="center">D900</td>
</tr>
<tr>
<td align="center">166</td>
<td align="center">Glenn</td>
<td align="center">AddressC</td>
<td align="center">D004</td>
</tr>
</tbody></table>
<p>The above table is not normalized. Here are the problems we could face when a table is not normalized.</p>
<ul>
<li><p><strong>Update anomaly</strong></p>
<p>In the above table we have two rows for employee Rick as he belongs to two departments of the company. If we want to update the address of Rick then we have to update the same in two rows or the data will become inconsistent. If somehow, the correct address gets updated in one department but not in other then as per the database, Rick would be having two different addresses, which is not correct and would lead to inconsistent data. </p>
</li>
</ul>
<ul>
<li><p><strong>Insert anomaly</strong></p>
<p>Suppose a new employee joins the company, who is under training and currently not assigned to any department then we would not be able to insert the data into the table if emp_dept field doesn’t allow nulls.</p>
</li>
</ul>
<ul>
<li><p><strong>Delete anomaly</strong></p>
<p>Suppose, if at a point of time the company closes the department D890 then deleting the rows that are having emp_dept as D890 would also delete the information of employee Maggie since she is assigned only to this department.  </p>
</li>
</ul>
<hr>
<h2 id="Database-Normal-Forms"><a href="#Database-Normal-Forms" class="headerlink" title="Database Normal Forms"></a>Database Normal Forms</h2><h3 id="1NF-First-Normal-Form-Rules"><a href="#1NF-First-Normal-Form-Rules" class="headerlink" title="1NF(First Normal Form) Rules"></a>1NF(First Normal Form) Rules</h3><ul>
<li>A column of a table cannot hold multiple values. Each table cell should contain a single value (atomic value)</li>
<li>Each record needs to be unique</li>
</ul>
<p>This is one table that is without normalization because the Movies and Category columns have multiple values :</p>
<table>
<thead>
<tr>
<th align="center">Name</th>
<th align="center">Address</th>
<th align="center">Movies</th>
<th align="center">Salutation</th>
<th align="center">Category</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Janet</td>
<td align="center">Flat B, 6th Street</td>
<td align="center">Deadpool, Spider-Man</td>
<td align="center">Ms.</td>
<td align="center">Action, Action</td>
</tr>
<tr>
<td align="center">Robert</td>
<td align="center">3rd Street</td>
<td align="center">Call Me by Your Name, La La Land</td>
<td align="center">Mr.</td>
<td align="center">Romance, Romance</td>
</tr>
<tr>
<td align="center">Robert</td>
<td align="center">5th Avenue</td>
<td align="center">Spider-Man</td>
<td align="center">Mr.</td>
<td align="center">Action</td>
</tr>
</tbody></table>
<p>(Table 0)</p>
<p>The above table in <strong>1NF</strong> will look like this : </p>
<h4 id="1NF-Example"><a href="#1NF-Example" class="headerlink" title="1NF Example :"></a>1NF Example :</h4><table>
<thead>
<tr>
<th align="center">Name</th>
<th align="center">Address</th>
<th align="center">Movies Rented</th>
<th align="center">Salutation</th>
<th align="center">Category</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Janet</td>
<td align="center">Flat B, 6th Street</td>
<td align="center">Deadpool</td>
<td align="center">Ms.</td>
<td align="center">Action</td>
</tr>
<tr>
<td align="center">Janet</td>
<td align="center">Flat B, 6th Street</td>
<td align="center">Spider-Man</td>
<td align="center">Ms.</td>
<td align="center">Action</td>
</tr>
<tr>
<td align="center">Robert</td>
<td align="center">3rd Street</td>
<td align="center">Call Me by Your Name</td>
<td align="center">Mr.</td>
<td align="center">Romance</td>
</tr>
<tr>
<td align="center">Robert</td>
<td align="center">3rd Street</td>
<td align="center">La La Land</td>
<td align="center">Mr.</td>
<td align="center">Romance</td>
</tr>
<tr>
<td align="center">Robert</td>
<td align="center">5th Avenue</td>
<td align="center">Spider-Man</td>
<td align="center">Mr.</td>
<td align="center">Action</td>
</tr>
</tbody></table>
<p>(Table 1: In 1NF)</p>
<p>A few things too understand first:</p>
<h4 id="What-is-a-KEY"><a href="#What-is-a-KEY" class="headerlink" title="What is a KEY?"></a>What is a KEY?</h4><p>A <strong>KEY</strong> is a value used to identify a record in a table uniquely. A <strong>KEY</strong> could be a single column or combination of multiple columns.</p>
<p>Note: Columns in a table that are NOT used to identify a record uniquely are called non-key columns</p>
<h4 id="What-is-a-primary-Key"><a href="#What-is-a-primary-Key" class="headerlink" title="What is a primary Key?"></a>What is a primary Key?</h4><p>A primary is a single column value used to identify a database record uniquely.</p>
<p>It has following attributes : </p>
<ul>
<li>A primary key cannot be <strong>NULL</strong></li>
<li>A primary key value must be <strong>unique</strong></li>
<li>The primary key values should rarely be changed</li>
<li>The primary key must be given a value when a new record is inserted</li>
</ul>
<h4 id="What-is-a-Composite-Key"><a href="#What-is-a-Composite-Key" class="headerlink" title="What is a Composite Key?"></a>What is a Composite Key?</h4><p>A <strong>composite key</strong> is a primary key composed of multiple columns used to identify a record uniquely</p>
<p>Take the above table as an example, the Name column is not unique. Hence, we require both Name and Address to identify a record uniquely. That is a <strong>composite key</strong>. </p>
<p>Now, move to <strong>Second Normal Form (2NF)</strong></p>
<hr>
<h3 id="2NF-Second-Normal-Form-Rules"><a href="#2NF-Second-Normal-Form-Rules" class="headerlink" title="2NF(Second Normal Form) Rules"></a>2NF(Second Normal Form) Rules</h3><ul>
<li>Rule 1 - Follow 1NF</li>
<li>Rule 2 - <strong>Single Column Primary Key</strong></li>
</ul>
<p>It’s clear that we cannot move forward to make simple database in 2nd Normalization form unless we partition the table above. </p>
<h4 id="2NF-Example"><a href="#2NF-Example" class="headerlink" title="2NF Example :"></a>2NF Example :</h4><table>
<thead>
<tr>
<th align="center">Membership ID</th>
<th align="center">Name</th>
<th align="center">Physical Address</th>
<th align="center">Salutation</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td align="center">Janet</td>
<td align="center">Flat B, 6th Street</td>
<td align="center">Ms.</td>
</tr>
<tr>
<td align="center">2</td>
<td align="center">Robert</td>
<td align="center">3rd Street</td>
<td align="center">Mr.</td>
</tr>
<tr>
<td align="center">3</td>
<td align="center">Robert</td>
<td align="center">5th Avenue</td>
<td align="center">Mr.</td>
</tr>
</tbody></table>
<p>(Table 1)</p>
<table>
<thead>
<tr>
<th align="center">Membership ID</th>
<th align="center">Movies Rented</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td align="center">Deadpool</td>
</tr>
<tr>
<td align="center">1</td>
<td align="center">Spider-Man</td>
</tr>
<tr>
<td align="center">2</td>
<td align="center">Call Me by Your Name</td>
</tr>
<tr>
<td align="center">2</td>
<td align="center">La La Land</td>
</tr>
<tr>
<td align="center">3</td>
<td align="center">Spider-Man</td>
</tr>
</tbody></table>
<p>(Table 2)</p>
<p>We have divided our 1NF table into two tables, Table 1 and Table 2. Table 1 contains member information. Table 2 contains information on movies rented. </p>
<p>We have introduced a new column called <strong>Membership_ID</strong> which is the primary key for Table 1. Records can be uniquely identified in Table 1 using membership id. </p>
<h4 id="Database-Foreign-Key"><a href="#Database-Foreign-Key" class="headerlink" title="Database - Foreign Key"></a>Database - Foreign Key</h4><p>In Table 2, Membership ID is the <strong>Foreign Key</strong> : </p>
<p>Foreign Key references the primary key of another Table! It helps connect your tables</p>
<ul>
<li>A foreign key can have a different name from its primary key</li>
<li>It ensures rows in one table have corresponding rows in another</li>
<li>Unlike the Primary Key, they do not have to be unique. Most often they aren’t</li>
<li>Foreign keys can be null even though primary keys can not</li>
</ul>
<table>
<thead>
<tr>
<th align="center">Membership ID</th>
<th align="center">Movies Rented</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td align="center">Deadpool</td>
</tr>
<tr>
<td align="center">1</td>
<td align="center">Spider-Man</td>
</tr>
<tr>
<td align="center">2</td>
<td align="center">Call Me by Your Name</td>
</tr>
<tr>
<td align="center">2</td>
<td align="center">La La Land</td>
</tr>
<tr>
<td align="center">3</td>
<td align="center">Spider-Man</td>
</tr>
</tbody></table>
<p>(Table 2)</p>
<ul>
<li>Foreign Key references Primary Key</li>
<li>Foreign Key can only have values present in primary key</li>
<li>It could have a name other than that of Primary Key</li>
</ul>
<table>
<thead>
<tr>
<th align="center">Membership ID</th>
<th align="center">Name</th>
<th align="center">Physical Address</th>
<th align="center">Salutation</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td align="center">Janet</td>
<td align="center">Flat B, 6th Street</td>
<td align="center">Ms.</td>
</tr>
<tr>
<td align="center">2</td>
<td align="center">Robert</td>
<td align="center">3rd Street</td>
<td align="center">Mr.</td>
</tr>
<tr>
<td align="center">3</td>
<td align="center">Robert</td>
<td align="center">5th Avenue</td>
<td align="center">Mr.</td>
</tr>
</tbody></table>
<p>(Table 1)</p>
<h4 id="Why-need-a-foreign-key"><a href="#Why-need-a-foreign-key" class="headerlink" title="Why need a foreign key?"></a>Why need a foreign key?</h4><p>You will only be able to insert values into your foreign key that exist in the unique key in the parent table. That helps in referential integrity</p>
<ol>
<li><p>Insert a record in Table 2 where Membership ID = 101</p>
<table>
<thead>
<tr>
<th align="center">Membership ID</th>
<th align="center">Movies Rented</th>
</tr>
</thead>
<tbody><tr>
<td align="center">101</td>
<td align="center">Mission Impossible</td>
</tr>
</tbody></table>
</li>
<li><p>But Membership ID 101 is not present in Table 1</p>
<table>
<thead>
<tr>
<th align="center">Membership ID</th>
<th align="center">Name</th>
<th align="center">Physical Address</th>
<th align="center">Salutation</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td align="center">Janet</td>
<td align="center">FlatB, 6th Street</td>
<td align="center">Ms.</td>
</tr>
<tr>
<td align="center">2</td>
<td align="center">Robert</td>
<td align="center">3rd Street</td>
<td align="center">Mr.</td>
</tr>
<tr>
<td align="center">3</td>
<td align="center">Robert</td>
<td align="center">5th Avenue</td>
<td align="center">Mr.</td>
</tr>
</tbody></table>
<p> (Table 1)</p>
</li>
<li><p>Database will throw an ERROR. This helps in <strong>referential integrity</strong></p>
</li>
</ol>
<p>The above problem can be overcome by declaring membership ID from Table 2 as foreign key of membership ID from Table 1</p>
<p>Now, if somebody tries insert a value in the Membership ID field that does not exist in the parent table, an error will be shown.</p>
<h4 id="What-are-transitive-functional-dependencies"><a href="#What-are-transitive-functional-dependencies" class="headerlink" title="What are transitive functional dependencies?"></a>What are transitive functional dependencies?</h4><p>A <strong>transitive function dependency</strong> is when changing a non-key column, might cause any of the other non-key columns to change</p>
<p>Consider the table 1. Changing the non-key column Name may change Salutation</p>
<table>
<thead>
<tr>
<th align="center">Membership ID</th>
<th align="center">Name</th>
<th align="center">Physical Address</th>
<th align="center">Salutation</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td align="center">Janet</td>
<td align="center">Flat B, 6th Street</td>
<td align="center">Ms.</td>
</tr>
<tr>
<td align="center">2</td>
<td align="center">Robert</td>
<td align="center">3rd Street</td>
<td align="center">Mr.</td>
</tr>
<tr>
<td align="center">3</td>
<td align="center">Robert</td>
<td align="center">5th Avenue</td>
<td align="center">Mr.</td>
</tr>
</tbody></table>
<p>(Table 1)</p>
<p>Let’s move into <strong>3NF</strong></p>
<hr>
<h3 id="3NF-Third-Normal-Form-Rules"><a href="#3NF-Third-Normal-Form-Rules" class="headerlink" title="3NF(Third Normal Form) Rules"></a>3NF(Third Normal Form) Rules</h3><ul>
<li>Rule 1 - Follow 2NF</li>
<li>Rule 2 - Has <strong>no transitive functional dependencies</strong></li>
</ul>
<p>To move 2NF table into 3NF, we again need to divide the table</p>
<h4 id="3NF-Example"><a href="#3NF-Example" class="headerlink" title="3NF Example :"></a>3NF Example :</h4><table>
<thead>
<tr>
<th align="center">Membership ID</th>
<th align="center">Name</th>
<th align="center">Physical Address</th>
<th align="center">Salutation ID</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td align="center">Janet</td>
<td align="center">Flat B, 6th Street</td>
<td align="center">2</td>
</tr>
<tr>
<td align="center">2</td>
<td align="center">Robert</td>
<td align="center">3rd Street</td>
<td align="center">1</td>
</tr>
<tr>
<td align="center">3</td>
<td align="center">Robert</td>
<td align="center">5th Avenue</td>
<td align="center">1</td>
</tr>
</tbody></table>
<p>(Table 1)</p>
<table>
<thead>
<tr>
<th align="center">Membership ID</th>
<th align="center">Movies Rented</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td align="center">Deadpool</td>
</tr>
<tr>
<td align="center">1</td>
<td align="center">Spider-Man</td>
</tr>
<tr>
<td align="center">2</td>
<td align="center">Call Me by Your Name</td>
</tr>
<tr>
<td align="center">2</td>
<td align="center">La La Land</td>
</tr>
<tr>
<td align="center">3</td>
<td align="center">Spider-Man</td>
</tr>
</tbody></table>
<p>(Table 2)</p>
<table>
<thead>
<tr>
<th align="center">Salutation ID</th>
<th align="center">Salutation</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td align="center">Mr.</td>
</tr>
<tr>
<td align="center">2</td>
<td align="center">Ms.</td>
</tr>
<tr>
<td align="center">3</td>
<td align="center">Mrs.</td>
</tr>
<tr>
<td align="center">4</td>
<td align="center">Dr.</td>
</tr>
</tbody></table>
<p>(Table 3)</p>
<p>We have again divided our tables and created a new table which stores Salutations. There are no transitive functional dependencies, and hence our table is in 3NF. In Table 3 Salutation ID is primary key, and in Table 1 Salutation ID is the foreign to primary key in Table 3. </p>
<p>Now our little example is at a level that cannot further be <strong>decomposed</strong> to attain higher forms of normalization. Infact, it is already in higher normalization forms. Separate efforts for moving into next levels of normalizing data are normally needed in complex databases.</p>
<hr>
<h3 id="Boyce-Codd-Normal-Form-BCNF"><a href="#Boyce-Codd-Normal-Form-BCNF" class="headerlink" title="Boyce-Codd Normal Form(BCNF)"></a>Boyce-Codd Normal Form(BCNF)</h3><p>Even when a database is in 3rd Normal Form, still there would be anomalies resulted if it has more than one Candidate Key.</p>
<p>Sometimes BCNF is also referred as 3.5 Normal Form.</p>
<hr>
<h3 id="4NF-Fourth-Normal-Form-Rules"><a href="#4NF-Fourth-Normal-Form-Rules" class="headerlink" title="4NF(Fourth Normal Form) Rules"></a>4NF(Fourth Normal Form) Rules</h3><p>If no database table instance contains two or more, independent and multivalued data describing the relevant entity, then it is in 4th NF.</p>
<hr>
<h3 id="5NF-Fifth-Normal-Form-Rules"><a href="#5NF-Fifth-Normal-Form-Rules" class="headerlink" title="5NF(Fifth Normal Form) Rules"></a>5NF(Fifth Normal Form) Rules</h3><p>A table is in 5th Normal Form only if it is in 4NF and it cannot be decomposed into any number of smaller tables without loss of data.</p>
<hr>
<h3 id="6NF-Sixth-Normal-Form-Rules"><a href="#6NF-Sixth-Normal-Form-Rules" class="headerlink" title="6NF(Sixth Normal Form) Rules"></a>6NF(Sixth Normal Form) Rules</h3><p>Normally, it wouldn’t be used. </p>
<hr>
<h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><ul>
<li>Database designing is critical to the successful implementation of a database management system that meets the data requirements of an enterprise system</li>
<li>Normalization helps produce database systems that are cost-effective and have better security modles</li>
<li>Functional dependencies are a very important component of the normalize data process</li>
<li>Most database systems are normalized database up to the third normal forms</li>
<li>A primary key uniquely identifies record in a Table and cannot be null</li>
<li>A foreign key helps connect table and references a primary key</li>
</ul>
]]></content>
      <categories>
        <category>SQL</category>
        <category>Database</category>
      </categories>
      <tags>
        <tag>Database Normalization</tag>
        <tag>SQL</tag>
        <tag>1NF</tag>
        <tag>2NF</tag>
        <tag>3NF</tag>
      </tags>
  </entry>
  <entry>
    <title>ASCII, ANSI and Unicode</title>
    <url>/category/ASCII-ANSI-and-Unicode/</url>
    <content><![CDATA[<h3 id="Character-Encoding"><a href="#Character-Encoding" class="headerlink" title="Character Encoding"></a>Character Encoding</h3><p>A character encoding tells the computer how to interpret raw zeroes and ones into real characters. It usually does this by pairing numbers with characters. Words and sentences in text are created from characters and these characters are grouped into a character set. There are many different types of character encodings floating arounds at present, but the ones we deal most frequently with are ASCII, <strong>8-bit</strong> encodings, and Unicode-based encodings.</p>
<a id="more"></a>

<h3 id="ASCII"><a href="#ASCII" class="headerlink" title="ASCII"></a>ASCII</h3><p><strong>American Standard Code for Information Interchange(ASCII)</strong> is a character-encoding scheme and it was the first character encoding standard. It is a code for representing English characters as numbers, with each letter assigned a number from 0-127. Most modern character-encoding schemes are based on ASCII, though they support many additional characters. It is a single byte encoding only using the bottom <strong>7 bits</strong>. In an ASCII file, each alphabetic, numeric, or special character is represented with a <strong>7-bit</strong> binay number. </p>
<h3 id="ANSI"><a href="#ANSI" class="headerlink" title="ANSI"></a>ANSI</h3><ul>
<li>ANSI(American National Standards Institute) codes are standardized numeric or alphabetic codes issued by the American National Standards Institute to ensure uniform identification. </li>
<li>This is essentially an extension of the ASCII character set in that it includes all the ASCII characters with an additional 128 character codes. </li>
<li>ASCII just defines a 7 bit code page with 128 symbols. <strong>ANSI</strong> extends this to <strong>8 bit</strong> and there are serveral different code page for the symbols 128 to 255. It can only represent a maximum of 256 characters. </li>
<li>ANSI is very old and is used by OS like Windows 95/98 and older. </li>
</ul>
<h3 id="Unicode"><a href="#Unicode" class="headerlink" title="Unicode"></a>Unicode</h3><ul>
<li>Unicode is a newer encoding which defines the internal text coding system in almost all OS used in computers at present, whether it is Windows, Unix, Macintosh, Linux or whatever, because Unicode can handle characters for almost all modern languages and even some ancient languages at the same time, as long as the client has fonts for the particular language installed in his system.</li>
<li>Unicode uses a maximum of <strong>32 bits</strong> for each code point</li>
</ul>
<h3 id="UTF"><a href="#UTF" class="headerlink" title="UTF"></a>UTF</h3><p>Unicode assigns each character a unique number, or code point. It defines two mapping methods, the <strong>UTF(Unicode Transformation Format) encodings</strong>, and the <strong>UCS(Universal Character Set)</strong> encodings. Unicode-based encodings implement the Unicode standard and include <strong>UTF-8</strong>, <strong>UTF-16</strong> and <strong>UTF-32/UCS-4</strong>. They go beyond <strong>8-bits</strong> and support almost every language in the world. UTF-8 is gaining traction as the dominant international encoding of the web. UTF-8, UTF-16 and UTF-32 are probably the most commonly used encodings.</p>
<h4 id="UTF-8"><a href="#UTF-8" class="headerlink" title="UTF-8"></a>UTF-8</h4><ul>
<li>Uses <strong>1 byte</strong> to represesnt characters in the ASCII set, <strong>two bytes</strong> for characters in several more alphabetic blocks, and <strong>three bytes</strong> for the rest of the BMP. Supplementary characters use <strong>4 bytes</strong>. </li>
<li>UTF-8 uses a <strong>multibyte encoding scheme</strong> makes it possible to accommodate all these code point yet manages to consume minimal memory. The first byte of UTF-8 matches ASCII exactly, hence the most common characters only need a single byte. </li>
</ul>
<h4 id="UTF-16"><a href="#UTF-16" class="headerlink" title="UTF-16"></a>UTF-16</h4><p>Uses <strong>2 bytes</strong> for any character in the BMP, and 4 bytes for supplementary characters.</p>
<h4 id="UTF-32"><a href="#UTF-32" class="headerlink" title="UTF-32"></a>UTF-32</h4><p>Uses <strong>4 bytes</strong> for all characters. </p>
]]></content>
      <categories>
        <category>Encoding</category>
      </categories>
      <tags>
        <tag>ASCII</tag>
        <tag>ANSI</tag>
        <tag>Unicode</tag>
        <tag>UTF</tag>
      </tags>
  </entry>
  <entry>
    <title>[LeetCode] 35. Search Insert Position</title>
    <url>/category/LeetCode-35-Search-Insert-Position/</url>
    <content><![CDATA[<h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>Given a sorted array and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.</p>
<p>You may assume no duplicates in the array.</p>
<a id="more"></a>

<h4 id="Example-1"><a href="#Example-1" class="headerlink" title="Example 1"></a>Example 1</h4><p>Input: [1,3,5,6], 5<br>Output: 2</p>
<h4 id="Example-2"><a href="#Example-2" class="headerlink" title="Example 2"></a>Example 2</h4><p>Input: [1,3,5,6], 2<br>Output: 1</p>
<h4 id="Example-3"><a href="#Example-3" class="headerlink" title="Example 3"></a>Example 3</h4><p>Input: [1,3,5,6], 7<br>Output: 4</p>
<h4 id="Example-4"><a href="#Example-4" class="headerlink" title="Example 4"></a>Example 4</h4><p>Input: [1,3,5,6], 0<br>Output: 0</p>
<hr>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">searchInsert</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> right = nums.length - <span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> pivot = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (nums[pivot] == target) <span class="keyword">return</span> pivot;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (nums[pivot] &gt; target) right = pivot - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (nums[pivot] &lt; target) left = pivot + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> left;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode Easy</category>
        <category>Binary Search</category>
      </categories>
      <tags>
        <tag>LeetCode(Easy)</tag>
        <tag>Binary Search</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL Commands</title>
    <url>/category/SQL-Commands/</url>
    <content><![CDATA[<p>Structured Query Language(SQL) as we all know is the database language by the use of wich we can perform certain operations on the existing database and also we can use this language to create a database. SQL uses certain commands like Create, Drop, Insert stc. to carry out the required tasks. </p>
<a id="more"></a>

<p>These SQL commands are mainly categorized into four categories as:</p>
<ol>
<li>DDL - Data Definition Language</li>
<li>DQL - Data Query Language</li>
<li>DML - Data Manipulation Language</li>
<li>DCL - Data Control Language</li>
</ol>
<p>Though many resources claim there to be another category of SQL clauses TCL - Transaction Control Language.</p>
<p><img src="https://i.imgur.com/uZg5Qre.png" alt="Types of SQL Commands"></p>
<h3 id="1-DDL-Data-Definition-Language"><a href="#1-DDL-Data-Definition-Language" class="headerlink" title="1. DDL(Data Definition Language)"></a>1. DDL(Data Definition Language)</h3><p>DDL or Data Definition Language actually consists of the SQL commands that can be used to define the database schema. It simpy deals with descriptions of the database schema and is used to create and modify the structure of database objects in the database.</p>
<p><strong>Examples of DDL commands:</strong></p>
<ul>
<li>CREATE - is used to create the database or its objects (like table, index, function, views, store procedure and triggers)</li>
<li>DROP - is used to delete objects from the database</li>
<li>ALTER - is used to alter the structure of the database</li>
<li>TRANCATE - is used to remove all records from a table, including all spaces allocated for the records are removed</li>
<li>COMMENT - is used to add comments to the data dictionary</li>
<li>RENAME - is used to rename an object existing in the database</li>
</ul>
<h3 id="2-DQL-Data-Query-Language"><a href="#2-DQL-Data-Query-Language" class="headerlink" title="2. DQL (Data Query Language)"></a>2. DQL (Data Query Language)</h3><p>DQL statements are used for performing queries on the data within schema objects. The purpose of DQL Command is to get some schema relation based on the query passed to it.</p>
<p><strong>Eample of DQL:</strong></p>
<ul>
<li>SELECT - is used to retrieve data from the database</li>
</ul>
<h3 id="3-DML-Data-Manipulation-Language"><a href="#3-DML-Data-Manipulation-Language" class="headerlink" title="3. DML(Data Manipulation Language)"></a>3. DML(Data Manipulation Language)</h3><p>The SQL commands that deals with the manipulation of data present in the database belong to DML or Data Manipulation Language and this includes most of the SQL statements.</p>
<p><strong>Eamples of DML:</strong></p>
<ul>
<li>INSERT - is used to insert data into a table</li>
<li>UPDATE - is used to update existing data within a table</li>
<li>DELETE - is used to delete records from a database table</li>
</ul>
<h3 id="4-DCL-Data-Control-Language"><a href="#4-DCL-Data-Control-Language" class="headerlink" title="4. DCL(Data Control Language)"></a>4. DCL(Data Control Language)</h3><p>DCL included commands such as GRANT and REVOKE which mainly deals with the rights, permissions and other controls of the database system.</p>
<p><strong>Examples:</strong></p>
<ul>
<li>GRANT - gives user’s access privileges to database</li>
<li>REVOKE - withdraw user’s access privileges given by using the GRANT command</li>
</ul>
<h3 id="5-TCC-Transaction-Control-Commands"><a href="#5-TCC-Transaction-Control-Commands" class="headerlink" title="5. TCC(Transaction Control Commands)"></a>5. TCC(Transaction Control Commands)</h3><p>TCL commands deals with the transaction within the database</p>
<p><strong>Examples of TCL commands:</strong></p>
<ul>
<li>COMMIT - commits a transaction</li>
<li>ROLLBACK - rollbacks a transaction in case of anu error occurs</li>
<li>SAVEPOINT - set a savepoint within a transaction</li>
<li>SET TRANSACTION - specify characteristics for the transaction</li>
</ul>
]]></content>
      <categories>
        <category>SQL</category>
      </categories>
      <tags>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>[LeetCode] 4. Median of Two Sorted Arrays</title>
    <url>/category/LeetCode-4-Median-of-Two-Sorted-Arrays/</url>
    <content><![CDATA[<h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>There are two sorted arrays <strong>nums1</strong> and <strong>nums2</strong> of size m and n respectively.<br>Find the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).<br>You may assume <strong>nums1</strong> and <strong>nums2</strong> cannot be both empty.</p>
<a id="more"></a>

<h4 id="Example-1"><a href="#Example-1" class="headerlink" title="Example 1"></a>Example 1</h4><p>nums1 = [1, 3]<br>nums2 = [2]</p>
<p>The median is 2.0</p>
<h4 id="Example-2"><a href="#Example-2" class="headerlink" title="Example 2"></a>Example 2</h4><p>nums1 = [1, 2]<br>nums2 = [3, 4]  </p>
<p>The median is (2 + 3)/2 = 2.5</p>
<hr>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>Find the median of two sorted arrays:</p>
<p>eg.<br>arr1 = [1, 3, 5]<br>arr2 = [2, 4, 6]</p>
<p>[1, 2, 3, 4, 5, 6] (merge in a sorted order)</p>
<p>median(arr1, arr2) = (3+4) / 2 = 3.5 </p>
<p>There are some questions we need to consider. In this case, the problem definition doesn’t specify that the two arrays are the same length. If it’s not the same length, we need to do it in a clever way. Second, the arrays are arrays of integers and we’re going to return a double in this case because we’re doing an average.</p>
<p>Normal way:<br>Merge two arrays into one sorted array and it will take linear time. The median will be the middle element(size is odd) or the average of middle two elements(size is even). </p>
<p>Another example:<br>arr1 = [1, 2, 3, 4, 5, 6]<br>Median: 3.5</p>
<p>arr2 = [0, 0, 0, 0, 10, 10]<br>Median: 0</p>
<p>We can see that the median of the first array is bigger than the second array, that means that the first array must have more elements on the high side than the second array. So we can find that the median of the first arrays must be in the lesser half of the array. And for the second array, the median must be in the greater half of the array. Otherwise the medians would be equal. This means both arrays have the same spacing of the elements on either side of the median. And if the median is the same for both array, the median for both array stay the same.  </p>
<p>[To Be Continue]</p>
]]></content>
      <categories>
        <category>LeetCode Hard</category>
        <category>Binary Search</category>
      </categories>
      <tags>
        <tag>Binary Search</tag>
        <tag>LeetCode(Hard)</tag>
      </tags>
  </entry>
  <entry>
    <title>[LeetCode] 349. Intersection of Two Arrays</title>
    <url>/category/LeetCode-349-Intersection-of-Two-Arrays/</url>
    <content><![CDATA[<h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>Given two arrays, write a function to compute their intersection.</p>
<a id="more"></a>

<h4 id="Example-1"><a href="#Example-1" class="headerlink" title="Example 1"></a>Example 1</h4><p>Input: nums1 = [1,2,2,1], nums2 = [2,2]<br>Output: [2]</p>
<h4 id="Example-2"><a href="#Example-2" class="headerlink" title="Example 2"></a>Example 2</h4><p>Input: nums1 = [4,9,5], nums2 = [9,4,9,8,4]<br>Output: [9,4]</p>
<h4 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h4><p>Each element in the result must be unique.<br>The result can be in any order.</p>
<h3 id="Solutions"><a href="#Solutions" class="headerlink" title="Solutions"></a>Solutions</h3><p>Time: O(nlogn)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] intersection(<span class="keyword">int</span>[] nums1, <span class="keyword">int</span>[] nums2) &#123;</span><br><span class="line">        HashSet&lt;Integer&gt; set = <span class="keyword">new</span> HashSet&lt;Integer&gt;();</span><br><span class="line">        Arrays.sort(nums1);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// loop num2 find if element in nums2 also in num1</span></span><br><span class="line">        <span class="comment">// if yes add to set</span></span><br><span class="line">        <span class="keyword">for</span> (Integer num : nums2)</span><br><span class="line">        &#123;</span><br><span class="line">           <span class="keyword">if</span> (binarySearch(nums1, num))</span><br><span class="line">           &#123;</span><br><span class="line">               set.add(num);</span><br><span class="line">           &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// convert HashSet to array</span></span><br><span class="line">        <span class="keyword">int</span>[] result = <span class="keyword">new</span> <span class="keyword">int</span>[set.size()];</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> n : set)</span><br><span class="line">        &#123;</span><br><span class="line">            result[i++] = n;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">binarySearch</span> <span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>, pivot = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> right = nums.length - <span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right)</span><br><span class="line">        &#123;</span><br><span class="line">            pivot = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (target &gt; nums[pivot])</span><br><span class="line">            &#123;</span><br><span class="line">                left = pivot + <span class="number">1</span>;</span><br><span class="line">            &#125; </span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (target &lt; nums[pivot])</span><br><span class="line">            &#123;</span><br><span class="line">                right = pivot - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> </span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode Easy</category>
        <category>Binary Search</category>
      </categories>
      <tags>
        <tag>LeetCode(Easy)</tag>
        <tag>Binary Search</tag>
      </tags>
  </entry>
  <entry>
    <title>How to improve SQL queries performance</title>
    <url>/category/How%20to%20improve%20SQL%20queries%20perofrmace/</url>
    <content><![CDATA[<h2 id="1-Only-Retrieve-The-Data-You-Need"><a href="#1-Only-Retrieve-The-Data-You-Need" class="headerlink" title="1. Only Retrieve The Data You Need"></a>1. Only Retrieve The Data You Need</h2><p>The mindset of “the more data, the better” isn’t the correct way when you’re writing SQL query. You SQL performance might suffer from the fact that your query is trying to pull to too much data. So that’s why it’s generally a good idea to look out for the <strong>SELECT</strong> statement, the <strong>DISTINCT</strong> and <strong>UNION</strong> clause and the <strong>LIKE</strong> operator</p>
<a id="more"></a>

<h3 id="The-SELECT-Statement"><a href="#The-SELECT-Statement" class="headerlink" title="The SELECT Statement"></a>The SELECT Statement</h3><p>The first thing you can check when you have written your query is whether the <strong>SELECT</strong> statement is as compact as possible. Do not get used to <code>select *</code> because in the most cases, you don’t need that and the unnecessary columns places extra loads on the database which will slown down the single SQL and the system. Besides, it can increase the consumption of extra I/O, memory and CPU as well. It’s better for you to specify the columns you want. </p>
<h3 id="The-DISTINCT-and-UNION-clause"><a href="#The-DISTINCT-and-UNION-clause" class="headerlink" title="The DISTINCT and UNION clause"></a>The DISTINCT and UNION clause</h3><p><strong>DISTINCT</strong> and <strong>UNION</strong> should be used only if it is necessary. <strong>DISTINCT</strong> and <strong>UNION</strong> operators cause sorting, which slows down the SQL execution. </p>
<p>The <code>SELECT DISTINCT</code> statement is used to return only distinct(different) values. The execution time only increases if you add this clause to your query. <strong>DISTINCT</strong> works by grouping all fields in the query to create distinct results. To accomplish this goal however, a large amount of processing power is required. </p>
<p>It’s therefore always a good idea to consider whether you need this <code>DISTINCT</code>.<br>Use <strong>UNION ALL</strong> instead of <strong>UNION</strong>, if possible, as it is much more efficient.  </p>
<h3 id="The-LIKE-operator"><a href="#The-LIKE-operator" class="headerlink" title="The LIKE operator"></a>The LIKE operator</h3><p>The predicate <strong>LIKE</strong> <code>&#39;%abc&#39;</code> causes a full table scan. So try to avoid using wildcard(%) at the beginning of a predicate. </p>
<h2 id="2-Limit-Your-Results"><a href="#2-Limit-Your-Results" class="headerlink" title="2. Limit Your Results"></a>2. Limit Your Results</h2><ul>
<li>You can add <code>LIMIT</code> or <code>TOP</code> clauses to your query to set a maximum number of rows for the result set. </li>
<li>Additionally, you can also add the <code>ROWNUM</code>clause, which is equivalent to using <code>LIMIT</code>in your query. See the examples below. </li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT * FROM Users</span><br><span class="line">WHERE age = 25 AND ROWNUM &lt;= 5;</span><br><span class="line"></span><br><span class="line">SELECT * FROM Users LIMIT 5</span><br><span class="line">WHERE age = 25 AND;</span><br></pre></td></tr></table></figure>

<h2 id="3-Don’t-Make-Queries-More-Complex-Than-They-Need-To-Be"><a href="#3-Don’t-Make-Queries-More-Complex-Than-They-Need-To-Be" class="headerlink" title="3. Don’t Make Queries More Complex Than They Need To Be"></a>3. Don’t Make Queries More Complex Than They Need To Be</h2><p>Try to keep your query simple and efficient</p>
<h2 id="4-Create-joins-with-INNER-JOIN-rather-than-WHERE"><a href="#4-Create-joins-with-INNER-JOIN-rather-than-WHERE" class="headerlink" title="4. Create joins with INNER JOIN rather than WHERE"></a>4. Create joins with INNER JOIN rather than WHERE</h2><p>I used to prefer to make joins with <strong>WHERE</strong> clause, such as the following:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT dwColumns.ID, dwColumns.Name, dwTables.ID, dwTables.Name</span><br><span class="line">FROM dwTables, dwColumns</span><br><span class="line">WHERE dwTables.ID = dwColumns.tableID</span><br></pre></td></tr></table></figure>

<p>This type of join creates a Cartesian Join, also called a Cartesian Product or <strong>CROSS JOIN</strong>. In Cartesian Join, all possible combinations of the variables are creates. In this example, if we had 1,000 tables with 100 columns for each table, the query would first genrate 100,000 results, then filter for the 1,000 records where the table ID is correctly joined. This is an inefficient use of database resources. Cartesian Joins are especially problematic in large-scale databases, because a Cartesian Join of two large tables could create billions or trillions of results. </p>
<p>To avoid creating a Cartesion Join, <strong>INNER JOIN</strong> should be used instead:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT dwTables.ID, dwTables.Name, dwTables.ID, dwTables.Name</span><br><span class="line">FROM dwTables</span><br><span class="line">    INNER JOIN dwColumns</span><br><span class="line">    ON dwTables.ID = dwColumns.tableID</span><br></pre></td></tr></table></figure>

<h2 id="5-Avoid-using-wildcard-at-the-beginning-of-a-predicate"><a href="#5-Avoid-using-wildcard-at-the-beginning-of-a-predicate" class="headerlink" title="5. Avoid using wildcard(%) at the beginning of a predicate."></a>5. Avoid using wildcard(%) at the beginning of a predicate.</h2><p>The predicate LIKE ‘%abc’ causes full table scan. </p>
<p>When a leading wildcard is used, especially in combination with an ending wildcard, the database is tasked with searching all records for a match anywhere within the selected fields. </p>
<p>For example:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT * FROM TABLE1 WHERE COL1 LIKE &apos;%abc&apos;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>SQL</category>
      </categories>
      <tags>
        <tag>SQL</tag>
      </tags>
  </entry>
</search>
